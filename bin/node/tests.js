// Generated by Haxe 3.4.2
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DateTools = function() { };
DateTools.__name__ = true;
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw new js__$Boot_HaxeError("Date.format %" + e + "- not implemented yet.");
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len1 = f.length - p;
	r_b += len1 == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len1);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var RunTests = function() { };
RunTests.__name__ = true;
RunTests.main = function() {
	grest_sheets_v4_Sheets.api(null,null);
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var grest__$AccessToken_AccessToken_$Impl_$ = {};
grest__$AccessToken_AccessToken_$Impl_$.__name__ = true;
grest__$AccessToken_AccessToken_$Impl_$.expired = function(this1) {
	return this1.expiry.getTime() > new Date().getTime() + 60000;
};
grest__$AccessToken_AccessToken_$Impl_$.fromResponse = function(v) {
	var v1 = v.access_token;
	var t = new Date().getTime() + v.expires_in * 1000;
	return { accessToken : v1, expiry : new Date(t)};
};
var tink_http_ClientObject = function() { };
tink_http_ClientObject.__name__ = true;
tink_http_ClientObject.prototype = {
	__class__: tink_http_ClientObject
};
var grest_AuthedClient = function(auth,proxy) {
	this.auth = auth;
	this.proxy = proxy;
};
grest_AuthedClient.__name__ = true;
grest_AuthedClient.__interfaces__ = [tink_http_ClientObject];
grest_AuthedClient.prototype = {
	request: function(req) {
		var _gthis = this;
		return tink_core__$Promise_Promise_$Impl_$.next(tink_core__$Promise_Promise_$Impl_$.next(this.auth.auth(),function(token) {
			req.header.fields.push(new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("authorization"),"Bearer " + token.accessToken));
			var ret = tink_io_IdealSourceTools.all(req.body).map(tink_core_Outcome.Success);
			return ret.gather();
		}),function(bytes) {
			req.header.fields.push(new tink_http_HeaderField("content-length",Std.string(bytes.getLength())));
			req.body = new tink_streams_Single(new tink_core__$Lazy_LazyConst(bytes));
			return _gthis.proxy.request(req);
		});
	}
	,__class__: grest_AuthedClient
};
var grest_Authenticator = function() { };
grest_Authenticator.__name__ = true;
grest_Authenticator.prototype = {
	__class__: grest_Authenticator
};
var grest_sheets_v4_Sheets = function() { };
grest_sheets_v4_Sheets.__name__ = true;
grest_sheets_v4_Sheets.api = function(auth,client) {
	return new tink_web_proxy_Remote0(new grest_AuthedClient(auth,client),tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$._new(tink_url__$Host_Host_$Impl_$._new("sheets.googleapis.com")));
};
var grest_sheets_v4_api_Sheets = function() { };
grest_sheets_v4_api_Sheets.__name__ = true;
grest_sheets_v4_api_Sheets.prototype = {
	__class__: grest_sheets_v4_api_Sheets
};
var grest_sheets_v4_api_Spreadsheets = function() { };
grest_sheets_v4_api_Spreadsheets.__name__ = true;
grest_sheets_v4_api_Spreadsheets.prototype = {
	__class__: grest_sheets_v4_api_Spreadsheets
};
var grest_sheets_v4_api_spreadsheets_Sheets = function() { };
grest_sheets_v4_api_spreadsheets_Sheets.__name__ = true;
grest_sheets_v4_api_spreadsheets_Sheets.prototype = {
	__class__: grest_sheets_v4_api_spreadsheets_Sheets
};
var grest_sheets_v4_api_spreadsheets_Values = function() { };
grest_sheets_v4_api_spreadsheets_Values.__name__ = true;
grest_sheets_v4_api_spreadsheets_Values.prototype = {
	__class__: grest_sheets_v4_api_spreadsheets_Values
};
var grest_sheets_v4_types__$Api_$sheets_$spreadsheets_$batchUpdate_$spreadsheetId_$Command_Api_$sheets_$spreadsheets_$batchUpdate_$spreadsheetId_$Command_$Impl_$ = {};
grest_sheets_v4_types__$Api_$sheets_$spreadsheets_$batchUpdate_$spreadsheetId_$Command_Api_$sheets_$spreadsheets_$batchUpdate_$spreadsheetId_$Command_$Impl_$.__name__ = true;
grest_sheets_v4_types__$Api_$sheets_$spreadsheets_$batchUpdate_$spreadsheetId_$Command_Api_$sheets_$spreadsheets_$batchUpdate_$spreadsheetId_$Command_$Impl_$._new = function(v) {
	var this1 = v;
	return this1;
};
grest_sheets_v4_types__$Api_$sheets_$spreadsheets_$batchUpdate_$spreadsheetId_$Command_Api_$sheets_$spreadsheets_$batchUpdate_$spreadsheetId_$Command_$Impl_$.fromString = function(v) {
	var this1 = v + ":batchUpdate";
	return this1;
};
var grest_sheets_v4_types__$Api_$sheets_$spreadsheets_$sheets_$copyTo_$sheetId_$Command_Api_$sheets_$spreadsheets_$sheets_$copyTo_$sheetId_$Command_$Impl_$ = {};
grest_sheets_v4_types__$Api_$sheets_$spreadsheets_$sheets_$copyTo_$sheetId_$Command_Api_$sheets_$spreadsheets_$sheets_$copyTo_$sheetId_$Command_$Impl_$.__name__ = true;
grest_sheets_v4_types__$Api_$sheets_$spreadsheets_$sheets_$copyTo_$sheetId_$Command_Api_$sheets_$spreadsheets_$sheets_$copyTo_$sheetId_$Command_$Impl_$._new = function(v) {
	var this1 = v;
	return this1;
};
grest_sheets_v4_types__$Api_$sheets_$spreadsheets_$sheets_$copyTo_$sheetId_$Command_Api_$sheets_$spreadsheets_$sheets_$copyTo_$sheetId_$Command_$Impl_$.fromString = function(v) {
	var this1 = v + ":copyTo";
	return this1;
};
var grest_sheets_v4_types__$Api_$sheets_$spreadsheets_$values_$append_$range_$Command_Api_$sheets_$spreadsheets_$values_$append_$range_$Command_$Impl_$ = {};
grest_sheets_v4_types__$Api_$sheets_$spreadsheets_$values_$append_$range_$Command_Api_$sheets_$spreadsheets_$values_$append_$range_$Command_$Impl_$.__name__ = true;
grest_sheets_v4_types__$Api_$sheets_$spreadsheets_$values_$append_$range_$Command_Api_$sheets_$spreadsheets_$values_$append_$range_$Command_$Impl_$._new = function(v) {
	var this1 = v;
	return this1;
};
grest_sheets_v4_types__$Api_$sheets_$spreadsheets_$values_$append_$range_$Command_Api_$sheets_$spreadsheets_$values_$append_$range_$Command_$Impl_$.fromString = function(v) {
	var this1 = v + ":append";
	return this1;
};
var grest_sheets_v4_types__$Api_$sheets_$spreadsheets_$values_$clear_$range_$Command_Api_$sheets_$spreadsheets_$values_$clear_$range_$Command_$Impl_$ = {};
grest_sheets_v4_types__$Api_$sheets_$spreadsheets_$values_$clear_$range_$Command_Api_$sheets_$spreadsheets_$values_$clear_$range_$Command_$Impl_$.__name__ = true;
grest_sheets_v4_types__$Api_$sheets_$spreadsheets_$values_$clear_$range_$Command_Api_$sheets_$spreadsheets_$values_$clear_$range_$Command_$Impl_$._new = function(v) {
	var this1 = v;
	return this1;
};
grest_sheets_v4_types__$Api_$sheets_$spreadsheets_$values_$clear_$range_$Command_Api_$sheets_$spreadsheets_$values_$clear_$range_$Command_$Impl_$.fromString = function(v) {
	var this1 = v + ":clear";
	return this1;
};
var haxe_StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = true;
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null ? "null" : "" + cname;
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_ds_Either = { __ename__ : true, __constructs__ : ["Left","Right"] };
haxe_ds_Either.Left = function(v) { var $x = ["Left",0,v]; $x.__enum__ = haxe_ds_Either; $x.toString = $estr; return $x; };
haxe_ds_Either.Right = function(v) { var $x = ["Right",1,v]; $x.__enum__ = haxe_ds_Either; $x.toString = $estr; return $x; };
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = { __ename__ : true, __constructs__ : ["Some","None"] };
haxe_ds_Option.Some = function(v) { var $x = ["Some",0,v]; $x.__enum__ = haxe_ds_Option; $x.toString = $estr; return $x; };
haxe_ds_Option.None = ["None",1];
haxe_ds_Option.None.toString = $estr;
haxe_ds_Option.None.__enum__ = haxe_ds_Option;
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_Fs = require("fs");
var js_node_buffer_Buffer = require("buffer").Buffer;
var tink_chunk_ChunkBase = function() { };
tink_chunk_ChunkBase.__name__ = true;
tink_chunk_ChunkBase.prototype = {
	getCursor: function() {
		if(this.flattened == null) {
			this.flatten(this.flattened = []);
		}
		return tink_chunk_ChunkCursor.create(this.flattened.slice());
	}
	,flatten: function(into) {
	}
	,__class__: tink_chunk_ChunkBase
};
var tink_chunk_ChunkObject = function() { };
tink_chunk_ChunkObject.__name__ = true;
tink_chunk_ChunkObject.prototype = {
	__class__: tink_chunk_ChunkObject
};
var tink__$Chunk_EmptyChunk = function() {
};
tink__$Chunk_EmptyChunk.__name__ = true;
tink__$Chunk_EmptyChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink__$Chunk_EmptyChunk.__super__ = tink_chunk_ChunkBase;
tink__$Chunk_EmptyChunk.prototype = $extend(tink_chunk_ChunkBase.prototype,{
	getLength: function() {
		return 0;
	}
	,slice: function(from,to) {
		return this;
	}
	,blitTo: function(target,offset) {
	}
	,toString: function() {
		return "";
	}
	,toBytes: function() {
		return tink__$Chunk_EmptyChunk.EMPTY;
	}
	,__class__: tink__$Chunk_EmptyChunk
});
var tink__$Chunk_CompoundChunk = function(left,right) {
	this.left = left;
	this.right = right;
	this.split = left.getLength();
	this.length = this.split + right.getLength();
};
tink__$Chunk_CompoundChunk.__name__ = true;
tink__$Chunk_CompoundChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink__$Chunk_CompoundChunk.__super__ = tink_chunk_ChunkBase;
tink__$Chunk_CompoundChunk.prototype = $extend(tink_chunk_ChunkBase.prototype,{
	getLength: function() {
		return this.length;
	}
	,flatten: function(into) {
		this.left.flatten(into);
		this.right.flatten(into);
	}
	,slice: function(from,to) {
		return tink__$Chunk_Chunk_$Impl_$.concat(this.left.slice(from,to),this.right.slice(from - this.split,to - this.split));
	}
	,blitTo: function(target,offset) {
		this.left.blitTo(target,offset);
		this.right.blitTo(target,offset + this.split);
	}
	,toString: function() {
		return this.toBytes().toString();
	}
	,toBytes: function() {
		var ret = new haxe_io_Bytes(new ArrayBuffer(this.length));
		this.blitTo(ret,0);
		return ret;
	}
	,__class__: tink__$Chunk_CompoundChunk
});
var tink__$Chunk_Chunk_$Impl_$ = {};
tink__$Chunk_Chunk_$Impl_$.__name__ = true;
tink__$Chunk_Chunk_$Impl_$.get_length = function(this1) {
	return this1.getLength();
};
tink__$Chunk_Chunk_$Impl_$.concat = function(this1,that) {
	var _g = that.getLength();
	var _g1 = this1.getLength();
	if(_g1 == 0) {
		if(_g == 0) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		} else {
			return that;
		}
	} else if(_g == 0) {
		return this1;
	} else {
		return new tink__$Chunk_CompoundChunk(this1,that);
	}
};
tink__$Chunk_Chunk_$Impl_$.cursor = function(this1) {
	return this1.getCursor();
};
tink__$Chunk_Chunk_$Impl_$.iterator = function(this1) {
	return new tink_chunk_ChunkIterator(this1.getCursor());
};
tink__$Chunk_Chunk_$Impl_$.slice = function(this1,from,to) {
	return this1.slice(from,to);
};
tink__$Chunk_Chunk_$Impl_$.blitTo = function(this1,target,offset) {
	this1.blitTo(target,offset);
	return;
};
tink__$Chunk_Chunk_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tink__$Chunk_Chunk_$Impl_$.toBytes = function(this1) {
	return this1.toBytes();
};
tink__$Chunk_Chunk_$Impl_$.join = function(chunks) {
	if(chunks == null) {
		return tink__$Chunk_Chunk_$Impl_$.EMPTY;
	} else {
		switch(chunks.length) {
		case 0:
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		case 1:
			var v = chunks[0];
			return v;
		default:
			var v1 = chunks;
			var ret = tink__$Chunk_Chunk_$Impl_$.catChunk(v1[0],v1[1]);
			var _g1 = 2;
			var _g = v1.length;
			while(_g1 < _g) {
				var i = _g1++;
				ret = tink__$Chunk_Chunk_$Impl_$.catChunk(ret,v1[i]);
			}
			return ret;
		}
	}
};
tink__$Chunk_Chunk_$Impl_$.ofBytes = function(b) {
	return tink_chunk_ByteChunk.of(b);
};
tink__$Chunk_Chunk_$Impl_$.ofString = function(s) {
	return tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(s));
};
tink__$Chunk_Chunk_$Impl_$.catChunk = function(a,b) {
	return tink__$Chunk_Chunk_$Impl_$.concat(a,b);
};
tink__$Chunk_Chunk_$Impl_$.rcatString = function(a,b) {
	return tink__$Chunk_Chunk_$Impl_$.catChunk(a,tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(b)));
};
tink__$Chunk_Chunk_$Impl_$.lcatString = function(a,b) {
	return tink__$Chunk_Chunk_$Impl_$.catChunk(tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(a)),b);
};
tink__$Chunk_Chunk_$Impl_$.lcatBytes = function(a,b) {
	return tink__$Chunk_Chunk_$Impl_$.catChunk(tink_chunk_ByteChunk.of(a),b);
};
tink__$Chunk_Chunk_$Impl_$.rcatBytes = function(a,b) {
	return tink__$Chunk_Chunk_$Impl_$.catChunk(a,tink_chunk_ByteChunk.of(b));
};
var tink__$Stringly_Stringly_$Impl_$ = {};
tink__$Stringly_Stringly_$Impl_$.__name__ = true;
tink__$Stringly_Stringly_$Impl_$.isNumber = function(s,allowFloat) {
	if(s.length == 0) {
		return false;
	}
	var pos = 0;
	var max = s.length;
	if(pos < max && s.charCodeAt(pos) == 45) {
		++pos;
	}
	if(!allowFloat) {
		if(pos < max && s.charCodeAt(pos) == 48 && pos++ > -1) {
			if(pos < max && s.charCodeAt(pos) == 120) {
				++pos;
			}
		}
	}
	while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
	if(allowFloat && pos < max) {
		if(pos < max && s.charCodeAt(pos) == 46 && pos++ > -1) {
			while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
		}
		if(pos < max && s.charCodeAt(pos) == 101 && pos++ > -1 || pos < max && s.charCodeAt(pos) == 69 && pos++ > -1) {
			if(!(pos < max && s.charCodeAt(pos) == 43 && pos++ > -1)) {
				if(pos < max && s.charCodeAt(pos) == 45) {
					++pos;
				}
			}
			while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
		}
	}
	return pos == max;
};
tink__$Stringly_Stringly_$Impl_$.toBool = function(this1) {
	if(this1 != null) {
		var _g = StringTools.trim(this1).toLowerCase();
		switch(_g) {
		case "0":case "false":case "no":
			return false;
		default:
			return true;
		}
	} else {
		return false;
	}
};
tink__$Stringly_Stringly_$Impl_$.parseFloat = function(this1) {
	var _g = StringTools.trim(this1);
	var v = _g;
	if(tink__$Stringly_Stringly_$Impl_$.isNumber(v,true)) {
		return tink_core_Outcome.Success(parseFloat(v));
	} else {
		var v1 = _g;
		return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + v1 + " (encoded as " + this1 + ") is not a valid float",{ fileName : "Stringly.hx", lineNumber : 60, className : "tink._Stringly.Stringly_Impl_", methodName : "parseFloat"}));
	}
};
tink__$Stringly_Stringly_$Impl_$.toFloat = function(this1) {
	return tink_core_OutcomeTools.sure(tink__$Stringly_Stringly_$Impl_$.parseFloat(this1));
};
tink__$Stringly_Stringly_$Impl_$.parseInt = function(this1) {
	var _g = StringTools.trim(this1);
	var v = _g;
	if(tink__$Stringly_Stringly_$Impl_$.isNumber(v,false)) {
		return tink_core_Outcome.Success(Std.parseInt(v));
	} else {
		var v1 = _g;
		return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + v1 + " (encoded as " + this1 + ") is not a valid integer",{ fileName : "Stringly.hx", lineNumber : 71, className : "tink._Stringly.Stringly_Impl_", methodName : "parseInt"}));
	}
};
tink__$Stringly_Stringly_$Impl_$.toInt = function(this1) {
	return tink_core_OutcomeTools.sure(tink__$Stringly_Stringly_$Impl_$.parseInt(this1));
};
tink__$Stringly_Stringly_$Impl_$.ofBool = function(b) {
	if(b) {
		return "true";
	} else {
		return "false";
	}
};
tink__$Stringly_Stringly_$Impl_$.ofInt = function(i) {
	if(i == null) {
		return "null";
	} else {
		return "" + i;
	}
};
tink__$Stringly_Stringly_$Impl_$.ofFloat = function(f) {
	if(f == null) {
		return "null";
	} else {
		return "" + f;
	}
};
var tink__$Url_Url_$Impl_$ = {};
tink__$Url_Url_$Impl_$.__name__ = true;
tink__$Url_Url_$Impl_$.get_pathWithQuery = function(this1) {
	if(this1.query == null) {
		return this1.path;
	} else {
		return this1.path + "?" + this1.query;
	}
};
tink__$Url_Url_$Impl_$._new = function(parts) {
	var this1 = parts;
	return this1;
};
tink__$Url_Url_$Impl_$.resolve = function(this1,that) {
	if(that.scheme != null) {
		return that;
	} else if(that.host != null) {
		if(that.scheme != null) {
			return that;
		} else {
			var copy = Reflect.copy(that);
			copy.scheme = this1.scheme;
			return copy;
		}
	} else {
		var parts = { path : tink_url__$Path_Path_$Impl_$.join(this1.path,that.path), payload : "", scheme : this1.scheme, query : that.query, auth : this1.auth, host : this1.host, hash : that.hash};
		tink__$Url_Url_$Impl_$.makePayload(parts);
		var this2 = parts;
		return this2;
	}
};
tink__$Url_Url_$Impl_$.makePayload = function(parts) {
	var payload = "";
	if(parts.auth == null) {
		if(parts.host != null) {
			var host = parts.host;
			payload += "//" + host;
		}
	} else if(parts.host == null) {
		var auth = parts.auth;
		payload += "//" + auth + "@";
	} else {
		var auth1 = parts.auth;
		var host1 = parts.host;
		payload += "//" + auth1 + "@" + host1;
	}
	payload += parts.path;
	var _g = parts.query;
	if(_g != null) {
		var v = _g;
		payload += "?" + v;
	}
	var _g1 = parts.hash;
	if(_g1 != null) {
		var v1 = _g1;
		payload += "#" + v1;
	}
	parts.payload = payload.toString();
};
tink__$Url_Url_$Impl_$.toString = function(this1) {
	var _g = this1.scheme;
	if(_g == null) {
		return this1.payload;
	} else {
		return "" + this1.scheme + ":" + this1.payload;
	}
};
tink__$Url_Url_$Impl_$.parse = function(s) {
	if(s == null) {
		return tink__$Url_Url_$Impl_$.parse("");
	}
	s = StringTools.trim(s);
	if(StringTools.startsWith(s,"data:")) {
		var this1 = { scheme : "data", payload : HxOverrides.substr(s,5,null)};
		return this1;
	}
	var FORMAT = new EReg("^(([a-zA-Z][a-zA-Z0-9\\-+.]*):)?((//(([^@/]+)@)?([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?)$","");
	var HOST = new EReg("^(\\[(.*)\\]|([^:]*))(:(\\d*))?$","");
	FORMAT.match(s);
	var hosts;
	var _g = FORMAT.matched(7);
	if(_g == null) {
		hosts = [];
	} else {
		var v = _g;
		var _g1 = [];
		var _g11 = 0;
		var _g2 = v.split(",");
		while(_g11 < _g2.length) {
			var host = _g2[_g11];
			++_g11;
			HOST.match(host);
			var host1;
			var _g3 = HOST.matched(2);
			var _g4 = HOST.matched(3);
			if(_g3 == null) {
				var ipv4 = _g4;
				host1 = ipv4;
			} else if(_g4 == null) {
				var ipv6 = _g3;
				host1 = "[" + ipv6 + "]";
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			var port;
			var _g5 = HOST.matched(5);
			if(_g5 == null) {
				port = null;
			} else {
				var v1 = _g5;
				var _g51 = Std.parseInt(v1);
				if(_g51 == null) {
					throw new js__$Boot_HaxeError("Invalid port");
				} else {
					var p = _g51;
					port = p;
				}
			}
			_g1.push(tink_url__$Host_Host_$Impl_$._new(host1,port));
		}
		hosts = _g1;
	}
	var path = FORMAT.matched(8);
	if(hosts.length > 0 && path.charAt(0) != "/") {
		path = "/" + path;
	}
	var this2 = { scheme : FORMAT.matched(2), payload : FORMAT.matched(3), host : hosts[0], hosts : hosts, auth : FORMAT.matched(6), path : tink_url__$Path_Path_$Impl_$.ofString(path), query : FORMAT.matched(10), hash : FORMAT.matched(12)};
	return this2;
};
tink__$Url_Url_$Impl_$.make = function(parts) {
	var parts1 = { payload : "", path : parts.path, query : parts.query, host : parts.host, hosts : parts.hosts, auth : parts.auth, scheme : parts.scheme, hash : parts.hash};
	tink__$Url_Url_$Impl_$.makePayload(parts1);
	var this1 = parts1;
	return this1;
};
var tink_chunk_ByteChunk = function(data,from,to) {
	this.data = data;
	this.from = from;
	this.to = to;
};
tink_chunk_ByteChunk.__name__ = true;
tink_chunk_ByteChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink_chunk_ByteChunk.of = function(b) {
	if(b.length == 0) {
		return tink__$Chunk_Chunk_$Impl_$.EMPTY;
	}
	var ret = new tink_chunk_ByteChunk(b.b.bufferValue,0,b.length);
	ret.wrapped = b;
	return ret;
};
tink_chunk_ByteChunk.__super__ = tink_chunk_ChunkBase;
tink_chunk_ByteChunk.prototype = $extend(tink_chunk_ChunkBase.prototype,{
	get_wrapped: function() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped;
	}
	,getByte: function(index) {
		return this.data.bytes[this.from + index];
	}
	,flatten: function(into) {
		into.push(this);
	}
	,getLength: function() {
		return this.to - this.from;
	}
	,getSlice: function(from,to) {
		if(to > this.to - this.from) {
			to = this.to - this.from;
		}
		if(from < 0) {
			from = 0;
		}
		if(to <= from) {
			return null;
		} else if(to == this.to - this.from && from == 0) {
			return this;
		} else {
			return new tink_chunk_ByteChunk(this.data,this.from + from,to + this.from);
		}
	}
	,slice: function(from,to) {
		var _g = this.getSlice(from,to);
		if(_g == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		} else {
			var v = _g;
			return v;
		}
	}
	,blitTo: function(target,offset) {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		target.blit(offset,this.wrapped,this.from,this.to - this.from);
	}
	,toBytes: function() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.sub(this.from,this.to - this.from);
	}
	,toString: function() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.getString(this.from,this.to - this.from);
	}
	,__class__: tink_chunk_ByteChunk
});
var tink_chunk_ChunkCursor = function() {
	this.currentByte = -1;
	this.currentPos = 0;
	this.length = 0;
	this.curLength = 0;
	this.curOffset = 0;
	this.curPartIndex = 0;
};
tink_chunk_ChunkCursor.__name__ = true;
tink_chunk_ChunkCursor.create = function(parts) {
	var ret = new tink_chunk_ChunkCursor();
	ret.parts = parts;
	ret.reset();
	return ret;
};
tink_chunk_ChunkCursor.prototype = {
	clone: function() {
		var ret = new tink_chunk_ChunkCursor();
		ret.parts = this.parts.slice();
		ret.curPart = this.curPart;
		ret.curPartIndex = this.curPartIndex;
		ret.curOffset = this.curOffset;
		ret.curLength = this.curLength;
		ret.length = this.length;
		ret.currentPos = this.currentPos;
		ret.currentByte = this.currentByte;
		return ret;
	}
	,reset: function() {
		this.length = 0;
		this.currentPos = 0;
		this.currentByte = -1;
		this.curOffset = 0;
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			this.length += p.to - p.from;
		}
		this.curPart = this.parts[this.curPartIndex = 0];
		if(this.curPart != null) {
			var _this = this.curPart;
			this.curLength = _this.to - _this.from;
			var _this1 = this.curPart;
			this.currentByte = _this1.data.bytes[_this1.from];
		}
	}
	,flush: function() {
		var ret = this.left();
		this.shift();
		return ret;
	}
	,prune: function() {
		this.shift();
	}
	,add: function(chunk) {
		chunk.flatten(this.parts);
		this.reset();
	}
	,shift: function(chunk) {
		this.parts.splice(0,this.curPartIndex);
		var _g = this.parts[0];
		if(_g != null) {
			var chunk1 = _g;
			var _g1 = chunk1.getSlice(this.curOffset,this.curLength);
			if(_g1 == null) {
				this.parts.shift();
			} else {
				var rest = _g1;
				this.parts[0] = rest;
			}
		}
		if(chunk != null) {
			this.add(chunk);
		} else {
			this.reset();
		}
	}
	,clear: function() {
		this.parts = [];
		this.reset();
	}
	,left: function() {
		if(this.curPart == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		}
		var _g = [];
		var _g2 = 0;
		var _g1 = this.curPartIndex;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(this.parts[i]);
		}
		var left = _g;
		left.push(this.curPart.slice(0,this.curOffset));
		return tink__$Chunk_Chunk_$Impl_$.join(left);
	}
	,right: function() {
		if(this.curPart == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		}
		var _g = [];
		var _g2 = this.curPartIndex;
		var _g1 = this.parts.length;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(this.parts[i]);
		}
		var right = _g;
		if(right.length > 0) {
			right[0] = this.curPart.slice(this.curOffset,this.curLength);
		}
		return tink__$Chunk_Chunk_$Impl_$.join(right);
	}
	,seek: function(seekable,options) {
		var _gthis = this;
		if(this.curPart == null || seekable == null || seekable.length == 0) {
			return haxe_ds_Option.None;
		}
		var max = seekable.length - 1;
		var first = seekable[0];
		var candidates = [];
		var count = 0;
		var copy = this.clone();
		copy.shift();
		var part = function(b,offset) {
			var data = b.data;
			var _g1 = b.from + offset;
			var _g = b.to;
			while(_g1 < _g) {
				var i = _g1++;
				var $byte = data.bytes[i];
				if(candidates.length > 0) {
					var c = 0;
					while(c < count) {
						var pos = candidates[c];
						if(seekable[pos] == $byte) {
							if(pos == max) {
								copy.moveTo(copy.currentPos + (i - (b.from + offset) - seekable.length + 1));
								var before = copy.left();
								var delta = before.getLength() + seekable.length;
								_gthis.moveTo(_gthis.currentPos + delta);
								if(options == null) {
									_gthis.shift();
								} else if(options.withoutPruning == null) {
									_gthis.shift();
								} else if(options.withoutPruning == false) {
									_gthis.shift();
								}
								return haxe_ds_Option.Some(before);
							} else {
								candidates[c++] = pos + 1;
							}
						} else {
							count -= 1;
							var last = candidates.pop();
							if(count > c) {
								candidates[c] = last;
							}
						}
					}
				}
				if($byte == first) {
					count = candidates.push(1);
				}
			}
			copy.moveTo(copy.currentPos + (b.to - (b.from + offset)));
			return haxe_ds_Option.None;
		};
		var _g2 = part(this.curPart,this.curOffset);
		if(_g2[1] == 1) {
			var _g11 = this.curPartIndex + 1;
			var _g3 = this.parts.length;
			while(_g11 < _g3) {
				var i1 = _g11++;
				var _g21 = part(this.parts[i1],0);
				switch(_g21[1]) {
				case 0:
					var v = _g21[2];
					return haxe_ds_Option.Some(v);
				case 1:
					break;
				}
			}
			return haxe_ds_Option.None;
		} else {
			var v1 = _g2;
			return v1;
		}
	}
	,moveBy: function(delta) {
		this.moveTo(this.currentPos + delta);
	}
	,moveTo: function(position) {
		if(this.length == 0) {
			return 0;
		}
		if(position > this.length) {
			position = this.length - 1;
		}
		if(position < 0) {
			position = 0;
		}
		this.currentPos = position;
		if(position == this.length) {
			this.ffwd();
		} else {
			var _g1 = 0;
			var _g = this.parts.length;
			while(_g1 < _g) {
				var i = _g1++;
				var c = this.parts[i];
				var _g2 = c.to - c.from;
				var enough = _g2;
				if(enough > position) {
					this.curPart = c;
					this.curPartIndex = i;
					this.curOffset = position;
					this.curLength = c.to - c.from;
					this.currentByte = c.data.bytes[c.from + position];
					break;
				} else {
					var v = _g2;
					position -= v;
				}
			}
		}
		return this.currentPos;
	}
	,ffwd: function() {
		this.currentByte = -1;
		this.curLength = 0;
		this.curOffset = 0;
		this.curPart = null;
		this.curPartIndex = this.parts.length;
	}
	,next: function() {
		if(this.currentPos == this.length) {
			return false;
		}
		this.currentPos++;
		if(this.currentPos == this.length) {
			this.ffwd();
			return false;
		}
		if(this.curOffset == this.curLength - 1) {
			this.curOffset = 0;
			this.curPart = this.parts[++this.curPartIndex];
			var _this = this.curPart;
			this.curLength = _this.to - _this.from;
			var _this1 = this.curPart;
			this.currentByte = _this1.data.bytes[_this1.from];
		} else {
			var _this2 = this.curPart;
			this.currentByte = _this2.data.bytes[_this2.from + ++this.curOffset];
		}
		return true;
	}
	,__class__: tink_chunk_ChunkCursor
};
var tink_chunk_ChunkIterator = function(target) {
	this.target = target;
	this._hasNext = target.length > target.currentPos;
};
tink_chunk_ChunkIterator.__name__ = true;
tink_chunk_ChunkIterator.prototype = {
	hasNext: function() {
		return this._hasNext;
	}
	,next: function() {
		var ret = this.target.currentByte;
		this._hasNext = this.target.next();
		return ret;
	}
	,__class__: tink_chunk_ChunkIterator
};
var tink_chunk__$Seekable_Seekable_$Impl_$ = {};
tink_chunk__$Seekable_Seekable_$Impl_$.__name__ = true;
tink_chunk__$Seekable_Seekable_$Impl_$._new = function(a) {
	var this1 = a;
	return this1;
};
tink_chunk__$Seekable_Seekable_$Impl_$.get_length = function(this1) {
	return this1.length;
};
tink_chunk__$Seekable_Seekable_$Impl_$.get = function(this1,index) {
	return this1[index];
};
tink_chunk__$Seekable_Seekable_$Impl_$.ofBytes = function(b) {
	var _g = [];
	var _g2 = 0;
	var _g1 = b.length;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(b.b[i]);
	}
	var this1 = _g;
	return this1;
};
tink_chunk__$Seekable_Seekable_$Impl_$.ofString = function(s) {
	return tink_chunk__$Seekable_Seekable_$Impl_$.ofBytes(haxe_io_Bytes.ofString(s));
};
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
tink_core_Annex.__name__ = true;
tink_core_Annex.prototype = {
	__class__: tink_core_Annex
};
var tink_core__$Any_Any_$Impl_$ = {};
tink_core__$Any_Any_$Impl_$.__name__ = true;
tink_core__$Any_Any_$Impl_$.__promote = function(this1) {
	return this1;
};
var tink_core__$Callback_Callback_$Impl_$ = {};
tink_core__$Callback_Callback_$Impl_$.__name__ = true;
tink_core__$Callback_Callback_$Impl_$._new = function(f) {
	var this1 = f;
	return this1;
};
tink_core__$Callback_Callback_$Impl_$.toFunction = function(this1) {
	return this1;
};
tink_core__$Callback_Callback_$Impl_$.invoke = function(this1,data) {
	this1(data);
};
tink_core__$Callback_Callback_$Impl_$.ignore = function(cb) {
	return tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		cb(tink_core_Noise.Noise);
	});
};
tink_core__$Callback_Callback_$Impl_$.fromNiladic = function(f) {
	var this1 = function(r) {
		f();
	};
	return this1;
};
tink_core__$Callback_Callback_$Impl_$.fromMany = function(callbacks) {
	return function(v) {
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			callback(v);
		}
	};
};
tink_core__$Callback_Callback_$Impl_$.defer = function(f) {
	process.nextTick(f);
};
var tink_core__$Callback_LinkObject = function() { };
tink_core__$Callback_LinkObject.__name__ = true;
tink_core__$Callback_LinkObject.prototype = {
	__class__: tink_core__$Callback_LinkObject
};
var tink_core__$Callback_CallbackLink_$Impl_$ = {};
tink_core__$Callback_CallbackLink_$Impl_$.__name__ = true;
tink_core__$Callback_CallbackLink_$Impl_$._new = function(link) {
	var this1 = new tink_core__$Callback_SimpleLink(link);
	return this1;
};
tink_core__$Callback_CallbackLink_$Impl_$.dissolve = function(this1) {
	if(this1 != null) {
		this1.dissolve();
	}
};
tink_core__$Callback_CallbackLink_$Impl_$.toCallback = function(this1) {
	return function(_) {
		this1.dissolve();
	};
};
tink_core__$Callback_CallbackLink_$Impl_$.fromFunction = function(f) {
	var this1 = new tink_core__$Callback_SimpleLink(f);
	return this1;
};
tink_core__$Callback_CallbackLink_$Impl_$.join = function(a,b) {
	return new tink_core__$Callback_LinkPair(a,b);
};
tink_core__$Callback_CallbackLink_$Impl_$.fromMany = function(callbacks) {
	var this1 = new tink_core__$Callback_SimpleLink(function() {
		var _g = 0;
		while(_g < callbacks.length) {
			var cb = callbacks[_g];
			++_g;
			if(cb != null) {
				cb.dissolve();
			}
		}
	});
	return this1;
};
var tink_core__$Callback_SimpleLink = function(f) {
	this.f = f;
};
tink_core__$Callback_SimpleLink.__name__ = true;
tink_core__$Callback_SimpleLink.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_SimpleLink.prototype = {
	dissolve: function() {
		if(this.f != null) {
			this.f();
		}
	}
	,__class__: tink_core__$Callback_SimpleLink
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
tink_core__$Callback_LinkPair.__name__ = true;
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_LinkPair.prototype = {
	dissolve: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.dissolve();
			}
			var this2 = this.b;
			if(this2 != null) {
				this2.dissolve();
			}
		}
	}
	,__class__: tink_core__$Callback_LinkPair
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw new js__$Boot_HaxeError("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = true;
tink_core__$Callback_ListCell.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	invoke: function(data) {
		if(this.cb != null) {
			this.cb(data);
		}
	}
	,clear: function() {
		this.list = null;
		this.cb = null;
	}
	,dissolve: function() {
		var _g = this.list;
		if(_g != null) {
			var v = _g;
			this.clear();
			HxOverrides.remove(v,this);
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core__$Callback_CallbackList_$Impl_$ = {};
tink_core__$Callback_CallbackList_$Impl_$.__name__ = true;
tink_core__$Callback_CallbackList_$Impl_$._new = function() {
	var this1 = [];
	return this1;
};
tink_core__$Callback_CallbackList_$Impl_$.get_length = function(this1) {
	return this1.length;
};
tink_core__$Callback_CallbackList_$Impl_$.add = function(this1,cb) {
	var node = new tink_core__$Callback_ListCell(cb,this1);
	this1.push(node);
	return node;
};
tink_core__$Callback_CallbackList_$Impl_$.invoke = function(this1,data) {
	var _g = 0;
	var _g1 = this1.slice();
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		if(cell.cb != null) {
			cell.cb(data);
		}
	}
};
tink_core__$Callback_CallbackList_$Impl_$.clear = function(this1) {
	var _g = 0;
	var _g1 = this1.splice(0,this1.length);
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		cell.clear();
	}
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = true;
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( $e0 ) {
		if ($e0 instanceof js__$Boot_HaxeError) $e0 = $e0.val;
		if( js_Boot.__instanceof($e0,tink_core_TypedError) ) {
			var e = $e0;
			return tink_core_Outcome.Failure(e);
		} else {
		var e1 = $e0;
		return tink_core_Outcome.Failure(report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e1,pos) : report(e1));
		}
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw js__$Boot_HaxeError.wrap(any);
};
tink_core_TypedError.prototype = {
	printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,throwSelf: function() {
		throw new js__$Boot_HaxeError(this);
	}
	,__class__: tink_core_TypedError
};
var tink_core__$Error_Stack_$Impl_$ = {};
tink_core__$Error_Stack_$Impl_$.__name__ = true;
tink_core__$Error_Stack_$Impl_$.toString = function(this1) {
	return haxe_CallStack.toString(this1);
};
var tink_core__$Future_Future_$Impl_$ = {};
tink_core__$Future_Future_$Impl_$.__name__ = true;
tink_core__$Future_Future_$Impl_$._new = function(f) {
	var this1 = new tink_core__$Future_SimpleFuture(f);
	return this1;
};
tink_core__$Future_Future_$Impl_$.handle = function(this1,callback) {
	return this1.handle(callback);
};
tink_core__$Future_Future_$Impl_$.eager = function(this1) {
	return this1.eager();
};
tink_core__$Future_Future_$Impl_$.gather = function(this1) {
	return this1.gather();
};
tink_core__$Future_Future_$Impl_$.first = function(this1,other) {
	var ret = new tink_core_FutureTrigger();
	var l1 = this1.handle($bind(ret,ret.trigger));
	var l2 = other.handle($bind(ret,ret.trigger));
	var ret1 = ret;
	if(l1 != null) {
		var this2 = l1;
		ret1.handle(function(_) {
			this2.dissolve();
		});
	}
	if(l2 != null) {
		var this3 = l2;
		ret1.handle(function(_1) {
			this3.dissolve();
		});
	}
	return ret1;
};
tink_core__$Future_Future_$Impl_$.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.map(f);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.flatMap = function(this1,next,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(next);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.next = function(this1,n) {
	return this1.flatMap(function(v) {
		return n(v);
	});
};
tink_core__$Future_Future_$Impl_$.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(function(t) {
		var ret1 = other.map(function(a) {
			return merger(t,a);
		});
		return ret1;
	});
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.flatten = function(f) {
	return new tink_core__$Future_NestedFuture(f);
};
tink_core__$Future_Future_$Impl_$.ofJsPromise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		promise.then(function(a) {
			cb(tink_core_Outcome.Success(a));
		})["catch"](function(e) {
			var tmp = tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "Future.hx", lineNumber : 58, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"}));
			cb(tmp);
		});
	});
};
tink_core__$Future_Future_$Impl_$.asPromise = function(s) {
	return s;
};
tink_core__$Future_Future_$Impl_$.ofMany = function(futures,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst([]));
	var _g = 0;
	while(_g < futures.length) {
		var f = [futures[_g]];
		++_g;
		var ret1 = ret.flatMap((function(f1) {
			return function(results) {
				var ret2 = (function() {
					return function(result) {
						return results.concat([result]);
					};
				})();
				var ret3 = f1[0].map(ret2);
				return ret3;
			};
		})(f));
		ret = ret1;
	}
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.fromMany = function(futures) {
	return tink_core__$Future_Future_$Impl_$.ofMany(futures);
};
tink_core__$Future_Future_$Impl_$.lazy = function(l) {
	return new tink_core__$Future_SyncFuture(l);
};
tink_core__$Future_Future_$Impl_$.sync = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core__$Future_Future_$Impl_$.async = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(lazy) {
		var f1 = f;
		return tink_core__$Future_Future_$Impl_$.flatten(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyFunc(function() {
			return tink_core__$Future_Future_$Impl_$.async(f1,false);
		})));
	} else {
		var op = new tink_core_FutureTrigger();
		f($bind(op,op.trigger));
		return op;
	}
};
tink_core__$Future_Future_$Impl_$.or = function(a,b) {
	return tink_core__$Future_Future_$Impl_$.first(a,b);
};
tink_core__$Future_Future_$Impl_$.either = function(a,b) {
	var ret = a.map(haxe_ds_Either.Left);
	var ret1 = b.map(haxe_ds_Either.Right);
	return tink_core__$Future_Future_$Impl_$.first(ret,ret1);
};
tink_core__$Future_Future_$Impl_$.and = function(a,b) {
	return tink_core__$Future_Future_$Impl_$.merge(a,b,function(a1,b1) {
		var this1 = new tink_core_MPair(a1,b1);
		return this1;
	});
};
tink_core__$Future_Future_$Impl_$._tryFailingFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o[1]) {
		case 0:
			var d = o[2];
			return map(d);
		case 1:
			var f1 = o[2];
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._tryFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o[1]) {
		case 0:
			var d = o[2];
			var ret1 = map(d).map(tink_core_Outcome.Success);
			return ret1.gather();
		case 1:
			var f1 = o[2];
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._tryFailingMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper_$Impl_$.withSameError(map));
	});
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._tryMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.map(o,map);
	});
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._flatMap = function(f,map) {
	var ret = f.flatMap(map);
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._map = function(f,map) {
	var ret = f.map(map);
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$.trigger = function() {
	return new tink_core_FutureTrigger();
};
var tink_core__$Future_FutureObject = function() { };
tink_core__$Future_FutureObject.__name__ = true;
tink_core__$Future_FutureObject.prototype = {
	__class__: tink_core__$Future_FutureObject
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
tink_core__$Future_SyncFuture.__name__ = true;
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	map: function(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	,flatMap: function(f) {
		var l = this.value.map(f);
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return l.get().handle(cb);
		});
	}
	,handle: function(cb) {
		cb(this.value.get());
		return null;
	}
	,eager: function() {
		return this;
	}
	,gather: function() {
		return this;
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core__$Future_SimpleFuture = function(f) {
	this.f = f;
};
tink_core__$Future_SimpleFuture.__name__ = true;
tink_core__$Future_SimpleFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SimpleFuture.prototype = {
	handle: function(callback) {
		return this.f(callback);
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var data = f(v);
				cb(data);
			});
		});
	}
	,flatMap: function(f) {
		var f1 = f;
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.flatten(new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var data = f1(v);
				cb(data);
			});
		}));
	}
	,gather: function() {
		return tink_core_FutureTrigger.gatherFuture(this);
	}
	,eager: function() {
		var ret = tink_core_FutureTrigger.gatherFuture(this);
		ret.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		}));
		return ret;
	}
	,__class__: tink_core__$Future_SimpleFuture
};
var tink_core__$Future_NestedFuture = function(outer) {
	this.outer = outer;
};
tink_core__$Future_NestedFuture.__name__ = true;
tink_core__$Future_NestedFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_NestedFuture.prototype = {
	map: function(f) {
		var ret = this.outer.flatMap(function(inner) {
			var ret1 = inner.map(f);
			return ret1.gather();
		});
		return ret.gather();
	}
	,flatMap: function(f) {
		var ret = this.outer.flatMap(function(inner) {
			var ret1 = inner.flatMap(f);
			return ret1.gather();
		});
		return ret.gather();
	}
	,gather: function() {
		return tink_core_FutureTrigger.gatherFuture(this);
	}
	,eager: function() {
		var ret = tink_core_FutureTrigger.gatherFuture(this);
		ret.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		}));
		return ret;
	}
	,handle: function(cb) {
		var ret = null;
		ret = this.outer.handle(function(inner) {
			ret = inner.handle(function(result) {
				cb(result);
			});
		});
		return ret;
	}
	,__class__: tink_core__$Future_NestedFuture
};
var tink_core_FutureTrigger = function() {
	var this1 = [];
	this.list = this1;
};
tink_core_FutureTrigger.__name__ = true;
tink_core_FutureTrigger.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core_FutureTrigger.gatherFuture = function(f) {
	var op = null;
	var this1 = new tink_core__$Future_SimpleFuture(function(cb) {
		if(op == null) {
			op = new tink_core_FutureTrigger();
			f.handle($bind(op,op.trigger));
			f = null;
		}
		return op.handle(cb);
	});
	return this1;
};
tink_core_FutureTrigger.prototype = {
	handle: function(callback) {
		var _g = this.list;
		if(_g == null) {
			callback(this.result);
			return null;
		} else {
			var v = _g;
			return tink_core__$Callback_CallbackList_$Impl_$.add(v,callback);
		}
	}
	,map: function(f) {
		var _g = this.list;
		if(_g == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v1) {
				var tmp = f(v1);
				ret.trigger(tmp);
			});
			return ret;
		}
	}
	,flatMap: function(f) {
		var _g = this.list;
		if(_g == null) {
			return f(this.result);
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v1) {
				f(v1).handle($bind(ret,ret.trigger));
			});
			return ret;
		}
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		return this;
	}
	,asFuture: function() {
		return this;
	}
	,trigger: function(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			if(tink_core_FutureTrigger.depth >= 1000) {
				tink_core__$Callback_Callback_$Impl_$.defer(function() {
					tink_core_FutureTrigger.depth++;
					tink_core__$Callback_CallbackList_$Impl_$.invoke(list,result);
					tink_core__$Callback_CallbackList_$Impl_$.clear(list);
					tink_core_FutureTrigger.depth--;
				});
			} else {
				tink_core_FutureTrigger.depth++;
				tink_core__$Callback_CallbackList_$Impl_$.invoke(list,result);
				tink_core__$Callback_CallbackList_$Impl_$.clear(list);
				tink_core_FutureTrigger.depth--;
			}
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core_JsPromiseTools = function() { };
tink_core_JsPromiseTools.__name__ = true;
tink_core_JsPromiseTools.toSurprise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
};
tink_core_JsPromiseTools.toPromise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
};
var tink_core__$Lazy_Lazy_$Impl_$ = {};
tink_core__$Lazy_Lazy_$Impl_$.__name__ = true;
tink_core__$Lazy_Lazy_$Impl_$.get = function(this1) {
	return this1.get();
};
tink_core__$Lazy_Lazy_$Impl_$.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core__$Lazy_Lazy_$Impl_$.map = function(this1,f) {
	return this1.map(f);
};
tink_core__$Lazy_Lazy_$Impl_$.flatMap = function(this1,f) {
	return this1.flatMap(f);
};
tink_core__$Lazy_Lazy_$Impl_$.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core__$Lazy_LazyObject = function() { };
tink_core__$Lazy_LazyObject.__name__ = true;
tink_core__$Lazy_LazyObject.prototype = {
	__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = true;
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	get: function() {
		return this.value;
	}
	,map: function(f) {
		return new tink_core__$Lazy_LazyConst(f(this.value));
	}
	,flatMap: function(f) {
		return f(this.value);
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Lazy_LazyFunc = function(f) {
	this.f = f;
};
tink_core__$Lazy_LazyFunc.__name__ = true;
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	get: function() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var tmp = _gthis.get();
			return f(tmp);
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var this1 = _gthis.get();
			return f(this1).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
tink_core_NamedWith.__name__ = true;
tink_core_NamedWith.prototype = {
	__class__: tink_core_NamedWith
};
var tink_core_Noise = { __ename__ : true, __constructs__ : ["Noise"] };
tink_core_Noise.Noise = ["Noise",0];
tink_core_Noise.Noise.toString = $estr;
tink_core_Noise.Noise.__enum__ = tink_core_Noise;
var tink_core_OptionTools = function() { };
tink_core_OptionTools.__name__ = true;
tink_core_OptionTools.force = function(o,pos) {
	if(o[1] == 0) {
		var v = o[2];
		return v;
	} else {
		throw new js__$Boot_HaxeError(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.or = function(o,l) {
	if(o[1] == 0) {
		var v = o[2];
		return v;
	} else {
		return l.get();
	}
};
tink_core_OptionTools.filter = function(o,f) {
	if(o[1] == 0) {
		var _hx_tmp = f(o[2]);
		if(_hx_tmp == false) {
			return haxe_ds_Option.None;
		} else {
			return o;
		}
	} else {
		return o;
	}
};
tink_core_OptionTools.satisfies = function(o,f) {
	if(o[1] == 0) {
		var v = o[2];
		return f(v);
	} else {
		return false;
	}
};
tink_core_OptionTools.equals = function(o,v) {
	if(o[1] == 0) {
		var v1 = o[2];
		return v1 == v;
	} else {
		return false;
	}
};
tink_core_OptionTools.map = function(o,f) {
	if(o[1] == 0) {
		var v = o[2];
		return haxe_ds_Option.Some(f(v));
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.flatMap = function(o,f) {
	if(o[1] == 0) {
		var v = o[2];
		return f(v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.iterator = function(o) {
	return new tink_core_OptionIter(o);
};
tink_core_OptionTools.toArray = function(o) {
	if(o[1] == 0) {
		var v = o[2];
		return [v];
	} else {
		return [];
	}
};
var tink_core_OptionIter = function(o) {
	this.alive = true;
	if(o[1] == 0) {
		var v = o[2];
		this.value = v;
	} else {
		this.alive = false;
	}
};
tink_core_OptionIter.__name__ = true;
tink_core_OptionIter.prototype = {
	hasNext: function() {
		return this.alive;
	}
	,next: function() {
		this.alive = false;
		return this.value;
	}
	,__class__: tink_core_OptionIter
};
var tink_core_Outcome = { __ename__ : true, __constructs__ : ["Success","Failure"] };
tink_core_Outcome.Success = function(data) { var $x = ["Success",0,data]; $x.__enum__ = tink_core_Outcome; $x.toString = $estr; return $x; };
tink_core_Outcome.Failure = function(failure) { var $x = ["Failure",1,failure]; $x.__enum__ = tink_core_Outcome; $x.toString = $estr; return $x; };
var tink_core_OutcomeTools = function() { };
tink_core_OutcomeTools.__name__ = true;
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome[1]) {
	case 0:
		var data = outcome[2];
		return data;
	case 1:
		var failure = outcome[2];
		if(js_Boot.__instanceof(failure,tink_core_TypedError)) {
			return failure.throwSelf();
		} else {
			throw new js__$Boot_HaxeError(failure);
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome[1]) {
	case 0:
		var data = outcome[2];
		return haxe_ds_Option.Some(data);
	case 1:
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.toOutcome = function(option,pos) {
	switch(option[1]) {
	case 0:
		var value = option[2];
		return tink_core_Outcome.Success(value);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "Outcome.hx", lineNumber : 37, className : "tink.core.OutcomeTools", methodName : "toOutcome"}));
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome[1]) {
	case 0:
		var data = outcome[2];
		return data;
	case 1:
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	switch(outcome[1]) {
	case 0:
		var data = outcome[2];
		return data;
	case 1:
		return fallback.get();
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome[1]) {
	case 0:
		return outcome;
	case 1:
		return fallback.get();
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome[1]) {
	case 0:
		var data = outcome[2];
		return data == to;
	case 1:
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome[1]) {
	case 0:
		var a = outcome[2];
		return tink_core_Outcome.Success(transform(a));
	case 1:
		var f = outcome[2];
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome[1] == 0) {
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$.apply(mapper,o);
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return tink_core_Outcome.Failure(report(e));
	}
};
var tink_core__$Outcome_OutcomeMapper_$Impl_$ = {};
tink_core__$Outcome_OutcomeMapper_$Impl_$.__name__ = true;
tink_core__$Outcome_OutcomeMapper_$Impl_$._new = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
		switch(o[1]) {
		case 0:
			var d = o[2];
			return f(d);
		case 1:
			var f1 = o[2];
			return tink_core_Outcome.Failure(f1);
		}
	});
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
		switch(o[1]) {
		case 0:
			var d = o[2];
			var _g = f(d);
			switch(_g[1]) {
			case 0:
				var d1 = _g[2];
				return tink_core_Outcome.Success(d1);
			case 1:
				var f1 = _g[2];
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
			}
			break;
		case 1:
			var f2 = o[2];
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(f2));
		}
	});
};
var tink_core__$Pair_Pair_$Impl_$ = {};
tink_core__$Pair_Pair_$Impl_$.__name__ = true;
tink_core__$Pair_Pair_$Impl_$._new = function(a,b) {
	var this1 = new tink_core_MPair(a,b);
	return this1;
};
tink_core__$Pair_Pair_$Impl_$.get_a = function(this1) {
	return this1.a;
};
tink_core__$Pair_Pair_$Impl_$.get_b = function(this1) {
	return this1.b;
};
tink_core__$Pair_Pair_$Impl_$.toBool = function(this1) {
	return this1 != null;
};
tink_core__$Pair_Pair_$Impl_$.isNil = function(this1) {
	return this1 == null;
};
tink_core__$Pair_Pair_$Impl_$.nil = function() {
	return null;
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
tink_core_MPair.__name__ = true;
tink_core_MPair.prototype = {
	__class__: tink_core_MPair
};
var tink_core__$Promise_Promise_$Impl_$ = {};
tink_core__$Promise_Promise_$Impl_$.__name__ = true;
tink_core__$Promise_Promise_$Impl_$.map = function(this1,f) {
	var ret = this1.map(f);
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.flatMap = function(this1,f) {
	var ret = this1.flatMap(f);
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.tryRecover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o[1]) {
		case 0:
			var d = o[2];
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
		case 1:
			var e = o[2];
			return f(e);
		}
	});
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.recover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o[1]) {
		case 0:
			var d = o[2];
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
		case 1:
			var e = o[2];
			return f(e);
		}
	});
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.handle = function(this1,cb) {
	return this1.handle(cb);
};
tink_core__$Promise_Promise_$Impl_$.noise = function(this1) {
	return tink_core__$Promise_Promise_$Impl_$.next(this1,function(v) {
		return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(tink_core_Noise.Noise));
	});
};
tink_core__$Promise_Promise_$Impl_$.next = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(function(o) {
		switch(o[1]) {
		case 0:
			var d = o[2];
			return f(d);
		case 1:
			var f1 = o[2];
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Promise_Promise_$Impl_$.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	return tink_core__$Promise_Promise_$Impl_$.next(this1,function(t) {
		return tink_core__$Promise_Promise_$Impl_$.next(other,function(a) {
			return merger(t,a);
		},false);
	},gather);
};
tink_core__$Promise_Promise_$Impl_$.and = function(a,b) {
	return tink_core__$Promise_Promise_$Impl_$.merge(a,b,function(a1,b1) {
		var this1 = new tink_core_MPair(a1,b1);
		return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(this1));
	});
};
tink_core__$Promise_Promise_$Impl_$.ofSpecific = function(s) {
	return s;
};
tink_core__$Promise_Promise_$Impl_$.ofFuture = function(f) {
	var ret = f.map(tink_core_Outcome.Success);
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
tink_core__$Promise_Promise_$Impl_$.ofError = function(e) {
	return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Failure(e));
};
tink_core__$Promise_Promise_$Impl_$.ofData = function(d) {
	return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(d));
};
tink_core__$Promise_Promise_$Impl_$.inParallel = function(a,lazy) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		var result = [];
		var pending = a.length;
		var links = null;
		var sync = false;
		var done = function(o) {
			if(links == null) {
				sync = true;
			} else if(links != null) {
				links.dissolve();
			}
			cb(o);
		};
		var fail = function(e) {
			done(tink_core_Outcome.Failure(e));
		};
		var set = function(index,value) {
			result[index] = value;
			if((pending -= 1) == 0) {
				done(tink_core_Outcome.Success(result));
			}
		};
		var linkArray = [];
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = [_g1++];
			if(sync) {
				break;
			}
			var i1 = i[0];
			var tmp = (function(i2) {
				return function(o1) {
					switch(o1[1]) {
					case 0:
						var v = o1[2];
						set(i2[0],v);
						break;
					case 1:
						var e1 = o1[2];
						fail(e1);
						break;
					}
				};
			})(i);
			linkArray.push(a[i1].handle(tmp));
		}
		links = tink_core__$Callback_CallbackLink_$Impl_$.fromMany(linkArray);
		if(sync) {
			if(links != null) {
				links.dissolve();
			}
		}
	},lazy);
};
tink_core__$Promise_Promise_$Impl_$.inSequence = function(a) {
	var loop = null;
	loop = function(index) {
		if(index == a.length) {
			return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success([]));
		} else {
			return tink_core__$Promise_Promise_$Impl_$.next(a[index],function(head) {
				return tink_core__$Promise_Promise_$Impl_$.next(loop(index + 1),function(tail) {
					return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success([head].concat(tail)));
				});
			});
		}
	};
	var loop1 = loop;
	return loop1(0);
};
tink_core__$Promise_Promise_$Impl_$.lift = function(p) {
	return p;
};
var tink_core__$Promise_Next_$Impl_$ = {};
tink_core__$Promise_Next_$Impl_$.__name__ = true;
tink_core__$Promise_Next_$Impl_$.ofSafe = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
	};
};
tink_core__$Promise_Next_$Impl_$.ofSync = function(f) {
	return function(x) {
		var ret = f(x).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core__$Promise_Next_$Impl_$.ofSafeSync = function(f) {
	return function(x) {
		return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(f(x)));
	};
};
tink_core__$Promise_Next_$Impl_$._chain = function(a,b) {
	return function(v) {
		return tink_core__$Promise_Promise_$Impl_$.next(a(v),b);
	};
};
var tink_core__$Promise_Recover_$Impl_$ = {};
tink_core__$Promise_Recover_$Impl_$.__name__ = true;
tink_core__$Promise_Recover_$Impl_$.ofSync = function(f) {
	return function(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
	};
};
var tink_core__$Promise_Combiner_$Impl_$ = {};
tink_core__$Promise_Combiner_$Impl_$.__name__ = true;
tink_core__$Promise_Combiner_$Impl_$.ofSafe = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
	};
};
tink_core__$Promise_Combiner_$Impl_$.ofSync = function(f) {
	return function(x1,x2) {
		var ret = f(x1,x2).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core__$Promise_Combiner_$Impl_$.ofSafeSync = function(f) {
	return function(x1,x2) {
		return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(f(x1,x2)));
	};
};
var tink_core__$Ref_Ref_$Impl_$ = {};
tink_core__$Ref_Ref_$Impl_$.__name__ = true;
tink_core__$Ref_Ref_$Impl_$._new = function() {
	var this1;
	var this2 = new Array(1);
	this1 = this2;
	return this1;
};
tink_core__$Ref_Ref_$Impl_$.get_value = function(this1) {
	return this1[0];
};
tink_core__$Ref_Ref_$Impl_$.set_value = function(this1,param) {
	return this1[0] = param;
};
tink_core__$Ref_Ref_$Impl_$.toString = function(this1) {
	return "@[" + Std.string(this1[0]) + "]";
};
tink_core__$Ref_Ref_$Impl_$.to = function(v) {
	var this1;
	var this2 = new Array(1);
	this1 = this2;
	var ret = this1;
	ret[0] = v;
	return ret;
};
var tink_core__$Signal_Signal_$Impl_$ = {};
tink_core__$Signal_Signal_$Impl_$.__name__ = true;
tink_core__$Signal_Signal_$Impl_$._new = function(f) {
	var this1 = new tink_core__$Signal_SimpleSignal(f);
	return this1;
};
tink_core__$Signal_Signal_$Impl_$.handle = function(this1,handler) {
	return this1.handle(handler);
};
tink_core__$Signal_Signal_$Impl_$.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			var data = f(result);
			cb(data);
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.flatMap = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			f(result).handle(cb);
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.filter = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			if(f(result)) {
				cb(result);
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.join = function(this1,other,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return new tink_core__$Callback_LinkPair(this1.handle(cb),other.handle(cb));
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.next = function(this1) {
	var ret = new tink_core_FutureTrigger();
	var link = null;
	var immediate = false;
	link = this1.handle(function(v) {
		ret.trigger(v);
		if(link == null) {
			immediate = true;
		} else if(link != null) {
			link.dissolve();
		}
	});
	if(immediate) {
		if(link != null) {
			link.dissolve();
		}
	}
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.noise = function(this1) {
	return tink_core__$Signal_Signal_$Impl_$.map(this1,function(_) {
		return tink_core_Noise.Noise;
	});
};
tink_core__$Signal_Signal_$Impl_$.gather = function(this1) {
	var ret = tink_core__$Signal_Signal_$Impl_$.trigger();
	this1.handle(function(x) {
		tink_core__$Callback_CallbackList_$Impl_$.invoke(ret.handlers,x);
	});
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.trigger = function() {
	return new tink_core_SignalTrigger();
};
tink_core__$Signal_Signal_$Impl_$.ofClassical = function(add,remove,gather) {
	if(gather == null) {
		gather = true;
	}
	var this1 = new tink_core__$Signal_SimpleSignal(function(cb) {
		var f = function(a) {
			cb(a);
		};
		add(f);
		var this2;
		var f1 = remove;
		var a1 = f;
		this2 = new tink_core__$Callback_SimpleLink(function() {
			f1(a1);
		});
		return this2;
	});
	var ret = this1;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
var tink_core_SignalObject = function() { };
tink_core_SignalObject.__name__ = true;
tink_core_SignalObject.prototype = {
	__class__: tink_core_SignalObject
};
var tink_core__$Signal_SimpleSignal = function(f) {
	this.f = f;
};
tink_core__$Signal_SimpleSignal.__name__ = true;
tink_core__$Signal_SimpleSignal.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_SimpleSignal.prototype = {
	handle: function(cb) {
		return this.f(cb);
	}
	,__class__: tink_core__$Signal_SimpleSignal
};
var tink_core_SignalTrigger = function() {
	var this1 = [];
	this.handlers = this1;
};
tink_core_SignalTrigger.__name__ = true;
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
tink_core_SignalTrigger.prototype = {
	trigger: function(event) {
		tink_core__$Callback_CallbackList_$Impl_$.invoke(this.handlers,event);
	}
	,getLength: function() {
		return this.handlers.length;
	}
	,handle: function(cb) {
		return tink_core__$Callback_CallbackList_$Impl_$.add(this.handlers,cb);
	}
	,clear: function() {
		tink_core__$Callback_CallbackList_$Impl_$.clear(this.handlers);
	}
	,asSignal: function() {
		return this;
	}
	,__class__: tink_core_SignalTrigger
};
var tink_http__$Header_ReadonlyMap_$Impl_$ = {};
tink_http__$Header_ReadonlyMap_$Impl_$.__name__ = true;
tink_http__$Header_ReadonlyMap_$Impl_$.get = function(this1,key) {
	return this1.get(key);
};
tink_http__$Header_ReadonlyMap_$Impl_$.exists = function(this1,key) {
	return this1.exists(key);
};
tink_http__$Header_ReadonlyMap_$Impl_$.iterator = function(this1) {
	return this1.iterator();
};
tink_http__$Header_ReadonlyMap_$Impl_$.keys = function(this1) {
	return this1.keys();
};
var tink_http_ContentType = function() {
	this.subtype = "*";
	this.type = "*";
	this.extensions = new haxe_ds_StringMap();
};
tink_http_ContentType.__name__ = true;
tink_http_ContentType.ofString = function(s) {
	var ret = new tink_http_ContentType();
	ret.raw = s;
	var parsed = tink_http__$Header_HeaderValue_$Impl_$.parse(s);
	var value = parsed[0].value;
	var _g = value.indexOf("/");
	if(_g == -1) {
		ret.type = value;
	} else {
		var pos = _g;
		ret.type = value.substring(0,pos);
		ret.subtype = value.substring(pos + 1);
	}
	ret.extensions = parsed[0].extensions;
	return ret;
};
tink_http_ContentType.prototype = {
	get_fullType: function() {
		return "" + this.type + "/" + this.subtype;
	}
	,toString: function() {
		return this.raw;
	}
	,__class__: tink_http_ContentType
};
var tink_http_Header = function(fields) {
	var tmp;
	if(fields == null) {
		tmp = [];
	} else {
		var v = fields;
		tmp = v;
	}
	this.fields = tmp;
};
tink_http_Header.__name__ = true;
tink_http_Header.prototype = {
	get: function(name) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.fields;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			if(f.name == name) {
				_g.push(f.value);
			}
		}
		return _g;
	}
	,byName: function(name) {
		var _g = this.get(name);
		switch(_g.length) {
		case 0:
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"No " + name + " header found",{ fileName : "Header.hx", lineNumber : 79, className : "tink.http.Header", methodName : "byName"}));
		case 1:
			var v = _g[0];
			return tink_core_Outcome.Success(v);
		default:
			var v1 = _g;
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Multiple entries for " + name + " header",{ fileName : "Header.hx", lineNumber : 83, className : "tink.http.Header", methodName : "byName"}));
		}
	}
	,contentType: function() {
		return tink_core_OutcomeTools.map(this.byName("content-type"),tink_http_ContentType.ofString);
	}
	,iterator: function() {
		return HxOverrides.iter(this.fields);
	}
	,get_LINEBREAK: function() {
		return "\r\n";
	}
	,toString: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.fields;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.push(f.toString());
		}
		return _g.join("\r\n") + "\r\n" + "\r\n";
	}
	,__class__: tink_http_Header
};
var tink_http__$Header_HeaderValue_$Impl_$ = {};
tink_http__$Header_HeaderValue_$Impl_$.__name__ = true;
tink_http__$Header_HeaderValue_$Impl_$.getExtension = function(this1) {
	return tink_http__$Header_HeaderValue_$Impl_$.parse(this1)[0].extensions;
};
tink_http__$Header_HeaderValue_$Impl_$.parse = function(this1) {
	return tink_http__$Header_HeaderValue_$Impl_$.parseWith(this1,function(_,params) {
		var _g = new haxe_ds_StringMap();
		var p = params;
		while(p.hasNext()) {
			var p1 = p.next();
			var key = p1.name;
			var value;
			var _g1 = tink_url__$Portion_Portion_$Impl_$.toString(p1.value);
			var quoted = _g1;
			if(HxOverrides.cca(quoted,0) == 34) {
				value = HxOverrides.substr(quoted,1,quoted.length - 2);
			} else {
				var v = _g1;
				value = v;
			}
			if(__map_reserved[key] != null) {
				_g.setReserved(key,value);
			} else {
				_g.h[key] = value;
			}
		}
		return _g;
	});
};
tink_http__$Header_HeaderValue_$Impl_$.parseWith = function(this1,parseExtension) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.split(",");
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		v = StringTools.trim(v);
		var i;
		var _g3 = v.indexOf(";");
		if(_g3 == -1) {
			i = v.length;
		} else {
			var i1 = _g3;
			i = i1;
		}
		var value = HxOverrides.substr(v,0,i);
		_g.push({ value : value, extensions : parseExtension(value,new tink_url__$Query_QueryStringParser(v,";","=",i + 1))});
	}
	return _g;
};
tink_http__$Header_HeaderValue_$Impl_$.ofDate = function(d) {
	return DateTools.format(d,tink_http__$Header_HeaderValue_$Impl_$.DAYS[d.getDay()] + ", %d " + tink_http__$Header_HeaderValue_$Impl_$.MONTHS[d.getMonth()] + " %Y %H:%M:%S GMT");
};
tink_http__$Header_HeaderValue_$Impl_$.ofInt = function(i) {
	if(i == null) {
		return "null";
	} else {
		return "" + i;
	}
};
var tink_http__$Header_HeaderName_$Impl_$ = {};
tink_http__$Header_HeaderName_$Impl_$.__name__ = true;
tink_http__$Header_HeaderName_$Impl_$._new = function(s) {
	var this1 = s;
	return this1;
};
tink_http__$Header_HeaderName_$Impl_$.ofString = function(s) {
	var this1 = s.toLowerCase();
	return this1;
};
var tink_http_HeaderField = function(name,value) {
	tink_core_NamedWith.call(this,name,value);
};
tink_http_HeaderField.__name__ = true;
tink_http_HeaderField.ofString = function(s) {
	var _g = s.indexOf(":");
	if(_g == -1) {
		return new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString(s),null);
	} else {
		var v = _g;
		return new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString(HxOverrides.substr(s,0,v)),StringTools.trim(HxOverrides.substr(s,v + 1,null)));
	}
};
tink_http_HeaderField.setCookie = function(key,value,options) {
	if(options == null) {
		options = { };
	}
	var buf_b = "";
	buf_b += Std.string(encodeURIComponent(key) + "=" + encodeURIComponent(value));
	if(options.expires != null) {
		var value1 = tink_http__$Header_HeaderValue_$Impl_$.ofDate(options.expires);
		if(value1 != null) {
			buf_b += "; ";
			buf_b += "expires=";
			buf_b += Std.string(value1);
		}
	}
	var value2 = options.domain;
	if(value2 != null) {
		buf_b += "; ";
		buf_b += "domain=";
		buf_b += Std.string(value2);
	}
	var value3 = options.path;
	if(value3 != null) {
		buf_b += "; ";
		buf_b += "path=";
		buf_b += Std.string(value3);
	}
	if(options.secure) {
		buf_b += "; ";
		buf_b += "secure";
		buf_b += "";
	}
	if(options.scriptable != true) {
		buf_b += "; ";
		buf_b += "HttpOnly";
		buf_b += "";
	}
	return new tink_http_HeaderField("set-cookie",buf_b);
};
tink_http_HeaderField.__super__ = tink_core_NamedWith;
tink_http_HeaderField.prototype = $extend(tink_core_NamedWith.prototype,{
	toString: function() {
		if(this.value == null) {
			return this.name;
		} else {
			return "" + this.name + ": " + this.value;
		}
	}
	,__class__: tink_http_HeaderField
});
var tink_io_StreamParserObject = function() { };
tink_io_StreamParserObject.__name__ = true;
tink_io_StreamParserObject.prototype = {
	__class__: tink_io_StreamParserObject
};
var tink_io_BytewiseParser = function() { };
tink_io_BytewiseParser.__name__ = true;
tink_io_BytewiseParser.__interfaces__ = [tink_io_StreamParserObject];
tink_io_BytewiseParser.prototype = {
	read: function($char) {
		throw new js__$Boot_HaxeError("abstract");
	}
	,progress: function(cursor) {
		while(true) {
			var _g = this.read(cursor.currentByte);
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				var r = _g[2];
				cursor.next();
				return tink_io_ParseStep.Done(r);
			case 2:
				var e = _g[2];
				return tink_io_ParseStep.Failed(e);
			}
			if(!cursor.next()) {
				break;
			}
		}
		return tink_io_ParseStep.Progressed;
	}
	,eof: function(rest) {
		var _g = this.read(-1);
		switch(_g[1]) {
		case 0:
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Unexpected end of input",{ fileName : "StreamParser.hx", lineNumber : 138, className : "tink.io.BytewiseParser", methodName : "eof"}));
		case 1:
			var r = _g[2];
			return tink_core_Outcome.Success(r);
		case 2:
			var e = _g[2];
			return tink_core_Outcome.Failure(e);
		}
	}
	,__class__: tink_io_BytewiseParser
};
var tink_io_ParseStep = { __ename__ : true, __constructs__ : ["Progressed","Done","Failed"] };
tink_io_ParseStep.Progressed = ["Progressed",0];
tink_io_ParseStep.Progressed.toString = $estr;
tink_io_ParseStep.Progressed.__enum__ = tink_io_ParseStep;
tink_io_ParseStep.Done = function(r) { var $x = ["Done",1,r]; $x.__enum__ = tink_io_ParseStep; $x.toString = $estr; return $x; };
tink_io_ParseStep.Failed = function(e) { var $x = ["Failed",2,e]; $x.__enum__ = tink_io_ParseStep; $x.toString = $estr; return $x; };
var tink_http_HeaderParser = function(makeHeader) {
	this.last = -1;
	this.buf = new StringBuf();
	this.makeHeader = makeHeader;
};
tink_http_HeaderParser.__name__ = true;
tink_http_HeaderParser.__super__ = tink_io_BytewiseParser;
tink_http_HeaderParser.prototype = $extend(tink_io_BytewiseParser.prototype,{
	read: function(c) {
		var _g = this.last;
		switch(c) {
		case -1:
			return this.nextLine();
		case 10:
			if(_g == 13) {
				return this.nextLine();
			} else {
				var other = c;
				this.last = other;
				this.buf.b += String.fromCharCode(other);
				return tink_io_ParseStep.Progressed;
			}
			break;
		case 13:
			if(_g == 13) {
				this.buf.b += String.fromCharCode(this.last);
				return tink_io_ParseStep.Progressed;
			} else {
				this.last = 13;
				return tink_io_ParseStep.Progressed;
			}
			break;
		default:
			if(_g == 13) {
				var other1 = c;
				this.buf.b += String.fromCharCode(this.last);
				this.buf.b += String.fromCharCode(other1);
				this.last = -1;
				return tink_io_ParseStep.Progressed;
			} else {
				var other2 = c;
				this.last = other2;
				this.buf.b += String.fromCharCode(other2);
				return tink_io_ParseStep.Progressed;
			}
		}
	}
	,nextLine: function() {
		var line = this.buf.b;
		this.buf = new StringBuf();
		this.last = -1;
		if(line == "") {
			if(this.header == null) {
				return tink_io_ParseStep.Progressed;
			} else {
				return tink_io_ParseStep.Done(this.header);
			}
		} else if(this.header == null) {
			var _g = this.makeHeader(line,this.fields = []);
			switch(_g[1]) {
			case 0:
				if(_g[2] == null) {
					return tink_io_ParseStep.Done(this.header = null);
				} else {
					var v = _g[2];
					this.header = v;
					return tink_io_ParseStep.Progressed;
				}
				break;
			case 1:
				var e = _g[2];
				return tink_io_ParseStep.Failed(e);
			}
		} else {
			this.fields.push(tink_http_HeaderField.ofString(line));
			return tink_io_ParseStep.Progressed;
		}
	}
	,__class__: tink_http_HeaderParser
});
var tink_http_Message = function(header,body) {
	this.header = header;
	this.body = body;
};
tink_http_Message.__name__ = true;
tink_http_Message.prototype = {
	__class__: tink_http_Message
};
var tink_http__$Method_Method_$Impl_$ = {};
tink_http__$Method_Method_$Impl_$.__name__ = true;
tink_http__$Method_Method_$Impl_$.ofString = function(s,fallback) {
	var _g = s.toUpperCase();
	switch(_g) {
	case "DELETE":
		return "DELETE";
	case "GET":
		return "GET";
	case "HEAD":
		return "HEAD";
	case "OPTIONS":
		return "OPTIONS";
	case "PATCH":
		return "PATCH";
	case "POST":
		return "POST";
	case "PUT":
		return "PUT";
	default:
		var v = _g;
		return fallback(v);
	}
};
var tink_http_RequestHeader = function(method,url,version,fields) {
	if(version == null) {
		version = "HTTP/1.1";
	}
	this.method = method;
	this.url = url;
	this.version = version;
	tink_http_Header.call(this,fields);
};
tink_http_RequestHeader.__name__ = true;
tink_http_RequestHeader.__super__ = tink_http_Header;
tink_http_RequestHeader.prototype = $extend(tink_http_Header.prototype,{
	toString: function() {
		return "" + this.method + " " + tink__$Url_Url_$Impl_$.toString(this.url) + " " + this.version + "\r\n" + tink_http_Header.prototype.toString.call(this);
	}
	,__class__: tink_http_RequestHeader
});
var tink_http_IncomingRequestHeader = function(method,url,version,fields) {
	tink_http_RequestHeader.call(this,method,url,version,fields);
};
tink_http_IncomingRequestHeader.__name__ = true;
tink_http_IncomingRequestHeader.parser = function() {
	return new tink_http_HeaderParser(function(line,headers) {
		var _g = line.split(" ");
		if(_g.length == 3) {
			var protocol = _g[2];
			var url = _g[1];
			var method = _g[0];
			return tink_core_Outcome.Success(new tink_http_IncomingRequestHeader(method,tink__$Url_Url_$Impl_$.parse(url),protocol,headers));
		} else {
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid HTTP header",{ fileName : "Request.hx", lineNumber : 58, className : "tink.http.IncomingRequestHeader", methodName : "parser"}));
		}
	});
};
tink_http_IncomingRequestHeader.__super__ = tink_http_RequestHeader;
tink_http_IncomingRequestHeader.prototype = $extend(tink_http_RequestHeader.prototype,{
	getCookies: function() {
		if(this.cookies == null) {
			var _g = new haxe_ds_StringMap();
			var _g1 = 0;
			var _g2 = this.get(tink_http__$Header_HeaderName_$Impl_$.ofString("cookie"));
			while(_g1 < _g2.length) {
				var header = _g2[_g1];
				++_g1;
				var entry = new tink_url__$Query_QueryStringParser(header,";","=",0);
				while(entry.hasNext()) {
					var entry1 = entry.next();
					var key = entry1.name;
					var value = tink_url__$Portion_Portion_$Impl_$.toString(entry1.value);
					if(__map_reserved[key] != null) {
						_g.setReserved(key,value);
					} else {
						_g.h[key] = value;
					}
				}
			}
			this.cookies = _g;
		}
		return this.cookies;
	}
	,cookieNames: function() {
		return this.cookies.keys();
	}
	,getCookie: function(name) {
		var _this = this.getCookies();
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,__class__: tink_http_IncomingRequestHeader
});
var tink_http_OutgoingRequestHeader = function(method,url,version,fields) {
	tink_http_RequestHeader.call(this,method,url,version,fields);
};
tink_http_OutgoingRequestHeader.__name__ = true;
tink_http_OutgoingRequestHeader.__super__ = tink_http_RequestHeader;
tink_http_OutgoingRequestHeader.prototype = $extend(tink_http_RequestHeader.prototype,{
	__class__: tink_http_OutgoingRequestHeader
});
var tink_http_OutgoingRequest = function(header,body) {
	tink_http_Message.call(this,header,body);
};
tink_http_OutgoingRequest.__name__ = true;
tink_http_OutgoingRequest.__super__ = tink_http_Message;
tink_http_OutgoingRequest.prototype = $extend(tink_http_Message.prototype,{
	__class__: tink_http_OutgoingRequest
});
var tink_http_IncomingRequest = function(clientIp,header,body) {
	this.clientIp = clientIp;
	tink_http_Message.call(this,header,body);
};
tink_http_IncomingRequest.__name__ = true;
tink_http_IncomingRequest.parse = function(clientIp,source) {
	return tink_core__$Promise_Promise_$Impl_$.next(tink_io_RealSourceTools.parse(source,tink_http_IncomingRequestHeader.parser()),function(parts) {
		return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(new tink_http_IncomingRequest(clientIp,parts.a,tink_http_IncomingRequestBody.Plain(parts.b))));
	});
};
tink_http_IncomingRequest.__super__ = tink_http_Message;
tink_http_IncomingRequest.prototype = $extend(tink_http_Message.prototype,{
	__class__: tink_http_IncomingRequest
});
var tink_http_IncomingRequestBody = { __ename__ : true, __constructs__ : ["Plain","Parsed"] };
tink_http_IncomingRequestBody.Plain = function(source) { var $x = ["Plain",0,source]; $x.__enum__ = tink_http_IncomingRequestBody; $x.toString = $estr; return $x; };
tink_http_IncomingRequestBody.Parsed = function(parts) { var $x = ["Parsed",1,parts]; $x.__enum__ = tink_http_IncomingRequestBody; $x.toString = $estr; return $x; };
var tink_http_ResponseHeader = function(statusCode,reason,fields,protocol) {
	if(protocol == null) {
		protocol = "HTTP/1.1";
	}
	this.statusCode = statusCode;
	this.reason = reason;
	this.protocol = protocol;
	tink_http_Header.call(this,fields);
};
tink_http_ResponseHeader.__name__ = true;
tink_http_ResponseHeader.parser = function() {
	return new tink_http_HeaderParser(function(line,headers) {
		var _g = line.split(" ");
		var v = _g;
		if(v.length >= 3) {
			return tink_core_Outcome.Success(new tink_http_ResponseHeader(Std.parseInt(v[1]),v.slice(2).join(" "),headers,v[0]));
		} else {
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid HTTP response header",{ fileName : "Response.hx", lineNumber : 34, className : "tink.http.ResponseHeader", methodName : "parser"}));
		}
	});
};
tink_http_ResponseHeader.__super__ = tink_http_Header;
tink_http_ResponseHeader.prototype = $extend(tink_http_Header.prototype,{
	toString: function() {
		return "" + this.protocol + " " + this.statusCode + " " + this.reason + "\r\n" + tink_http_Header.prototype.toString.call(this);
	}
	,__class__: tink_http_ResponseHeader
});
var tink_http__$Response_OutgoingResponseData = function(header,body) {
	tink_http_Message.call(this,header,body);
};
tink_http__$Response_OutgoingResponseData.__name__ = true;
tink_http__$Response_OutgoingResponseData.__super__ = tink_http_Message;
tink_http__$Response_OutgoingResponseData.prototype = $extend(tink_http_Message.prototype,{
	__class__: tink_http__$Response_OutgoingResponseData
});
var tink_http__$Response_OutgoingResponse_$Impl_$ = {};
tink_http__$Response_OutgoingResponse_$Impl_$.__name__ = true;
tink_http__$Response_OutgoingResponse_$Impl_$._new = function(header,body) {
	var this1 = new tink_http__$Response_OutgoingResponseData(header,body);
	return this1;
};
tink_http__$Response_OutgoingResponse_$Impl_$.blob = function(code,bytes,contentType,headers) {
	if(code == null) {
		code = 200;
	}
	var header = new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("Content-Type"),contentType);
	var header1 = bytes.length == null ? "null" : "" + bytes.length;
	var header2;
	if(headers == null) {
		header2 = [];
	} else {
		var v = headers;
		header2 = v;
	}
	var this1 = new tink_http__$Response_OutgoingResponseData(new tink_http_ResponseHeader(code,"OK",[header,new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("Content-Length"),header1)].concat(header2)),tink_io__$Source_Source_$Impl_$.ofChunk(tink_chunk_ByteChunk.of(bytes)));
	return this1;
};
tink_http__$Response_OutgoingResponse_$Impl_$.chunked = function(contentType,headers,source) {
};
tink_http__$Response_OutgoingResponse_$Impl_$.ofString = function(s) {
	return tink_http__$Response_OutgoingResponse_$Impl_$.blob(null,haxe_io_Bytes.ofString(s),"text/plain");
};
tink_http__$Response_OutgoingResponse_$Impl_$.ofBytes = function(b) {
	return tink_http__$Response_OutgoingResponse_$Impl_$.blob(null,b,"application/octet-stream");
};
tink_http__$Response_OutgoingResponse_$Impl_$.reportError = function(e) {
	var this1 = new tink_http__$Response_OutgoingResponseData(new tink_http_ResponseHeader(e.code,e.message,[new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("Content-Type"),"application/json")]),tink_io__$Source_Source_$Impl_$.ofChunk(tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(JSON.stringify({ error : e.message, details : e.data})))));
	return this1;
};
var tink_http_IncomingResponse = function(header,body) {
	tink_http_Message.call(this,header,body);
};
tink_http_IncomingResponse.__name__ = true;
tink_http_IncomingResponse.readAll = function(res) {
	return tink_core__$Promise_Promise_$Impl_$.next(tink_io_RealSourceTools.all(res.body),function(b) {
		if(res.header.statusCode >= 400) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(tink_core_TypedError.withData(res.header.statusCode,res.header.reason,b.toString(),{ fileName : "Response.hx", lineNumber : 91, className : "tink.http.IncomingResponse", methodName : "readAll"}))));
		} else {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(b)));
		}
	});
};
tink_http_IncomingResponse.reportError = function(e) {
	return new tink_http_IncomingResponse(new tink_http_ResponseHeader(e.code,e.message,[new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("Content-Type"),"application/json")]),tink_io__$Source_Source_$Impl_$.ofChunk(tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(JSON.stringify({ error : e.message, details : e.data})))));
};
tink_http_IncomingResponse.__super__ = tink_http_Message;
tink_http_IncomingResponse.prototype = $extend(tink_http_Message.prototype,{
	__class__: tink_http_IncomingResponse
});
var tink_http_BodyPart = { __ename__ : true, __constructs__ : ["Value","File"] };
tink_http_BodyPart.Value = function(v) { var $x = ["Value",0,v]; $x.__enum__ = tink_http_BodyPart; $x.toString = $estr; return $x; };
tink_http_BodyPart.File = function(handle) { var $x = ["File",1,handle]; $x.__enum__ = tink_http_BodyPart; $x.toString = $estr; return $x; };
var tink_http__$StructuredBody_UploadedFile_$Impl_$ = {};
tink_http__$StructuredBody_UploadedFile_$Impl_$.__name__ = true;
tink_http__$StructuredBody_UploadedFile_$Impl_$.ofBlob = function(name,type,data) {
	return { fileName : name, mimeType : type, size : data.length, read : function() {
		return tink_io__$Source_Source_$Impl_$.ofChunk(tink_chunk_ByteChunk.of(data));
	}, saveTo : function(path) {
		var name1 = "File sink " + path;
		var dest = tink_io__$Sink_SinkYielding_$Impl_$.ofNodeStream(name1,js_node_Fs.createWriteStream(path));
		var ret = tink_io__$Source_Source_$Impl_$.pipeTo(tink_io__$Source_Source_$Impl_$.ofChunk(tink_chunk_ByteChunk.of(data)),dest,{ end : true}).map(function(r) {
			switch(r[1]) {
			case 0:
				return tink_core_Outcome.Success(tink_core_Noise.Noise);
			case 1:
				return tink_core_Outcome.Failure(new tink_core_TypedError(null,"File $path closed unexpectedly",{ fileName : "StructuredBody.hx", lineNumber : 40, className : "tink.http._StructuredBody.UploadedFile_Impl_", methodName : "ofBlob"}));
			case 2:
				var e = r[2];
				return tink_core_Outcome.Failure(e);
			}
		});
		return ret.gather();
	}};
};
var tink_io__$PipeOptions_PipeOptions_$Impl_$ = {};
tink_io__$PipeOptions_PipeOptions_$Impl_$.__name__ = true;
tink_io__$PipeOptions_PipeOptions_$Impl_$.get_end = function(this1) {
	if(this1 != null) {
		return this1.end;
	} else {
		return false;
	}
};
tink_io__$PipeOptions_PipeOptions_$Impl_$.get_destructive = function(this1) {
	if(this1 != null) {
		return this1.destructive;
	} else {
		return false;
	}
};
var tink_io_PipeResult = { __ename__ : true, __constructs__ : ["AllWritten","SinkEnded","SinkFailed","SourceFailed"] };
tink_io_PipeResult.AllWritten = ["AllWritten",0];
tink_io_PipeResult.AllWritten.toString = $estr;
tink_io_PipeResult.AllWritten.__enum__ = tink_io_PipeResult;
tink_io_PipeResult.SinkEnded = function(result,rest) { var $x = ["SinkEnded",1,result,rest]; $x.__enum__ = tink_io_PipeResult; $x.toString = $estr; return $x; };
tink_io_PipeResult.SinkFailed = function(e,rest) { var $x = ["SinkFailed",2,e,rest]; $x.__enum__ = tink_io_PipeResult; $x.toString = $estr; return $x; };
tink_io_PipeResult.SourceFailed = function(e) { var $x = ["SourceFailed",3,e]; $x.__enum__ = tink_io_PipeResult; $x.toString = $estr; return $x; };
var tink_io_PipeResultTools = function() { };
tink_io_PipeResultTools.__name__ = true;
tink_io_PipeResultTools.toResult = function(c,result,buffered) {
	var mk = function(s) {
		if(buffered == null) {
			return s;
		} else {
			var v = buffered;
			return s.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(v)));
		}
	};
	switch(c[1]) {
	case 0:
		var rest = c[2];
		return tink_io_PipeResult.SinkEnded(result,mk(rest));
	case 1:
		var rest1 = c[3];
		var e = c[2];
		return tink_io_PipeResult.SinkFailed(e,mk(rest1));
	case 2:
		var e1 = c[2];
		return tink_io_PipeResult.SourceFailed(e1);
	case 3:
		return tink_io_PipeResult.AllWritten;
	}
};
var tink_io_SinkObject = function() { };
tink_io_SinkObject.__name__ = true;
tink_io_SinkObject.prototype = {
	__class__: tink_io_SinkObject
};
var tink_io_SinkBase = function() { };
tink_io_SinkBase.__name__ = true;
tink_io_SinkBase.__interfaces__ = [tink_io_SinkObject];
tink_io_SinkBase.prototype = {
	get_sealed: function() {
		return true;
	}
	,consume: function(source,options) {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,__class__: tink_io_SinkBase
};
var tink_io__$Sink_Blackhole = function() {
};
tink_io__$Sink_Blackhole.__name__ = true;
tink_io__$Sink_Blackhole.__super__ = tink_io_SinkBase;
tink_io__$Sink_Blackhole.prototype = $extend(tink_io_SinkBase.prototype,{
	consume: function(source,options) {
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafeSync(function(_) {
			return tink_streams_Handled.Resume;
		})).map(function(o) {
			switch(o[1]) {
			case 0:
				throw new js__$Boot_HaxeError("unreachable");
				break;
			case 2:
				var e = o[2];
				return tink_io_PipeResult.SourceFailed(e);
			case 3:
				return tink_io_PipeResult.AllWritten;
			}
		});
		return ret.gather();
	}
	,__class__: tink_io__$Sink_Blackhole
});
var tink_io__$Sink_SinkYielding_$Impl_$ = {};
tink_io__$Sink_SinkYielding_$Impl_$.__name__ = true;
tink_io__$Sink_SinkYielding_$Impl_$.end = function(this1) {
	if(this1.get_sealed()) {
		return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(false));
	} else {
		var ret = this1.consume(tink_io__$Source_Source_$Impl_$.EMPTY,{ end : true}).map(function(r) {
			switch(r[1]) {
			case 0:case 1:
				return tink_core_Outcome.Success(true);
			case 2:
				var e = r[2];
				return tink_core_Outcome.Failure(e);
			}
		});
		return ret.gather();
	}
};
tink_io__$Sink_SinkYielding_$Impl_$.ofError = function(e) {
	return new tink_io__$Sink_ErrorSink(e);
};
tink_io__$Sink_SinkYielding_$Impl_$.ofPromised = function(p) {
	var ret = p.map(function(o) {
		switch(o[1]) {
		case 0:
			var v = o[2];
			return v;
		case 1:
			var e = o[2];
			return tink_io__$Sink_SinkYielding_$Impl_$.ofError(e);
		}
	});
	return new tink_io__$Sink_FutureSink(ret.gather());
};
tink_io__$Sink_SinkYielding_$Impl_$.ofNodeStream = function(name,r) {
	return tink_io_nodejs_NodejsSink.wrap(name,r);
};
var tink_io__$Sink_FutureSink = function(f) {
	this.f = f;
};
tink_io__$Sink_FutureSink.__name__ = true;
tink_io__$Sink_FutureSink.__super__ = tink_io_SinkBase;
tink_io__$Sink_FutureSink.prototype = $extend(tink_io_SinkBase.prototype,{
	consume: function(source,options) {
		var ret = this.f.flatMap(function(sink) {
			return sink.consume(source,options);
		});
		return ret.gather();
	}
	,__class__: tink_io__$Sink_FutureSink
});
var tink_io__$Sink_ErrorSink = function(error) {
	this.error = error;
};
tink_io__$Sink_ErrorSink.__name__ = true;
tink_io__$Sink_ErrorSink.__super__ = tink_io_SinkBase;
tink_io__$Sink_ErrorSink.prototype = $extend(tink_io_SinkBase.prototype,{
	get_sealed: function() {
		return false;
	}
	,consume: function(source,options) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_PipeResult.SinkFailed(this.error,tink_streams__$Stream_Stream_$Impl_$.dirty(source))));
	}
	,__class__: tink_io__$Sink_ErrorSink
});
var tink_streams_StreamObject = function() { };
tink_streams_StreamObject.__name__ = true;
tink_streams_StreamObject.prototype = {
	__class__: tink_streams_StreamObject
};
var tink_streams_StreamBase = function() {
	this.retainCount = 0;
};
tink_streams_StreamBase.__name__ = true;
tink_streams_StreamBase.__interfaces__ = [tink_streams_StreamObject];
tink_streams_StreamBase.prototype = {
	get_depleted: function() {
		return false;
	}
	,retain: function() {
		var _gthis = this;
		this.retainCount++;
		var retained = true;
		return function() {
			if(retained) {
				retained = false;
				if(--_gthis.retainCount == 0) {
					_gthis.destroy();
				}
			}
		};
	}
	,regroup: function(f) {
		return new tink_streams__$Stream_RegroupStream(this,f);
	}
	,map: function(f) {
		return this.regroup(f);
	}
	,filter: function(f) {
		return this.regroup(f);
	}
	,destroy: function() {
	}
	,append: function(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return tink_streams__$Stream_CompoundStream.of([this,other]);
		}
	}
	,prepend: function(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return tink_streams__$Stream_CompoundStream.of([other,this]);
		}
	}
	,decompose: function(into) {
		if(!this.get_depleted()) {
			into.push(this);
		}
	}
	,idealize: function(rescue) {
		if(this.get_depleted()) {
			return tink_streams_Empty.inst;
		} else {
			return new tink_streams_IdealizeStream(this,rescue);
		}
	}
	,reduce: function(initial,reducer) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(item) {
				var ret = reducer.apply(initial,item).map(function(o) {
					switch(o[1]) {
					case 0:
						var v = o[2];
						initial = v;
						return tink_streams_Handled.Resume;
					case 1:
						var e = o[2];
						return tink_streams_Handled.Clog(e);
					}
				});
				return ret.gather();
			})).handle(function(c) {
				switch(c[1]) {
				case 0:
					throw new js__$Boot_HaxeError("assert");
					break;
				case 1:
					var rest = c[3];
					var e1 = c[2];
					cb(tink_streams_Reduction.Crashed(e1,rest));
					break;
				case 2:
					var e2 = c[2];
					cb(tink_streams_Reduction.Failed(e2));
					break;
				case 3:
					cb(tink_streams_Reduction.Reduced(initial));
					break;
				}
			});
		},true);
	}
	,forEach: function(handler) {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,__class__: tink_streams_StreamBase
};
var tink_streams_Empty = function() {
	tink_streams_StreamBase.call(this);
};
tink_streams_Empty.__name__ = true;
tink_streams_Empty.make = function() {
	return tink_streams_Empty.inst;
};
tink_streams_Empty.__super__ = tink_streams_StreamBase;
tink_streams_Empty.prototype = $extend(tink_streams_StreamBase.prototype,{
	get_depleted: function() {
		return true;
	}
	,forEach: function(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Depleted));
	}
	,__class__: tink_streams_Empty
});
var tink_io__$Source_Source_$Impl_$ = {};
tink_io__$Source_Source_$Impl_$.__name__ = true;
tink_io__$Source_Source_$Impl_$.get_depleted = function(this1) {
	return this1.get_depleted();
};
tink_io__$Source_Source_$Impl_$.ofNodeStream = function(name,r,options) {
	if(options == null) {
		options = { };
	}
	return tink_io_nodejs_NodejsSource.wrap(name,r,options.chunkSize,options.onEnd);
};
tink_io__$Source_Source_$Impl_$.chunked = function(this1) {
	return this1;
};
tink_io__$Source_Source_$Impl_$.ofError = function(e) {
	return tink_streams__$Stream_Stream_$Impl_$.dirty(tink_streams__$Stream_Stream_$Impl_$.ofError(e));
};
tink_io__$Source_Source_$Impl_$.ofFuture = function(f) {
	return tink_streams__$Stream_Stream_$Impl_$.flatten(f);
};
tink_io__$Source_Source_$Impl_$.ofPromised = function(p) {
	var ret = p.map(function(o) {
		switch(o[1]) {
		case 0:
			var s = o[2];
			return s;
		case 1:
			var e = o[2];
			return tink_io__$Source_Source_$Impl_$.ofError(e);
		}
	});
	return tink_streams__$Stream_Stream_$Impl_$.dirty(tink_streams__$Stream_Stream_$Impl_$.flatten(ret.gather()));
};
tink_io__$Source_Source_$Impl_$.concatAll = function(s) {
	return s.reduce(tink__$Chunk_Chunk_$Impl_$.EMPTY,tink_streams__$Stream_Reducer_$Impl_$.ofSafeSync(function(res,cur) {
		return tink_streams_ReductionStep.Progress(tink__$Chunk_Chunk_$Impl_$.catChunk(res,cur));
	}));
};
tink_io__$Source_Source_$Impl_$.pipeTo = function(this1,target,options) {
	return target.consume(this1,options);
};
tink_io__$Source_Source_$Impl_$.append = function(this1,that) {
	return this1.append(that);
};
tink_io__$Source_Source_$Impl_$.prepend = function(this1,that) {
	return this1.prepend(that);
};
tink_io__$Source_Source_$Impl_$.skip = function(this1,len) {
	return this1.regroup(tink_streams__$Stream_Regrouper_$Impl_$.ofIgnoranceSync(function(chunks) {
		var chunk = chunks[0];
		if(len <= 0) {
			return tink_streams_RegroupResult.Converted(chunk);
		}
		var length = chunk.getLength();
		var out = len < length ? tink_streams_RegroupResult.Converted(chunk.slice(len,length)) : tink_streams_RegroupResult.Swallowed;
		len -= length;
		return out;
	}));
};
tink_io__$Source_Source_$Impl_$.limit = function(this1,len) {
	return this1.regroup(tink_streams__$Stream_Regrouper_$Impl_$.ofIgnoranceSync(function(chunks) {
		if(len <= 0) {
			return tink_streams_RegroupResult.Swallowed;
		}
		var chunk = chunks[0];
		var length = chunk.getLength();
		var out = tink_streams_RegroupResult.Converted(len < length ? chunk.slice(0,len) : chunk);
		len -= length;
		return out;
	}));
};
tink_io__$Source_Source_$Impl_$.ofChunk = function(chunk) {
	return new tink_streams_Single(new tink_core__$Lazy_LazyConst(chunk));
};
tink_io__$Source_Source_$Impl_$.ofString = function(s) {
	return tink_io__$Source_Source_$Impl_$.ofChunk(tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(s)));
};
tink_io__$Source_Source_$Impl_$.ofBytes = function(b) {
	return tink_io__$Source_Source_$Impl_$.ofChunk(tink_chunk_ByteChunk.of(b));
};
var tink_io_RealSourceTools = function() { };
tink_io_RealSourceTools.__name__ = true;
tink_io_RealSourceTools.all = function(s) {
	var ret = tink_io__$Source_Source_$Impl_$.concatAll(s).map(function(o) {
		switch(o[1]) {
		case 1:
			var e = o[2];
			return tink_core_Outcome.Failure(e);
		case 2:
			var c = o[2];
			return tink_core_Outcome.Success(c);
		}
	});
	return ret.gather();
};
tink_io_RealSourceTools.parse = function(s,p) {
	var ret = tink_io__$StreamParser_StreamParser_$Impl_$.parse(s,p).map(function(r) {
		switch(r[1]) {
		case 0:
			var rest = r[3];
			var data = r[2];
			var this1 = new tink_core_MPair(data,rest);
			return tink_core_Outcome.Success(this1);
		case 1:
			var e = r[2];
			return tink_core_Outcome.Failure(e);
		case 2:
			var e1 = r[2];
			return tink_core_Outcome.Failure(e1);
		}
	});
	return ret.gather();
};
tink_io_RealSourceTools.split = function(s,delim) {
	var s1 = tink_io_RealSourceTools.parse(s,new tink_io_Splitter(delim));
	return { before : tink_streams__$Stream_Stream_$Impl_$.dirty(tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(tink_core__$Promise_Promise_$Impl_$.next(s1,tink_core__$Promise_Next_$Impl_$.ofSafeSync(function(p) {
		return new tink_streams_Single(new tink_core__$Lazy_LazyConst(p.a));
	}))))), delimiter : tink_core__$Promise_Promise_$Impl_$.next(s1,function(_) {
		return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(delim));
	}), after : tink_streams__$Stream_Stream_$Impl_$.dirty(tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(tink_core__$Promise_Promise_$Impl_$.next(s1,tink_core__$Promise_Next_$Impl_$.ofSafeSync(function(p1) {
		return p1.b;
	})))))};
};
tink_io_RealSourceTools.idealize = function(s,rescue) {
	return tink_io__$Source_Source_$Impl_$.chunked(s).idealize(function(e) {
		rescue(e);
		return tink_io__$Source_Source_$Impl_$.EMPTY;
	});
};
var tink_io_IdealSourceTools = function() { };
tink_io_IdealSourceTools.__name__ = true;
tink_io_IdealSourceTools.all = function(s) {
	var ret = tink_io__$Source_Source_$Impl_$.concatAll(s).map(function(o) {
		var c = o[2];
		return c;
	});
	return ret.gather();
};
tink_io_IdealSourceTools.parse = function(s,p) {
	var ret = tink_io__$StreamParser_StreamParser_$Impl_$.parse(s,p).map(function(r) {
		switch(r[1]) {
		case 0:
			var rest = r[3];
			var data = r[2];
			var this1 = new tink_core_MPair(data,rest);
			return tink_core_Outcome.Success(this1);
		case 1:
			var e = r[2];
			return tink_core_Outcome.Failure(e);
		}
	});
	return ret.gather();
};
tink_io_IdealSourceTools.split = function(s,delim) {
	var s1 = tink_io_IdealSourceTools.parse(s,new tink_io_Splitter(delim));
	return { before : tink_io_RealSourceTools.idealize(tink_streams__$Stream_Stream_$Impl_$.dirty(tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(tink_core__$Promise_Promise_$Impl_$.next(s1,tink_core__$Promise_Next_$Impl_$.ofSafeSync(function(p) {
		return new tink_streams_Single(new tink_core__$Lazy_LazyConst(p.a));
	}))))),function(_) {
	}), delimiter : tink_core__$Promise_Promise_$Impl_$.next(s1,function(_1) {
		return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(delim));
	}), after : tink_io_RealSourceTools.idealize(tink_streams__$Stream_Stream_$Impl_$.dirty(tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(tink_core__$Promise_Promise_$Impl_$.next(s1,tink_core__$Promise_Next_$Impl_$.ofSafeSync(function(p1) {
		return p1.b;
	}))))),function(_2) {
	})};
};
var tink_io_ParseResult = { __ename__ : true, __constructs__ : ["Parsed","Invalid","Broke"] };
tink_io_ParseResult.Parsed = function(data,rest) { var $x = ["Parsed",0,data,rest]; $x.__enum__ = tink_io_ParseResult; $x.toString = $estr; return $x; };
tink_io_ParseResult.Invalid = function(e,rest) { var $x = ["Invalid",1,e,rest]; $x.__enum__ = tink_io_ParseResult; $x.toString = $estr; return $x; };
tink_io_ParseResult.Broke = function(e) { var $x = ["Broke",2,e]; $x.__enum__ = tink_io_ParseResult; $x.toString = $estr; return $x; };
var tink_io__$StreamParser_StreamParser_$Impl_$ = {};
tink_io__$StreamParser_StreamParser_$Impl_$.__name__ = true;
tink_io__$StreamParser_StreamParser_$Impl_$.doParse = function(source,p,consume,finalize) {
	var cursor = tink__$Chunk_Chunk_$Impl_$.EMPTY.getCursor();
	var mk = function(source1) {
		return source1.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(cursor.right())));
	};
	var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(chunk) {
		cursor.shift(chunk);
		var _g = p.progress(cursor);
		switch(_g[1]) {
		case 0:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
		case 1:
			var v = _g[2];
			var ret1 = consume(v).map(function(o) {
				if(o.resume) {
					return tink_streams_Handled.Resume;
				} else {
					return tink_streams_Handled.Finish;
				}
			});
			return ret1.gather();
		case 2:
			var e = _g[2];
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Clog(e)));
		}
	})).flatMap(function(c) {
		switch(c[1]) {
		case 0:
			var rest = c[2];
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(finalize(),mk(rest))));
		case 1:
			var rest1 = c[3];
			var e1 = c[2];
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Invalid(e1,mk(rest1))));
		case 2:
			var e2 = c[2];
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Broke(e2)));
		case 3:
			if(cursor.currentPos < cursor.length) {
				var v1 = finalize();
				var v2 = new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink__$Chunk_Chunk_$Impl_$.EMPTY));
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(v1,mk(v2))));
			} else {
				var _g1 = p.eof(cursor);
				switch(_g1[1]) {
				case 0:
					var result = _g1[2];
					var ret2 = consume(result).map(function(_) {
						return tink_io_ParseResult.Parsed(finalize(),new tink_streams_Single(new tink_core__$Lazy_LazyConst(cursor.flush())));
					});
					return ret2.gather();
				case 1:
					var e3 = _g1[2];
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Invalid(e3,new tink_streams_Single(new tink_core__$Lazy_LazyConst(cursor.flush())))));
				}
			}
			break;
		}
	});
	return ret.gather();
};
tink_io__$StreamParser_StreamParser_$Impl_$.parse = function(s,p) {
	var res = null;
	var onResult = function(r) {
		res = r;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst({ resume : false}));
	};
	return tink_io__$StreamParser_StreamParser_$Impl_$.doParse(s,p,onResult,function() {
		return res;
	});
};
var tink_io_Splitter = function(delim) {
	this.buf = tink__$Chunk_Chunk_$Impl_$.EMPTY;
	this.delim = delim;
};
tink_io_Splitter.__name__ = true;
tink_io_Splitter.__super__ = tink_io_BytewiseParser;
tink_io_Splitter.prototype = $extend(tink_io_BytewiseParser.prototype,{
	read: function($char) {
		if($char == -1) {
			return tink_io_ParseStep.Done(this.buf);
		}
		this.buf = tink__$Chunk_Chunk_$Impl_$.catChunk(this.buf,tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(String.fromCharCode($char))));
		if(this.buf.getLength() > this.delim.getLength()) {
			var bcursor = this.buf.getCursor();
			var delta = this.buf.getLength() - this.delim.getLength();
			bcursor.moveTo(bcursor.currentPos + delta);
			var dcursor = this.delim.getCursor();
			var _g1 = 0;
			var _g = this.delim.getLength();
			while(_g1 < _g) {
				var i = _g1++;
				if(bcursor.currentByte != dcursor.currentByte) {
					return tink_io_ParseStep.Progressed;
				} else {
					bcursor.next();
					dcursor.next();
				}
			}
			var out = tink_io_ParseStep.Done(this.buf.slice(0,bcursor.currentPos - this.delim.getLength()));
			this.buf = tink__$Chunk_Chunk_$Impl_$.EMPTY;
			return out;
		} else {
			return tink_io_ParseStep.Progressed;
		}
	}
	,__class__: tink_io_Splitter
});
var tink_io_SimpleBytewiseParser = function(f) {
	this._read = f;
};
tink_io_SimpleBytewiseParser.__name__ = true;
tink_io_SimpleBytewiseParser.__super__ = tink_io_BytewiseParser;
tink_io_SimpleBytewiseParser.prototype = $extend(tink_io_BytewiseParser.prototype,{
	read: function($char) {
		return this._read($char);
	}
	,__class__: tink_io_SimpleBytewiseParser
});
var tink_io_nodejs_NodejsSink = function(target) {
	this.target = target;
};
tink_io_nodejs_NodejsSink.__name__ = true;
tink_io_nodejs_NodejsSink.wrap = function(name,$native) {
	return new tink_io_nodejs_NodejsSink(new tink_io_nodejs_WrappedWritable(name,$native));
};
tink_io_nodejs_NodejsSink.__super__ = tink_io_SinkBase;
tink_io_nodejs_NodejsSink.prototype = $extend(tink_io_SinkBase.prototype,{
	consume: function(source,options) {
		var _gthis = this;
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(c) {
			var ret1 = _gthis.target.write(c).map(function(w) {
				switch(w[1]) {
				case 0:
					switch(w[2]) {
					case false:
						return tink_streams_Handled.BackOff;
					case true:
						return tink_streams_Handled.Resume;
					}
					break;
				case 1:
					var e = w[2];
					return tink_streams_Handled.Clog(e);
				}
			});
			return ret1.gather();
		}));
		ret.handle(function(end) {
			_gthis.target.end();
		});
		var ret2 = ret.map(function(c1) {
			return tink_io_PipeResultTools.toResult(c1,tink_core_Noise.Noise);
		});
		return ret2.gather();
	}
	,__class__: tink_io_nodejs_NodejsSink
});
var tink_streams_Generator = function(next) {
	tink_streams_StreamBase.call(this);
	this.next = next;
};
tink_streams_Generator.__name__ = true;
tink_streams_Generator.stream = function(step) {
	return new tink_streams_Generator(tink_core__$Future_Future_$Impl_$.async(step,true));
};
tink_streams_Generator.__super__ = tink_streams_StreamBase;
tink_streams_Generator.prototype = $extend(tink_streams_StreamBase.prototype,{
	forEach: function(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.next.handle(function(e) {
				switch(e[1]) {
				case 0:
					var then = e[3];
					var v = e[2];
					handler.apply(v).handle(function(s) {
						switch(s[1]) {
						case 0:
							cb(tink_streams_Conclusion.Halted(_gthis));
							break;
						case 1:
							cb(tink_streams_Conclusion.Halted(then));
							break;
						case 2:
							then.forEach(handler).handle(cb);
							break;
						case 3:
							var e1 = s[2];
							cb(tink_streams_Conclusion.Clogged(e1,_gthis));
							break;
						}
					});
					break;
				case 1:
					var e2 = e[2];
					cb(tink_streams_Conclusion.Failed(e2));
					break;
				case 2:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		},true);
	}
	,__class__: tink_streams_Generator
});
var tink_io_nodejs_NodejsSource = function(target) {
	tink_streams_Generator.call(this,tink_core__$Future_Future_$Impl_$.async(function(cb) {
		target.read().handle(function(o) {
			var tmp;
			switch(o[1]) {
			case 0:
				if(o[2] == null) {
					tmp = tink_streams_Step.End;
				} else {
					var chunk = o[2];
					tmp = tink_streams_Step.Link(chunk,new tink_io_nodejs_NodejsSource(target));
				}
				break;
			case 1:
				var e = o[2];
				tmp = tink_streams_Step.Fail(e);
				break;
			}
			cb(tmp);
		});
	},true));
};
tink_io_nodejs_NodejsSource.__name__ = true;
tink_io_nodejs_NodejsSource.wrap = function(name,$native,chunkSize,onEnd) {
	return new tink_io_nodejs_NodejsSource(new tink_io_nodejs_WrappedReadable(name,$native,chunkSize,onEnd));
};
tink_io_nodejs_NodejsSource.__super__ = tink_streams_Generator;
tink_io_nodejs_NodejsSource.prototype = $extend(tink_streams_Generator.prototype,{
	__class__: tink_io_nodejs_NodejsSource
});
var tink_io_nodejs_WrappedBuffer = function(buffer) {
	this.buffer = buffer;
};
tink_io_nodejs_WrappedBuffer.__name__ = true;
tink_io_nodejs_WrappedBuffer.__interfaces__ = [tink_chunk_ChunkObject];
tink_io_nodejs_WrappedBuffer.prototype = {
	getCursor: function() {
		return tink_chunk_ByteChunk.of(this.toBytes()).getCursor();
	}
	,flatten: function(into) {
		tink_chunk_ByteChunk.of(this.toBytes()).flatten(into);
	}
	,getLength: function() {
		return this.buffer.length;
	}
	,slice: function(from,to) {
		return new tink_io_nodejs_WrappedBuffer(this.buffer.slice(from,to));
	}
	,toString: function() {
		return this.buffer.toString();
	}
	,toBytes: function() {
		var copy = tink_io_nodejs_WrappedBuffer.alloc(this.buffer.length);
		this.buffer.copy(copy);
		return haxe_io_Bytes.ofData(copy);
	}
	,blitTo: function(target,offset) {
		this.buffer.copy(new js_node_buffer_Buffer(target.b.bufferValue),offset);
		return;
	}
	,__class__: tink_io_nodejs_WrappedBuffer
};
var tink_io_nodejs_WrappedReadable = function(name,$native,chunkSize,onEnd) {
	this.name = name;
	this["native"] = $native;
	this.chunkSize = chunkSize;
	this.end = tink_core__$Future_Future_$Impl_$.async(function(cb) {
		$native.once("end",function() {
			cb(tink_core_Outcome.Success(null));
		});
		$native.once("error",function(e) {
			var tmp = tink_core_Outcome.Failure(new tink_core_TypedError(null,"" + e.code + " - Failed reading from " + name + " because " + e.message,{ fileName : "WrappedReadable.hx", lineNumber : 21, className : "tink.io.nodejs.WrappedReadable", methodName : "new"}));
			cb(tmp);
		});
	});
	if(onEnd != null) {
		this.end.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
			process.nextTick(onEnd);
		}));
	}
};
tink_io_nodejs_WrappedReadable.__name__ = true;
tink_io_nodejs_WrappedReadable.prototype = {
	read: function() {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.first(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var attempt = null;
			attempt = function() {
				try {
					var _g = _gthis["native"].read(_gthis.chunkSize);
					if(_g == null) {
						_gthis["native"].once("readable",attempt);
					} else {
						var chunk = _g;
						var buf = typeof(chunk) == "string" ? new js_node_buffer_Buffer(chunk) : chunk;
						var attempt1 = tink_core_Outcome.Success(new tink_io_nodejs_WrappedBuffer(buf));
						cb(attempt1);
					}
				} catch( e ) {
					if (e instanceof js__$Boot_HaxeError) e = e.val;
					var attempt2 = tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error while reading from " + _gthis.name,e,{ fileName : "WrappedReadable.hx", lineNumber : 46, className : "tink.io.nodejs.WrappedReadable", methodName : "read"}));
					cb(attempt2);
				}
			};
			var attempt3 = attempt;
			attempt3();
		}),this.end);
	}
	,__class__: tink_io_nodejs_WrappedReadable
};
var tink_io_nodejs_WrappedWritable = function(name,$native) {
	this.name = name;
	this["native"] = $native;
	this.ended = tink_core__$Future_Future_$Impl_$.async(function(cb) {
		$native.once("end",function() {
			cb(tink_core_Outcome.Success(false));
		});
		$native.once("finish",function() {
			cb(tink_core_Outcome.Success(false));
		});
		$native.once("close",function() {
			cb(tink_core_Outcome.Success(false));
		});
		$native.on("error",function(e) {
			var tmp = tink_core_Outcome.Failure(new tink_core_TypedError(null,"" + e.code + ": " + e.message,{ fileName : "WrappedWritable.hx", lineNumber : 22, className : "tink.io.nodejs.WrappedWritable", methodName : "new"}));
			cb(tmp);
		});
	});
};
tink_io_nodejs_WrappedWritable.__name__ = true;
tink_io_nodejs_WrappedWritable.prototype = {
	end: function() {
		var didEnd = false;
		var this1 = this.ended.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
			didEnd = true;
		}));
		if(this1 != null) {
			this1.dissolve();
		}
		if(didEnd) {
			return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(false));
		}
		this["native"].end();
		return tink_core__$Promise_Promise_$Impl_$.next(this.ended,function(_) {
			return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(true));
		});
	}
	,write: function(chunk) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.first(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			if(chunk.getLength() == 0) {
				cb(tink_core_Outcome.Success(true));
				return;
			}
			var buf = js_node_buffer_Buffer.isBuffer(chunk.buffer) ? chunk.buffer : new js_node_buffer_Buffer(chunk.toBytes().b.bufferValue);
			var f = cb;
			var a1 = tink_core_Outcome.Success(true);
			var tmp = function() {
				f(a1);
			};
			_gthis["native"].write(buf,tmp);
		}),this.ended);
	}
	,__class__: tink_io_nodejs_WrappedWritable
};
var tink_json_Parser = function() { };
tink_json_Parser.__name__ = true;
var tink_json__$Parser_SliceData = function(source,min,max) {
	this.source = source;
	this.min = min;
	this.max = max;
};
tink_json__$Parser_SliceData.__name__ = true;
tink_json__$Parser_SliceData.prototype = {
	__class__: tink_json__$Parser_SliceData
};
var tink_json__$Parser_JsonString_$Impl_$ = {};
tink_json__$Parser_JsonString_$Impl_$.__name__ = true;
tink_json__$Parser_JsonString_$Impl_$.contains = function(this1,s) {
	var _g = this1.source.indexOf(s,this1.min);
	if(_g == -1) {
		return false;
	} else {
		var outside = _g;
		if(outside > this1.max) {
			return false;
		} else {
			var v = _g;
			return true;
		}
	}
};
tink_json__$Parser_JsonString_$Impl_$.toString = function(this1) {
	if(tink_json__$Parser_JsonString_$Impl_$.contains(this1,"\\")) {
		return JSON.parse(this1.source.substring(this1.min - 1,this1.max + 1));
	} else {
		return this1.source.substring(this1.min,this1.max);
	}
};
tink_json__$Parser_JsonString_$Impl_$.get = function(this1) {
	return this1.source.substring(this1.min,this1.max);
};
tink_json__$Parser_JsonString_$Impl_$.toInt = function(this1) {
	return Std.parseInt(this1.source.substring(this1.min,this1.max));
};
tink_json__$Parser_JsonString_$Impl_$.toFloat = function(this1) {
	return parseFloat(this1.source.substring(this1.min,this1.max));
};
tink_json__$Parser_JsonString_$Impl_$.equalsString = function(a,b) {
	if(b.length == a.max - a.min) {
		return a.source.startsWith(b,a.min);
	} else {
		return false;
	}
};
var tink_json_BasicParser = function() {
	this.plugins = new tink_core_Annex(this);
};
tink_json_BasicParser.__name__ = true;
tink_json_BasicParser.isDigit = function($char) {
	if($char < 58) {
		return $char > 47;
	} else {
		return false;
	}
};
tink_json_BasicParser.prototype = {
	init: function(source) {
		this.source = source;
		this.pos = 0;
		this.max = source.length;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
	}
	,skipIgnored: function() {
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
	}
	,parseDynamic: function() {
		var start = this.pos;
		this.skipValue();
		return JSON.parse(this.source.substring(start,this.pos));
	}
	,parseString: function() {
		var e;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var e1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 34) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			e1 = true;
		} else {
			e1 = false;
		}
		if(!e1) {
			e = this.die("Expected \"");
		} else {
			e = null;
		}
		return this.parseRestOfString();
	}
	,parseRestOfString: function() {
		return this.slice(this.skipString(),this.pos - 1);
	}
	,skipString: function() {
		var start = this.pos;
		while(true) {
			var _g = this.source.indexOf("\"",this.pos);
			if(_g == -1) {
				this.die("unterminated string",start);
			} else {
				var v = _g;
				this.pos = v + 1;
				var p = this.pos - 2;
				while(this.source.charCodeAt(p) == 92) --p;
				if((p - this.pos & 1) == 0) {
					break;
				}
			}
		}
		return start;
	}
	,parseNumber: function() {
		return this.slice(this.skipNumber(this.source.charCodeAt(this.pos++)),this.pos);
	}
	,invalidNumber: function(start) {
		return this.die("Invalid number " + this.source.substring(start,this.pos),start);
	}
	,skipNumber: function(c) {
		var start = this.pos - 1;
		var minus = c == 45;
		var digit = !minus;
		var zero = c == 48;
		var point = false;
		var e = false;
		var pm = false;
		var end = false;
		while(true) {
			c = this.source.charCodeAt(this.pos++);
			switch(c) {
			case 43:case 45:
				if(!e || pm) {
					this.invalidNumber(start);
				}
				digit = false;
				pm = true;
				break;
			case 46:
				if(minus || point) {
					this.invalidNumber(start);
				}
				digit = false;
				point = true;
				break;
			case 48:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
					zero = true;
				}
				digit = true;
				break;
			case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
				}
				digit = true;
				zero = false;
				break;
			case 69:case 101:
				if(minus || zero || e) {
					this.invalidNumber(start);
				}
				digit = false;
				e = true;
				break;
			default:
				if(!digit) {
					this.invalidNumber(start);
				}
				this.pos--;
				end = true;
			}
			if(end) {
				break;
			}
		}
		return start;
	}
	,slice: function(from,to) {
		return new tink_json__$Parser_SliceData(this.source,from,to);
	}
	,nextChar: function() {
		return this.source.charCodeAt(this.pos++);
	}
	,parseSerialized: function() {
		var start = this.pos;
		this.skipValue();
		return this.source.substring(start,this.pos);
	}
	,parseValue: function() {
		var _gthis = this;
		var _g = this.source.charCodeAt(this.pos++);
		switch(_g) {
		case 34:
			return tink_json_Value.VString(tink_json__$Parser_JsonString_$Impl_$.toString(this.parseRestOfString()));
		case 46:
			this.pos--;
			var this1 = this.parseNumber();
			return tink_json_Value.VNumber(parseFloat(this1.source.substring(this1.min,this1.max)));
		case 91:
			var ret = [];
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				while(true) {
					ret.push(this.parseValue());
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var tmp1;
					if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
						this.pos += 1;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						tmp1 = true;
					} else {
						tmp1 = false;
					}
					if(!tmp1) {
						break;
					}
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
					this.pos += 1;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected ]");
				}
			}
			return tink_json_Value.VArray(ret);
		case 102:
			var e;
			var e1;
			if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 97 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 115 && this.source.charCodeAt(this.pos + 3) == 101) {
				this.pos += 4;
				e1 = true;
			} else {
				e1 = false;
			}
			if(!e1) {
				e = this.die("Expected alse");
			} else {
				e = null;
			}
			return tink_json_Value.VBool(false);
		case 110:
			var e2;
			var e3;
			if(this.max > this.pos + 2 && this.source.charCodeAt(this.pos) == 117 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 108) {
				this.pos += 3;
				e3 = true;
			} else {
				e3 = false;
			}
			if(!e3) {
				e2 = this.die("Expected ull");
			} else {
				e2 = null;
			}
			return tink_json_Value.VNull;
		case 116:
			var e4;
			var e5;
			if(this.max > this.pos + 2 && this.source.charCodeAt(this.pos) == 114 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 101) {
				this.pos += 3;
				e5 = true;
			} else {
				e5 = false;
			}
			if(!e5) {
				e4 = this.die("Expected rue");
			} else {
				e4 = null;
			}
			return tink_json_Value.VBool(true);
		case 123:
			var fields = [];
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp3;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp3 = true;
			} else {
				tmp3 = false;
			}
			if(!tmp3) {
				while(true) {
					if(_gthis.source.charCodeAt(_gthis.pos++) != 34) {
						_gthis.die("expected string",_gthis.pos - 1);
					}
					var tmp4 = tink_json__$Parser_JsonString_$Impl_$.toString(_gthis.parseRestOfString());
					var e6;
					while(_gthis.pos < _gthis.max && _gthis.source.charCodeAt(_gthis.pos) < 33) _gthis.pos++;
					var e7;
					if(_gthis.max > _gthis.pos && _gthis.source.charCodeAt(_gthis.pos) == 58) {
						_gthis.pos += 1;
						while(_gthis.pos < _gthis.max && _gthis.source.charCodeAt(_gthis.pos) < 33) _gthis.pos++;
						e7 = true;
					} else {
						e7 = false;
					}
					if(!e7) {
						e6 = _gthis.die("Expected :");
					} else {
						e6 = null;
					}
					fields.push(new tink_core_NamedWith(tmp4,_gthis.parseValue()));
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var tmp5;
					if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
						this.pos += 1;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						tmp5 = true;
					} else {
						tmp5 = false;
					}
					if(!tmp5) {
						break;
					}
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp6;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
					this.pos += 1;
					tmp6 = true;
				} else {
					tmp6 = false;
				}
				if(!tmp6) {
					this.die("Expected }");
				}
			}
			return tink_json_Value.VObject(fields);
		default:
			var v = _g;
			if(v < 58 && v > 47) {
				this.pos--;
				var this2 = this.parseNumber();
				return tink_json_Value.VNumber(parseFloat(this2.source.substring(this2.min,this2.max)));
			} else {
				var invalid = _g;
				return this.invalidChar(invalid);
			}
		}
	}
	,skipValue: function() {
		var _gthis = this;
		var _g = this.source.charCodeAt(this.pos++);
		switch(_g) {
		case 34:
			this.skipString();
			break;
		case 46:
			this.skipNumber(46);
			break;
		case 91:
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				return;
			}
			while(true) {
				this.skipValue();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp1;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp1 = true;
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp2;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
				this.pos += 1;
				tmp2 = true;
			} else {
				tmp2 = false;
			}
			if(!tmp2) {
				this.die("Expected ]");
			}
			break;
		case 102:
			var tmp3;
			if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 97 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 115 && this.source.charCodeAt(this.pos + 3) == 101) {
				this.pos += 4;
				tmp3 = true;
			} else {
				tmp3 = false;
			}
			if(!tmp3) {
				this.die("Expected alse");
			}
			break;
		case 110:
			var tmp4;
			if(this.max > this.pos + 2 && this.source.charCodeAt(this.pos) == 117 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 108) {
				this.pos += 3;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected ull");
			}
			break;
		case 116:
			var tmp5;
			if(this.max > this.pos + 2 && this.source.charCodeAt(this.pos) == 114 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 101) {
				this.pos += 3;
				tmp5 = true;
			} else {
				tmp5 = false;
			}
			if(!tmp5) {
				this.die("Expected rue");
			}
			break;
		case 123:
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp6;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp6 = true;
			} else {
				tmp6 = false;
			}
			if(tmp6) {
				return;
			}
			while(true) {
				if(_gthis.source.charCodeAt(_gthis.pos++) != 34) {
					_gthis.die("expected string",_gthis.pos - 1);
				}
				_gthis.skipString();
				while(_gthis.pos < _gthis.max && _gthis.source.charCodeAt(_gthis.pos) < 33) _gthis.pos++;
				var tmp7;
				if(_gthis.max > _gthis.pos && _gthis.source.charCodeAt(_gthis.pos) == 58) {
					_gthis.pos += 1;
					while(_gthis.pos < _gthis.max && _gthis.source.charCodeAt(_gthis.pos) < 33) _gthis.pos++;
					tmp7 = true;
				} else {
					tmp7 = false;
				}
				if(!tmp7) {
					_gthis.die("Expected :");
				}
				_gthis.skipValue();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp8;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp8 = true;
				} else {
					tmp8 = false;
				}
				if(!tmp8) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp9;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				tmp9 = true;
			} else {
				tmp9 = false;
			}
			if(!tmp9) {
				this.die("Expected }");
			}
			break;
		default:
			var v = _g;
			if(v < 58 && v > 47) {
				this.skipNumber(v);
			} else {
				var invalid = _g;
				this.invalidChar(invalid);
			}
		}
	}
	,invalidChar: function(c) {
		return this.die("invalid char " + StringTools.hex(c,2),this.pos - 1);
	}
	,die: function(s,pos,end) {
		if(pos == null) {
			pos = this.pos;
			end = pos;
		} else if(end == null) {
			end = this.pos;
		}
		if(end <= pos) {
			end = pos + 1;
		}
		var range = end > pos + 1 ? "characters " + pos + " - " + end : "character " + pos;
		var clip = function(s1,maxLength,left) {
			if(s1.length > maxLength) {
				if(left) {
					return "... " + HxOverrides.substr(s1,s1.length - maxLength,null);
				} else {
					return HxOverrides.substr(s1,0,maxLength) + " ...";
				}
			} else {
				return s1;
			}
		};
		var center = pos + end >> 1;
		var context = clip(this.source.substring(0,pos),20,true) + "  ---->  " + clip(this.source.substring(pos,center),20,false) + clip(this.source.substring(center,end),20,true) + "  <----  " + clip(this.source.substring(end),20,false);
		return tink_core_TypedError.withData(422,s + (" at " + range + " in " + context),{ source : this.source, start : pos, end : end},{ fileName : "Parser.hx", lineNumber : 320, className : "tink.json.BasicParser", methodName : "die"}).throwSelf();
	}
	,parseBool: function() {
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 116 && this.source.charCodeAt(this.pos + 1) == 114 && this.source.charCodeAt(this.pos + 2) == 117 && this.source.charCodeAt(this.pos + 3) == 101) {
			this.pos += 4;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			return true;
		} else {
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp1;
			if(this.max > this.pos + 4 && this.source.charCodeAt(this.pos) == 102 && this.source.charCodeAt(this.pos + 1) == 97 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 115 && this.source.charCodeAt(this.pos + 4) == 101) {
				this.pos += 5;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				return false;
			} else {
				return this.die("expected boolean value");
			}
		}
	}
	,__class__: tink_json_BasicParser
};
var tink_json_Parser0 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser0.__name__ = true;
tink_json_Parser0.__super__ = tink_json_BasicParser;
tink_json_Parser0.prototype = $extend(tink_json_BasicParser.prototype,{
	parse0: function() {
		var _gthis = this;
		var v_namedRanges = null;
		var v_properties = null;
		var v_sheets = null;
		var v_spreadsheetId = null;
		var v_spreadsheetUrl = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("spreadsheetUrl".length == __name__.max - __name__.min && __name__.source.startsWith("spreadsheetUrl",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_spreadsheetUrl1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_spreadsheetUrl1 = true;
					} else {
						v_spreadsheetUrl1 = false;
					}
					if(v_spreadsheetUrl1) {
						v_spreadsheetUrl = null;
					} else {
						v_spreadsheetUrl = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("spreadsheetId".length == __name__.max - __name__.min && __name__.source.startsWith("spreadsheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_spreadsheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_spreadsheetId1 = true;
					} else {
						v_spreadsheetId1 = false;
					}
					if(v_spreadsheetId1) {
						v_spreadsheetId = null;
					} else {
						v_spreadsheetId = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("sheets".length == __name__.max - __name__.min && __name__.source.startsWith("sheets",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sheets1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sheets1 = true;
					} else {
						v_sheets1 = false;
					}
					if(v_sheets1) {
						v_sheets = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_sheets2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_sheets2 = true;
						} else {
							v_sheets2 = false;
						}
						if(!v_sheets2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_sheets3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_sheets3 = true;
						} else {
							v_sheets3 = false;
						}
						if(!v_sheets3) {
							while(true) {
								__ret.push(this.parse13());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_sheets4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_sheets4 = true;
								} else {
									v_sheets4 = false;
								}
								if(!v_sheets4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_sheets5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_sheets5 = true;
							} else {
								v_sheets5 = false;
							}
							if(!v_sheets5) {
								this.die("Expected ]");
							}
						}
						v_sheets = __ret;
					}
				} else if("properties".length == __name__.max - __name__.min && __name__.source.startsWith("properties",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_properties1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_properties1 = true;
					} else {
						v_properties1 = false;
					}
					if(v_properties1) {
						v_properties = null;
					} else {
						v_properties = this.parse3();
					}
				} else if("namedRanges".length == __name__.max - __name__.min && __name__.source.startsWith("namedRanges",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_namedRanges1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_namedRanges1 = true;
					} else {
						v_namedRanges1 = false;
					}
					if(v_namedRanges1) {
						v_namedRanges = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_namedRanges2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_namedRanges2 = true;
						} else {
							v_namedRanges2 = false;
						}
						if(!v_namedRanges2) {
							this.die("Expected [");
						}
						var __ret1 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_namedRanges3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_namedRanges3 = true;
						} else {
							v_namedRanges3 = false;
						}
						if(!v_namedRanges3) {
							while(true) {
								__ret1.push(this.parse1());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_namedRanges4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_namedRanges4 = true;
								} else {
									v_namedRanges4 = false;
								}
								if(!v_namedRanges4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_namedRanges5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_namedRanges5 = true;
							} else {
								v_namedRanges5 = false;
							}
							if(!v_namedRanges5) {
								this.die("Expected ]");
							}
						}
						v_namedRanges = __ret1;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { namedRanges : v_namedRanges, properties : v_properties, sheets : v_sheets, spreadsheetId : v_spreadsheetId, spreadsheetUrl : v_spreadsheetUrl};
	}
	,parse1: function() {
		var _gthis = this;
		var v_name = null;
		var v_namedRangeId = null;
		var v_range = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("range".length == __name__.max - __name__.min && __name__.source.startsWith("range",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_range1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_range1 = true;
					} else {
						v_range1 = false;
					}
					if(v_range1) {
						v_range = null;
					} else {
						v_range = this.parse2();
					}
				} else if("namedRangeId".length == __name__.max - __name__.min && __name__.source.startsWith("namedRangeId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_namedRangeId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_namedRangeId1 = true;
					} else {
						v_namedRangeId1 = false;
					}
					if(v_namedRangeId1) {
						v_namedRangeId = null;
					} else {
						v_namedRangeId = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("name".length == __name__.max - __name__.min && __name__.source.startsWith("name",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_name1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_name1 = true;
					} else {
						v_name1 = false;
					}
					if(v_name1) {
						v_name = null;
					} else {
						v_name = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { name : v_name, namedRangeId : v_namedRangeId, range : v_range};
	}
	,parse2: function() {
		var _gthis = this;
		var v_endColumnIndex = null;
		var v_endRowIndex = null;
		var v_sheetId = null;
		var v_startColumnIndex = null;
		var v_startRowIndex = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("startRowIndex".length == __name__.max - __name__.min && __name__.source.startsWith("startRowIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_startRowIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_startRowIndex1 = true;
					} else {
						v_startRowIndex1 = false;
					}
					if(v_startRowIndex1) {
						v_startRowIndex = null;
					} else {
						var this1 = this.parseNumber();
						v_startRowIndex = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("startColumnIndex".length == __name__.max - __name__.min && __name__.source.startsWith("startColumnIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_startColumnIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_startColumnIndex1 = true;
					} else {
						v_startColumnIndex1 = false;
					}
					if(v_startColumnIndex1) {
						v_startColumnIndex = null;
					} else {
						var this2 = this.parseNumber();
						v_startColumnIndex = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("sheetId".length == __name__.max - __name__.min && __name__.source.startsWith("sheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sheetId1 = true;
					} else {
						v_sheetId1 = false;
					}
					if(v_sheetId1) {
						v_sheetId = null;
					} else {
						var this3 = this.parseNumber();
						v_sheetId = Std.parseInt(this3.source.substring(this3.min,this3.max));
					}
				} else if("endRowIndex".length == __name__.max - __name__.min && __name__.source.startsWith("endRowIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_endRowIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_endRowIndex1 = true;
					} else {
						v_endRowIndex1 = false;
					}
					if(v_endRowIndex1) {
						v_endRowIndex = null;
					} else {
						var this4 = this.parseNumber();
						v_endRowIndex = Std.parseInt(this4.source.substring(this4.min,this4.max));
					}
				} else if("endColumnIndex".length == __name__.max - __name__.min && __name__.source.startsWith("endColumnIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_endColumnIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_endColumnIndex1 = true;
					} else {
						v_endColumnIndex1 = false;
					}
					if(v_endColumnIndex1) {
						v_endColumnIndex = null;
					} else {
						var this5 = this.parseNumber();
						v_endColumnIndex = Std.parseInt(this5.source.substring(this5.min,this5.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { endColumnIndex : v_endColumnIndex, endRowIndex : v_endRowIndex, sheetId : v_sheetId, startColumnIndex : v_startColumnIndex, startRowIndex : v_startRowIndex};
	}
	,parse3: function() {
		var _gthis = this;
		var v_autoRecalc = null;
		var v_defaultFormat = null;
		var v_iterativeCalculationSettings = null;
		var v_locale = null;
		var v_timeZone = null;
		var v_title = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("title".length == __name__.max - __name__.min && __name__.source.startsWith("title",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_title1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_title1 = true;
					} else {
						v_title1 = false;
					}
					if(v_title1) {
						v_title = null;
					} else {
						v_title = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("timeZone".length == __name__.max - __name__.min && __name__.source.startsWith("timeZone",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_timeZone1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_timeZone1 = true;
					} else {
						v_timeZone1 = false;
					}
					if(v_timeZone1) {
						v_timeZone = null;
					} else {
						v_timeZone = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("locale".length == __name__.max - __name__.min && __name__.source.startsWith("locale",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_locale1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_locale1 = true;
					} else {
						v_locale1 = false;
					}
					if(v_locale1) {
						v_locale = null;
					} else {
						v_locale = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("iterativeCalculationSettings".length == __name__.max - __name__.min && __name__.source.startsWith("iterativeCalculationSettings",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_iterativeCalculationSettings1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_iterativeCalculationSettings1 = true;
					} else {
						v_iterativeCalculationSettings1 = false;
					}
					if(v_iterativeCalculationSettings1) {
						v_iterativeCalculationSettings = null;
					} else {
						v_iterativeCalculationSettings = this.parse12();
					}
				} else if("defaultFormat".length == __name__.max - __name__.min && __name__.source.startsWith("defaultFormat",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_defaultFormat1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_defaultFormat1 = true;
					} else {
						v_defaultFormat1 = false;
					}
					if(v_defaultFormat1) {
						v_defaultFormat = null;
					} else {
						v_defaultFormat = this.parse4();
					}
				} else if("autoRecalc".length == __name__.max - __name__.min && __name__.source.startsWith("autoRecalc",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_autoRecalc1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_autoRecalc1 = true;
					} else {
						v_autoRecalc1 = false;
					}
					if(v_autoRecalc1) {
						v_autoRecalc = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "HOUR":case "MINUTE":case "ON_CHANGE":case "RECALCULATION_INTERVAL_UNSPECIFIED":
							v_autoRecalc = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse3"}));
						}
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { autoRecalc : v_autoRecalc, defaultFormat : v_defaultFormat, iterativeCalculationSettings : v_iterativeCalculationSettings, locale : v_locale, timeZone : v_timeZone, title : v_title};
	}
	,parse4: function() {
		var _gthis = this;
		var v_backgroundColor = null;
		var v_borders = null;
		var v_horizontalAlignment = null;
		var v_hyperlinkDisplayType = null;
		var v_numberFormat = null;
		var v_padding = null;
		var v_textDirection = null;
		var v_textFormat = null;
		var v_textRotation = null;
		var v_verticalAlignment = null;
		var v_wrapStrategy = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("wrapStrategy".length == __name__.max - __name__.min && __name__.source.startsWith("wrapStrategy",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_wrapStrategy1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_wrapStrategy1 = true;
					} else {
						v_wrapStrategy1 = false;
					}
					if(v_wrapStrategy1) {
						v_wrapStrategy = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "CLIP":case "LEGACY_WRAP":case "OVERFLOW_CELL":case "WRAP":case "WRAP_STRATEGY_UNSPECIFIED":
							v_wrapStrategy = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse4"}));
						}
					}
				} else if("verticalAlignment".length == __name__.max - __name__.min && __name__.source.startsWith("verticalAlignment",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_verticalAlignment1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_verticalAlignment1 = true;
					} else {
						v_verticalAlignment1 = false;
					}
					if(v_verticalAlignment1) {
						v_verticalAlignment = null;
					} else {
						var v1 = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v1) {
						case "BOTTOM":case "MIDDLE":case "TOP":case "VERTICAL_ALIGN_UNSPECIFIED":
							v_verticalAlignment = v1;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v1,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse4"}));
						}
					}
				} else if("textRotation".length == __name__.max - __name__.min && __name__.source.startsWith("textRotation",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_textRotation1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_textRotation1 = true;
					} else {
						v_textRotation1 = false;
					}
					if(v_textRotation1) {
						v_textRotation = null;
					} else {
						v_textRotation = this.parse11();
					}
				} else if("textFormat".length == __name__.max - __name__.min && __name__.source.startsWith("textFormat",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_textFormat1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_textFormat1 = true;
					} else {
						v_textFormat1 = false;
					}
					if(v_textFormat1) {
						v_textFormat = null;
					} else {
						v_textFormat = this.parse10();
					}
				} else if("textDirection".length == __name__.max - __name__.min && __name__.source.startsWith("textDirection",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_textDirection1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_textDirection1 = true;
					} else {
						v_textDirection1 = false;
					}
					if(v_textDirection1) {
						v_textDirection = null;
					} else {
						var v2 = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v2) {
						case "LEFT_TO_RIGHT":case "RIGHT_TO_LEFT":case "TEXT_DIRECTION_UNSPECIFIED":
							v_textDirection = v2;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v2,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse4"}));
						}
					}
				} else if("padding".length == __name__.max - __name__.min && __name__.source.startsWith("padding",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_padding1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_padding1 = true;
					} else {
						v_padding1 = false;
					}
					if(v_padding1) {
						v_padding = null;
					} else {
						v_padding = this.parse9();
					}
				} else if("numberFormat".length == __name__.max - __name__.min && __name__.source.startsWith("numberFormat",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_numberFormat1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_numberFormat1 = true;
					} else {
						v_numberFormat1 = false;
					}
					if(v_numberFormat1) {
						v_numberFormat = null;
					} else {
						v_numberFormat = this.parse8();
					}
				} else if("hyperlinkDisplayType".length == __name__.max - __name__.min && __name__.source.startsWith("hyperlinkDisplayType",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hyperlinkDisplayType1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hyperlinkDisplayType1 = true;
					} else {
						v_hyperlinkDisplayType1 = false;
					}
					if(v_hyperlinkDisplayType1) {
						v_hyperlinkDisplayType = null;
					} else {
						var v3 = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v3) {
						case "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED":case "LINKED":case "PLAIN_TEXT":
							v_hyperlinkDisplayType = v3;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v3,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse4"}));
						}
					}
				} else if("horizontalAlignment".length == __name__.max - __name__.min && __name__.source.startsWith("horizontalAlignment",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_horizontalAlignment1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_horizontalAlignment1 = true;
					} else {
						v_horizontalAlignment1 = false;
					}
					if(v_horizontalAlignment1) {
						v_horizontalAlignment = null;
					} else {
						var v4 = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v4) {
						case "CENTER":case "HORIZONTAL_ALIGN_UNSPECIFIED":case "LEFT":case "RIGHT":
							v_horizontalAlignment = v4;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v4,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse4"}));
						}
					}
				} else if("borders".length == __name__.max - __name__.min && __name__.source.startsWith("borders",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_borders1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_borders1 = true;
					} else {
						v_borders1 = false;
					}
					if(v_borders1) {
						v_borders = null;
					} else {
						v_borders = this.parse6();
					}
				} else if("backgroundColor".length == __name__.max - __name__.min && __name__.source.startsWith("backgroundColor",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_backgroundColor1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_backgroundColor1 = true;
					} else {
						v_backgroundColor1 = false;
					}
					if(v_backgroundColor1) {
						v_backgroundColor = null;
					} else {
						v_backgroundColor = this.parse5();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { backgroundColor : v_backgroundColor, borders : v_borders, horizontalAlignment : v_horizontalAlignment, hyperlinkDisplayType : v_hyperlinkDisplayType, numberFormat : v_numberFormat, padding : v_padding, textDirection : v_textDirection, textFormat : v_textFormat, textRotation : v_textRotation, verticalAlignment : v_verticalAlignment, wrapStrategy : v_wrapStrategy};
	}
	,parse5: function() {
		var _gthis = this;
		var v_alpha = null;
		var v_blue = null;
		var v_green = null;
		var v_red = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("red".length == __name__.max - __name__.min && __name__.source.startsWith("red",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_red1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_red1 = true;
					} else {
						v_red1 = false;
					}
					if(v_red1) {
						v_red = null;
					} else {
						var this1 = this.parseNumber();
						v_red = parseFloat(this1.source.substring(this1.min,this1.max));
					}
				} else if("green".length == __name__.max - __name__.min && __name__.source.startsWith("green",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_green1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_green1 = true;
					} else {
						v_green1 = false;
					}
					if(v_green1) {
						v_green = null;
					} else {
						var this2 = this.parseNumber();
						v_green = parseFloat(this2.source.substring(this2.min,this2.max));
					}
				} else if("blue".length == __name__.max - __name__.min && __name__.source.startsWith("blue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_blue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_blue1 = true;
					} else {
						v_blue1 = false;
					}
					if(v_blue1) {
						v_blue = null;
					} else {
						var this3 = this.parseNumber();
						v_blue = parseFloat(this3.source.substring(this3.min,this3.max));
					}
				} else if("alpha".length == __name__.max - __name__.min && __name__.source.startsWith("alpha",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_alpha1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_alpha1 = true;
					} else {
						v_alpha1 = false;
					}
					if(v_alpha1) {
						v_alpha = null;
					} else {
						var this4 = this.parseNumber();
						v_alpha = parseFloat(this4.source.substring(this4.min,this4.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { alpha : v_alpha, blue : v_blue, green : v_green, red : v_red};
	}
	,parse6: function() {
		var _gthis = this;
		var v_bottom = null;
		var v_left = null;
		var v_right = null;
		var v_top = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("top".length == __name__.max - __name__.min && __name__.source.startsWith("top",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_top1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_top1 = true;
					} else {
						v_top1 = false;
					}
					if(v_top1) {
						v_top = null;
					} else {
						v_top = this.parse7();
					}
				} else if("right".length == __name__.max - __name__.min && __name__.source.startsWith("right",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_right1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_right1 = true;
					} else {
						v_right1 = false;
					}
					if(v_right1) {
						v_right = null;
					} else {
						v_right = this.parse7();
					}
				} else if("left".length == __name__.max - __name__.min && __name__.source.startsWith("left",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_left1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_left1 = true;
					} else {
						v_left1 = false;
					}
					if(v_left1) {
						v_left = null;
					} else {
						v_left = this.parse7();
					}
				} else if("bottom".length == __name__.max - __name__.min && __name__.source.startsWith("bottom",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_bottom1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_bottom1 = true;
					} else {
						v_bottom1 = false;
					}
					if(v_bottom1) {
						v_bottom = null;
					} else {
						v_bottom = this.parse7();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { bottom : v_bottom, left : v_left, right : v_right, top : v_top};
	}
	,parse7: function() {
		var _gthis = this;
		var v_color = null;
		var v_style = null;
		var v_width = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("width".length == __name__.max - __name__.min && __name__.source.startsWith("width",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_width1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_width1 = true;
					} else {
						v_width1 = false;
					}
					if(v_width1) {
						v_width = null;
					} else {
						var this1 = this.parseNumber();
						v_width = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("style".length == __name__.max - __name__.min && __name__.source.startsWith("style",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_style1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_style1 = true;
					} else {
						v_style1 = false;
					}
					if(v_style1) {
						v_style = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "DASHED":case "DOTTED":case "DOUBLE":case "NONE":case "SOLID":case "SOLID_MEDIUM":case "SOLID_THICK":case "STYLE_UNSPECIFIED":
							v_style = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse7"}));
						}
					}
				} else if("color".length == __name__.max - __name__.min && __name__.source.startsWith("color",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_color1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_color1 = true;
					} else {
						v_color1 = false;
					}
					if(v_color1) {
						v_color = null;
					} else {
						v_color = this.parse5();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { color : v_color, style : v_style, width : v_width};
	}
	,parse8: function() {
		var _gthis = this;
		var v_pattern = null;
		var v_type = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("type".length == __name__.max - __name__.min && __name__.source.startsWith("type",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_type1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_type1 = true;
					} else {
						v_type1 = false;
					}
					if(v_type1) {
						v_type = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "CURRENCY":case "DATE":case "DATE_TIME":case "NUMBER":case "NUMBER_FORMAT_TYPE_UNSPECIFIED":case "PERCENT":case "SCIENTIFIC":case "TEXT":case "TIME":
							v_type = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse8"}));
						}
					}
				} else if("pattern".length == __name__.max - __name__.min && __name__.source.startsWith("pattern",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_pattern1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_pattern1 = true;
					} else {
						v_pattern1 = false;
					}
					if(v_pattern1) {
						v_pattern = null;
					} else {
						v_pattern = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { pattern : v_pattern, type : v_type};
	}
	,parse9: function() {
		var _gthis = this;
		var v_bottom = null;
		var v_left = null;
		var v_right = null;
		var v_top = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("top".length == __name__.max - __name__.min && __name__.source.startsWith("top",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_top1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_top1 = true;
					} else {
						v_top1 = false;
					}
					if(v_top1) {
						v_top = null;
					} else {
						var this1 = this.parseNumber();
						v_top = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("right".length == __name__.max - __name__.min && __name__.source.startsWith("right",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_right1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_right1 = true;
					} else {
						v_right1 = false;
					}
					if(v_right1) {
						v_right = null;
					} else {
						var this2 = this.parseNumber();
						v_right = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("left".length == __name__.max - __name__.min && __name__.source.startsWith("left",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_left1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_left1 = true;
					} else {
						v_left1 = false;
					}
					if(v_left1) {
						v_left = null;
					} else {
						var this3 = this.parseNumber();
						v_left = Std.parseInt(this3.source.substring(this3.min,this3.max));
					}
				} else if("bottom".length == __name__.max - __name__.min && __name__.source.startsWith("bottom",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_bottom1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_bottom1 = true;
					} else {
						v_bottom1 = false;
					}
					if(v_bottom1) {
						v_bottom = null;
					} else {
						var this4 = this.parseNumber();
						v_bottom = Std.parseInt(this4.source.substring(this4.min,this4.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { bottom : v_bottom, left : v_left, right : v_right, top : v_top};
	}
	,parse10: function() {
		var _gthis = this;
		var v_bold = null;
		var v_fontFamily = null;
		var v_fontSize = null;
		var v_foregroundColor = null;
		var v_italic = null;
		var v_strikethrough = null;
		var v_underline = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("underline".length == __name__.max - __name__.min && __name__.source.startsWith("underline",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_underline1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_underline1 = true;
					} else {
						v_underline1 = false;
					}
					if(v_underline1) {
						v_underline = null;
					} else {
						v_underline = this.parseBool();
					}
				} else if("strikethrough".length == __name__.max - __name__.min && __name__.source.startsWith("strikethrough",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_strikethrough1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_strikethrough1 = true;
					} else {
						v_strikethrough1 = false;
					}
					if(v_strikethrough1) {
						v_strikethrough = null;
					} else {
						v_strikethrough = this.parseBool();
					}
				} else if("italic".length == __name__.max - __name__.min && __name__.source.startsWith("italic",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_italic1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_italic1 = true;
					} else {
						v_italic1 = false;
					}
					if(v_italic1) {
						v_italic = null;
					} else {
						v_italic = this.parseBool();
					}
				} else if("foregroundColor".length == __name__.max - __name__.min && __name__.source.startsWith("foregroundColor",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_foregroundColor1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_foregroundColor1 = true;
					} else {
						v_foregroundColor1 = false;
					}
					if(v_foregroundColor1) {
						v_foregroundColor = null;
					} else {
						v_foregroundColor = this.parse5();
					}
				} else if("fontSize".length == __name__.max - __name__.min && __name__.source.startsWith("fontSize",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_fontSize1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_fontSize1 = true;
					} else {
						v_fontSize1 = false;
					}
					if(v_fontSize1) {
						v_fontSize = null;
					} else {
						var this1 = this.parseNumber();
						v_fontSize = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("fontFamily".length == __name__.max - __name__.min && __name__.source.startsWith("fontFamily",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_fontFamily1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_fontFamily1 = true;
					} else {
						v_fontFamily1 = false;
					}
					if(v_fontFamily1) {
						v_fontFamily = null;
					} else {
						v_fontFamily = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("bold".length == __name__.max - __name__.min && __name__.source.startsWith("bold",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_bold1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_bold1 = true;
					} else {
						v_bold1 = false;
					}
					if(v_bold1) {
						v_bold = null;
					} else {
						v_bold = this.parseBool();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { bold : v_bold, fontFamily : v_fontFamily, fontSize : v_fontSize, foregroundColor : v_foregroundColor, italic : v_italic, strikethrough : v_strikethrough, underline : v_underline};
	}
	,parse11: function() {
		var _gthis = this;
		var v_angle = null;
		var v_vertical = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("vertical".length == __name__.max - __name__.min && __name__.source.startsWith("vertical",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_vertical1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_vertical1 = true;
					} else {
						v_vertical1 = false;
					}
					if(v_vertical1) {
						v_vertical = null;
					} else {
						v_vertical = this.parseBool();
					}
				} else if("angle".length == __name__.max - __name__.min && __name__.source.startsWith("angle",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_angle1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_angle1 = true;
					} else {
						v_angle1 = false;
					}
					if(v_angle1) {
						v_angle = null;
					} else {
						var this1 = this.parseNumber();
						v_angle = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { angle : v_angle, vertical : v_vertical};
	}
	,parse12: function() {
		var _gthis = this;
		var v_convergenceThreshold = null;
		var v_maxIterations = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("maxIterations".length == __name__.max - __name__.min && __name__.source.startsWith("maxIterations",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_maxIterations1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_maxIterations1 = true;
					} else {
						v_maxIterations1 = false;
					}
					if(v_maxIterations1) {
						v_maxIterations = null;
					} else {
						var this1 = this.parseNumber();
						v_maxIterations = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("convergenceThreshold".length == __name__.max - __name__.min && __name__.source.startsWith("convergenceThreshold",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_convergenceThreshold1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_convergenceThreshold1 = true;
					} else {
						v_convergenceThreshold1 = false;
					}
					if(v_convergenceThreshold1) {
						v_convergenceThreshold = null;
					} else {
						var this2 = this.parseNumber();
						v_convergenceThreshold = parseFloat(this2.source.substring(this2.min,this2.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { convergenceThreshold : v_convergenceThreshold, maxIterations : v_maxIterations};
	}
	,parse13: function() {
		var _gthis = this;
		var v_bandedRanges = null;
		var v_basicFilter = null;
		var v_charts = null;
		var v_conditionalFormats = null;
		var v_data = null;
		var v_filterViews = null;
		var v_merges = null;
		var v_properties = null;
		var v_protectedRanges = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("protectedRanges".length == __name__.max - __name__.min && __name__.source.startsWith("protectedRanges",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_protectedRanges1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_protectedRanges1 = true;
					} else {
						v_protectedRanges1 = false;
					}
					if(v_protectedRanges1) {
						v_protectedRanges = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_protectedRanges2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_protectedRanges2 = true;
						} else {
							v_protectedRanges2 = false;
						}
						if(!v_protectedRanges2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_protectedRanges3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_protectedRanges3 = true;
						} else {
							v_protectedRanges3 = false;
						}
						if(!v_protectedRanges3) {
							while(true) {
								__ret.push(this.parse54());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_protectedRanges4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_protectedRanges4 = true;
								} else {
									v_protectedRanges4 = false;
								}
								if(!v_protectedRanges4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_protectedRanges5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_protectedRanges5 = true;
							} else {
								v_protectedRanges5 = false;
							}
							if(!v_protectedRanges5) {
								this.die("Expected ]");
							}
						}
						v_protectedRanges = __ret;
					}
				} else if("properties".length == __name__.max - __name__.min && __name__.source.startsWith("properties",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_properties1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_properties1 = true;
					} else {
						v_properties1 = false;
					}
					if(v_properties1) {
						v_properties = null;
					} else {
						v_properties = this.parse52();
					}
				} else if("merges".length == __name__.max - __name__.min && __name__.source.startsWith("merges",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_merges1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_merges1 = true;
					} else {
						v_merges1 = false;
					}
					if(v_merges1) {
						v_merges = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_merges2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_merges2 = true;
						} else {
							v_merges2 = false;
						}
						if(!v_merges2) {
							this.die("Expected [");
						}
						var __ret1 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_merges3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_merges3 = true;
						} else {
							v_merges3 = false;
						}
						if(!v_merges3) {
							while(true) {
								__ret1.push(this.parse2());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_merges4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_merges4 = true;
								} else {
									v_merges4 = false;
								}
								if(!v_merges4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_merges5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_merges5 = true;
							} else {
								v_merges5 = false;
							}
							if(!v_merges5) {
								this.die("Expected ]");
							}
						}
						v_merges = __ret1;
					}
				} else if("filterViews".length == __name__.max - __name__.min && __name__.source.startsWith("filterViews",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_filterViews1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_filterViews1 = true;
					} else {
						v_filterViews1 = false;
					}
					if(v_filterViews1) {
						v_filterViews = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_filterViews2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_filterViews2 = true;
						} else {
							v_filterViews2 = false;
						}
						if(!v_filterViews2) {
							this.die("Expected [");
						}
						var __ret2 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_filterViews3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_filterViews3 = true;
						} else {
							v_filterViews3 = false;
						}
						if(!v_filterViews3) {
							while(true) {
								__ret2.push(this.parse51());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_filterViews4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_filterViews4 = true;
								} else {
									v_filterViews4 = false;
								}
								if(!v_filterViews4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_filterViews5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_filterViews5 = true;
							} else {
								v_filterViews5 = false;
							}
							if(!v_filterViews5) {
								this.die("Expected ]");
							}
						}
						v_filterViews = __ret2;
					}
				} else if("data".length == __name__.max - __name__.min && __name__.source.startsWith("data",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_data1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_data1 = true;
					} else {
						v_data1 = false;
					}
					if(v_data1) {
						v_data = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_data2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_data2 = true;
						} else {
							v_data2 = false;
						}
						if(!v_data2) {
							this.die("Expected [");
						}
						var __ret3 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_data3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_data3 = true;
						} else {
							v_data3 = false;
						}
						if(!v_data3) {
							while(true) {
								__ret3.push(this.parse37());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_data4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_data4 = true;
								} else {
									v_data4 = false;
								}
								if(!v_data4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_data5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_data5 = true;
							} else {
								v_data5 = false;
							}
							if(!v_data5) {
								this.die("Expected ]");
							}
						}
						v_data = __ret3;
					}
				} else if("conditionalFormats".length == __name__.max - __name__.min && __name__.source.startsWith("conditionalFormats",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_conditionalFormats1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_conditionalFormats1 = true;
					} else {
						v_conditionalFormats1 = false;
					}
					if(v_conditionalFormats1) {
						v_conditionalFormats = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_conditionalFormats2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_conditionalFormats2 = true;
						} else {
							v_conditionalFormats2 = false;
						}
						if(!v_conditionalFormats2) {
							this.die("Expected [");
						}
						var __ret4 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_conditionalFormats3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_conditionalFormats3 = true;
						} else {
							v_conditionalFormats3 = false;
						}
						if(!v_conditionalFormats3) {
							while(true) {
								__ret4.push(this.parse33());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_conditionalFormats4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_conditionalFormats4 = true;
								} else {
									v_conditionalFormats4 = false;
								}
								if(!v_conditionalFormats4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_conditionalFormats5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_conditionalFormats5 = true;
							} else {
								v_conditionalFormats5 = false;
							}
							if(!v_conditionalFormats5) {
								this.die("Expected ]");
							}
						}
						v_conditionalFormats = __ret4;
					}
				} else if("charts".length == __name__.max - __name__.min && __name__.source.startsWith("charts",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_charts1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_charts1 = true;
					} else {
						v_charts1 = false;
					}
					if(v_charts1) {
						v_charts = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_charts2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_charts2 = true;
						} else {
							v_charts2 = false;
						}
						if(!v_charts2) {
							this.die("Expected [");
						}
						var __ret5 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_charts3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_charts3 = true;
						} else {
							v_charts3 = false;
						}
						if(!v_charts3) {
							while(true) {
								__ret5.push(this.parse21());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_charts4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_charts4 = true;
								} else {
									v_charts4 = false;
								}
								if(!v_charts4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_charts5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_charts5 = true;
							} else {
								v_charts5 = false;
							}
							if(!v_charts5) {
								this.die("Expected ]");
							}
						}
						v_charts = __ret5;
					}
				} else if("basicFilter".length == __name__.max - __name__.min && __name__.source.startsWith("basicFilter",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_basicFilter1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_basicFilter1 = true;
					} else {
						v_basicFilter1 = false;
					}
					if(v_basicFilter1) {
						v_basicFilter = null;
					} else {
						v_basicFilter = this.parse16();
					}
				} else if("bandedRanges".length == __name__.max - __name__.min && __name__.source.startsWith("bandedRanges",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_bandedRanges1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_bandedRanges1 = true;
					} else {
						v_bandedRanges1 = false;
					}
					if(v_bandedRanges1) {
						v_bandedRanges = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_bandedRanges2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_bandedRanges2 = true;
						} else {
							v_bandedRanges2 = false;
						}
						if(!v_bandedRanges2) {
							this.die("Expected [");
						}
						var __ret6 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_bandedRanges3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_bandedRanges3 = true;
						} else {
							v_bandedRanges3 = false;
						}
						if(!v_bandedRanges3) {
							while(true) {
								__ret6.push(this.parse14());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_bandedRanges4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_bandedRanges4 = true;
								} else {
									v_bandedRanges4 = false;
								}
								if(!v_bandedRanges4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_bandedRanges5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_bandedRanges5 = true;
							} else {
								v_bandedRanges5 = false;
							}
							if(!v_bandedRanges5) {
								this.die("Expected ]");
							}
						}
						v_bandedRanges = __ret6;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { bandedRanges : v_bandedRanges, basicFilter : v_basicFilter, charts : v_charts, conditionalFormats : v_conditionalFormats, data : v_data, filterViews : v_filterViews, merges : v_merges, properties : v_properties, protectedRanges : v_protectedRanges};
	}
	,parse14: function() {
		var _gthis = this;
		var v_bandedRangeId = null;
		var v_columnProperties = null;
		var v_range = null;
		var v_rowProperties = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("rowProperties".length == __name__.max - __name__.min && __name__.source.startsWith("rowProperties",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rowProperties1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rowProperties1 = true;
					} else {
						v_rowProperties1 = false;
					}
					if(v_rowProperties1) {
						v_rowProperties = null;
					} else {
						v_rowProperties = this.parse15();
					}
				} else if("range".length == __name__.max - __name__.min && __name__.source.startsWith("range",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_range1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_range1 = true;
					} else {
						v_range1 = false;
					}
					if(v_range1) {
						v_range = null;
					} else {
						v_range = this.parse2();
					}
				} else if("columnProperties".length == __name__.max - __name__.min && __name__.source.startsWith("columnProperties",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_columnProperties1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_columnProperties1 = true;
					} else {
						v_columnProperties1 = false;
					}
					if(v_columnProperties1) {
						v_columnProperties = null;
					} else {
						v_columnProperties = this.parse15();
					}
				} else if("bandedRangeId".length == __name__.max - __name__.min && __name__.source.startsWith("bandedRangeId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_bandedRangeId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_bandedRangeId1 = true;
					} else {
						v_bandedRangeId1 = false;
					}
					if(v_bandedRangeId1) {
						v_bandedRangeId = null;
					} else {
						var this1 = this.parseNumber();
						v_bandedRangeId = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { bandedRangeId : v_bandedRangeId, columnProperties : v_columnProperties, range : v_range, rowProperties : v_rowProperties};
	}
	,parse15: function() {
		var _gthis = this;
		var v_firstBandColor = null;
		var v_footerColor = null;
		var v_headerColor = null;
		var v_secondBandColor = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("secondBandColor".length == __name__.max - __name__.min && __name__.source.startsWith("secondBandColor",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_secondBandColor1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_secondBandColor1 = true;
					} else {
						v_secondBandColor1 = false;
					}
					if(v_secondBandColor1) {
						v_secondBandColor = null;
					} else {
						v_secondBandColor = this.parse5();
					}
				} else if("headerColor".length == __name__.max - __name__.min && __name__.source.startsWith("headerColor",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_headerColor1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_headerColor1 = true;
					} else {
						v_headerColor1 = false;
					}
					if(v_headerColor1) {
						v_headerColor = null;
					} else {
						v_headerColor = this.parse5();
					}
				} else if("footerColor".length == __name__.max - __name__.min && __name__.source.startsWith("footerColor",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_footerColor1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_footerColor1 = true;
					} else {
						v_footerColor1 = false;
					}
					if(v_footerColor1) {
						v_footerColor = null;
					} else {
						v_footerColor = this.parse5();
					}
				} else if("firstBandColor".length == __name__.max - __name__.min && __name__.source.startsWith("firstBandColor",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_firstBandColor1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_firstBandColor1 = true;
					} else {
						v_firstBandColor1 = false;
					}
					if(v_firstBandColor1) {
						v_firstBandColor = null;
					} else {
						v_firstBandColor = this.parse5();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { firstBandColor : v_firstBandColor, footerColor : v_footerColor, headerColor : v_headerColor, secondBandColor : v_secondBandColor};
	}
	,parse16: function() {
		var _gthis = this;
		var v_criteria = null;
		var v_range = null;
		var v_sortSpecs = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("sortSpecs".length == __name__.max - __name__.min && __name__.source.startsWith("sortSpecs",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sortSpecs1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sortSpecs1 = true;
					} else {
						v_sortSpecs1 = false;
					}
					if(v_sortSpecs1) {
						v_sortSpecs = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_sortSpecs2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_sortSpecs2 = true;
						} else {
							v_sortSpecs2 = false;
						}
						if(!v_sortSpecs2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_sortSpecs3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_sortSpecs3 = true;
						} else {
							v_sortSpecs3 = false;
						}
						if(!v_sortSpecs3) {
							while(true) {
								__ret.push(this.parse20());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_sortSpecs4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_sortSpecs4 = true;
								} else {
									v_sortSpecs4 = false;
								}
								if(!v_sortSpecs4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_sortSpecs5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_sortSpecs5 = true;
							} else {
								v_sortSpecs5 = false;
							}
							if(!v_sortSpecs5) {
								this.die("Expected ]");
							}
						}
						v_sortSpecs = __ret;
					}
				} else if("range".length == __name__.max - __name__.min && __name__.source.startsWith("range",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_range1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_range1 = true;
					} else {
						v_range1 = false;
					}
					if(v_range1) {
						v_range = null;
					} else {
						v_range = this.parse2();
					}
				} else if("criteria".length == __name__.max - __name__.min && __name__.source.startsWith("criteria",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_criteria1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_criteria1 = true;
					} else {
						v_criteria1 = false;
					}
					if(v_criteria1) {
						v_criteria = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_criteria2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_criteria2 = true;
						} else {
							v_criteria2 = false;
						}
						if(!v_criteria2) {
							this.die("Expected {");
						}
						var this1 = { };
						var __ret1 = this1;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_criteria3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_criteria3 = true;
						} else {
							v_criteria3 = false;
						}
						if(!v_criteria3) {
							while(true) {
								var key = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
								var e;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var e1;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									e1 = true;
								} else {
									e1 = false;
								}
								if(!e1) {
									e = this.die("Expected :");
								} else {
									e = null;
								}
								__ret1[key] = this.parse17();
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_criteria4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_criteria4 = true;
								} else {
									v_criteria4 = false;
								}
								if(!v_criteria4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_criteria5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_criteria5 = true;
							} else {
								v_criteria5 = false;
							}
							if(!v_criteria5) {
								this.die("Expected }");
							}
						}
						v_criteria = __ret1;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { criteria : v_criteria, range : v_range, sortSpecs : v_sortSpecs};
	}
	,parse17: function() {
		var _gthis = this;
		var v_condition = null;
		var v_hiddenValues = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("hiddenValues".length == __name__.max - __name__.min && __name__.source.startsWith("hiddenValues",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hiddenValues1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hiddenValues1 = true;
					} else {
						v_hiddenValues1 = false;
					}
					if(v_hiddenValues1) {
						v_hiddenValues = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_hiddenValues2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_hiddenValues2 = true;
						} else {
							v_hiddenValues2 = false;
						}
						if(!v_hiddenValues2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_hiddenValues3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_hiddenValues3 = true;
						} else {
							v_hiddenValues3 = false;
						}
						if(!v_hiddenValues3) {
							while(true) {
								__ret.push(tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString()));
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_hiddenValues4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_hiddenValues4 = true;
								} else {
									v_hiddenValues4 = false;
								}
								if(!v_hiddenValues4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_hiddenValues5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_hiddenValues5 = true;
							} else {
								v_hiddenValues5 = false;
							}
							if(!v_hiddenValues5) {
								this.die("Expected ]");
							}
						}
						v_hiddenValues = __ret;
					}
				} else if("condition".length == __name__.max - __name__.min && __name__.source.startsWith("condition",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_condition1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_condition1 = true;
					} else {
						v_condition1 = false;
					}
					if(v_condition1) {
						v_condition = null;
					} else {
						v_condition = this.parse18();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { condition : v_condition, hiddenValues : v_hiddenValues};
	}
	,parse18: function() {
		var _gthis = this;
		var v_type = null;
		var v_values = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("values".length == __name__.max - __name__.min && __name__.source.startsWith("values",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_values1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_values1 = true;
					} else {
						v_values1 = false;
					}
					if(v_values1) {
						v_values = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values2 = true;
						} else {
							v_values2 = false;
						}
						if(!v_values2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values3 = true;
						} else {
							v_values3 = false;
						}
						if(!v_values3) {
							while(true) {
								__ret.push(this.parse19());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values4 = true;
								} else {
									v_values4 = false;
								}
								if(!v_values4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_values5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_values5 = true;
							} else {
								v_values5 = false;
							}
							if(!v_values5) {
								this.die("Expected ]");
							}
						}
						v_values = __ret;
					}
				} else if("type".length == __name__.max - __name__.min && __name__.source.startsWith("type",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_type1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_type1 = true;
					} else {
						v_type1 = false;
					}
					if(v_type1) {
						v_type = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "BLANK":case "CONDITION_TYPE_UNSPECIFIED":case "CUSTOM_FORMULA":case "DATE_AFTER":case "DATE_BEFORE":case "DATE_BETWEEN":case "DATE_EQ":case "DATE_IS_VALID":case "DATE_NOT_BETWEEN":case "DATE_ON_OR_AFTER":case "DATE_ON_OR_BEFORE":case "NOT_BLANK":case "NUMBER_BETWEEN":case "NUMBER_EQ":case "NUMBER_GREATER":case "NUMBER_GREATER_THAN_EQ":case "NUMBER_LESS":case "NUMBER_LESS_THAN_EQ":case "NUMBER_NOT_BETWEEN":case "NUMBER_NOT_EQ":case "ONE_OF_LIST":case "ONE_OF_RANGE":case "TEXT_CONTAINS":case "TEXT_ENDS_WITH":case "TEXT_EQ":case "TEXT_IS_EMAIL":case "TEXT_IS_URL":case "TEXT_NOT_CONTAINS":case "TEXT_STARTS_WITH":
							v_type = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse18"}));
						}
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { type : v_type, values : v_values};
	}
	,parse19: function() {
		var _gthis = this;
		var v_relativeDate = null;
		var v_userEnteredValue = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("userEnteredValue".length == __name__.max - __name__.min && __name__.source.startsWith("userEnteredValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_userEnteredValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_userEnteredValue1 = true;
					} else {
						v_userEnteredValue1 = false;
					}
					if(v_userEnteredValue1) {
						v_userEnteredValue = null;
					} else {
						v_userEnteredValue = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("relativeDate".length == __name__.max - __name__.min && __name__.source.startsWith("relativeDate",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_relativeDate1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_relativeDate1 = true;
					} else {
						v_relativeDate1 = false;
					}
					if(v_relativeDate1) {
						v_relativeDate = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "PAST_MONTH":case "PAST_WEEK":case "PAST_YEAR":case "RELATIVE_DATE_UNSPECIFIED":case "TODAY":case "TOMORROW":case "YESTERDAY":
							v_relativeDate = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse19"}));
						}
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { relativeDate : v_relativeDate, userEnteredValue : v_userEnteredValue};
	}
	,parse20: function() {
		var _gthis = this;
		var v_dimensionIndex = null;
		var v_sortOrder = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("sortOrder".length == __name__.max - __name__.min && __name__.source.startsWith("sortOrder",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sortOrder1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sortOrder1 = true;
					} else {
						v_sortOrder1 = false;
					}
					if(v_sortOrder1) {
						v_sortOrder = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "ASCENDING":case "DESCENDING":case "SORT_ORDER_UNSPECIFIED":
							v_sortOrder = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse20"}));
						}
					}
				} else if("dimensionIndex".length == __name__.max - __name__.min && __name__.source.startsWith("dimensionIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_dimensionIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_dimensionIndex1 = true;
					} else {
						v_dimensionIndex1 = false;
					}
					if(v_dimensionIndex1) {
						v_dimensionIndex = null;
					} else {
						var this1 = this.parseNumber();
						v_dimensionIndex = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { dimensionIndex : v_dimensionIndex, sortOrder : v_sortOrder};
	}
	,parse21: function() {
		var _gthis = this;
		var v_chartId = null;
		var v_position = null;
		var v_spec = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("spec".length == __name__.max - __name__.min && __name__.source.startsWith("spec",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_spec1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_spec1 = true;
					} else {
						v_spec1 = false;
					}
					if(v_spec1) {
						v_spec = null;
					} else {
						v_spec = this.parse25();
					}
				} else if("position".length == __name__.max - __name__.min && __name__.source.startsWith("position",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_position1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_position1 = true;
					} else {
						v_position1 = false;
					}
					if(v_position1) {
						v_position = null;
					} else {
						v_position = this.parse22();
					}
				} else if("chartId".length == __name__.max - __name__.min && __name__.source.startsWith("chartId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_chartId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_chartId1 = true;
					} else {
						v_chartId1 = false;
					}
					if(v_chartId1) {
						v_chartId = null;
					} else {
						var this1 = this.parseNumber();
						v_chartId = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { chartId : v_chartId, position : v_position, spec : v_spec};
	}
	,parse22: function() {
		var _gthis = this;
		var v_newSheet = null;
		var v_overlayPosition = null;
		var v_sheetId = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("sheetId".length == __name__.max - __name__.min && __name__.source.startsWith("sheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sheetId1 = true;
					} else {
						v_sheetId1 = false;
					}
					if(v_sheetId1) {
						v_sheetId = null;
					} else {
						var this1 = this.parseNumber();
						v_sheetId = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("overlayPosition".length == __name__.max - __name__.min && __name__.source.startsWith("overlayPosition",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_overlayPosition1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_overlayPosition1 = true;
					} else {
						v_overlayPosition1 = false;
					}
					if(v_overlayPosition1) {
						v_overlayPosition = null;
					} else {
						v_overlayPosition = this.parse23();
					}
				} else if("newSheet".length == __name__.max - __name__.min && __name__.source.startsWith("newSheet",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_newSheet1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_newSheet1 = true;
					} else {
						v_newSheet1 = false;
					}
					if(v_newSheet1) {
						v_newSheet = null;
					} else {
						v_newSheet = this.parseBool();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { newSheet : v_newSheet, overlayPosition : v_overlayPosition, sheetId : v_sheetId};
	}
	,parse23: function() {
		var _gthis = this;
		var v_anchorCell = null;
		var v_heightPixels = null;
		var v_offsetXPixels = null;
		var v_offsetYPixels = null;
		var v_widthPixels = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("widthPixels".length == __name__.max - __name__.min && __name__.source.startsWith("widthPixels",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_widthPixels1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_widthPixels1 = true;
					} else {
						v_widthPixels1 = false;
					}
					if(v_widthPixels1) {
						v_widthPixels = null;
					} else {
						var this1 = this.parseNumber();
						v_widthPixels = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("offsetYPixels".length == __name__.max - __name__.min && __name__.source.startsWith("offsetYPixels",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_offsetYPixels1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_offsetYPixels1 = true;
					} else {
						v_offsetYPixels1 = false;
					}
					if(v_offsetYPixels1) {
						v_offsetYPixels = null;
					} else {
						var this2 = this.parseNumber();
						v_offsetYPixels = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("offsetXPixels".length == __name__.max - __name__.min && __name__.source.startsWith("offsetXPixels",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_offsetXPixels1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_offsetXPixels1 = true;
					} else {
						v_offsetXPixels1 = false;
					}
					if(v_offsetXPixels1) {
						v_offsetXPixels = null;
					} else {
						var this3 = this.parseNumber();
						v_offsetXPixels = Std.parseInt(this3.source.substring(this3.min,this3.max));
					}
				} else if("heightPixels".length == __name__.max - __name__.min && __name__.source.startsWith("heightPixels",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_heightPixels1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_heightPixels1 = true;
					} else {
						v_heightPixels1 = false;
					}
					if(v_heightPixels1) {
						v_heightPixels = null;
					} else {
						var this4 = this.parseNumber();
						v_heightPixels = Std.parseInt(this4.source.substring(this4.min,this4.max));
					}
				} else if("anchorCell".length == __name__.max - __name__.min && __name__.source.startsWith("anchorCell",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_anchorCell1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_anchorCell1 = true;
					} else {
						v_anchorCell1 = false;
					}
					if(v_anchorCell1) {
						v_anchorCell = null;
					} else {
						v_anchorCell = this.parse24();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { anchorCell : v_anchorCell, heightPixels : v_heightPixels, offsetXPixels : v_offsetXPixels, offsetYPixels : v_offsetYPixels, widthPixels : v_widthPixels};
	}
	,parse24: function() {
		var _gthis = this;
		var v_columnIndex = null;
		var v_rowIndex = null;
		var v_sheetId = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("sheetId".length == __name__.max - __name__.min && __name__.source.startsWith("sheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sheetId1 = true;
					} else {
						v_sheetId1 = false;
					}
					if(v_sheetId1) {
						v_sheetId = null;
					} else {
						var this1 = this.parseNumber();
						v_sheetId = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("rowIndex".length == __name__.max - __name__.min && __name__.source.startsWith("rowIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rowIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rowIndex1 = true;
					} else {
						v_rowIndex1 = false;
					}
					if(v_rowIndex1) {
						v_rowIndex = null;
					} else {
						var this2 = this.parseNumber();
						v_rowIndex = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("columnIndex".length == __name__.max - __name__.min && __name__.source.startsWith("columnIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_columnIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_columnIndex1 = true;
					} else {
						v_columnIndex1 = false;
					}
					if(v_columnIndex1) {
						v_columnIndex = null;
					} else {
						var this3 = this.parseNumber();
						v_columnIndex = Std.parseInt(this3.source.substring(this3.min,this3.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { columnIndex : v_columnIndex, rowIndex : v_rowIndex, sheetId : v_sheetId};
	}
	,parse25: function() {
		var _gthis = this;
		var v_basicChart = null;
		var v_hiddenDimensionStrategy = null;
		var v_pieChart = null;
		var v_title = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("title".length == __name__.max - __name__.min && __name__.source.startsWith("title",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_title1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_title1 = true;
					} else {
						v_title1 = false;
					}
					if(v_title1) {
						v_title = null;
					} else {
						v_title = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("pieChart".length == __name__.max - __name__.min && __name__.source.startsWith("pieChart",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_pieChart1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_pieChart1 = true;
					} else {
						v_pieChart1 = false;
					}
					if(v_pieChart1) {
						v_pieChart = null;
					} else {
						v_pieChart = this.parse32();
					}
				} else if("hiddenDimensionStrategy".length == __name__.max - __name__.min && __name__.source.startsWith("hiddenDimensionStrategy",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hiddenDimensionStrategy1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hiddenDimensionStrategy1 = true;
					} else {
						v_hiddenDimensionStrategy1 = false;
					}
					if(v_hiddenDimensionStrategy1) {
						v_hiddenDimensionStrategy = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED":case "SHOW_ALL":case "SKIP_HIDDEN_COLUMNS":case "SKIP_HIDDEN_ROWS":case "SKIP_HIDDEN_ROWS_AND_COLUMNS":
							v_hiddenDimensionStrategy = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse25"}));
						}
					}
				} else if("basicChart".length == __name__.max - __name__.min && __name__.source.startsWith("basicChart",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_basicChart1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_basicChart1 = true;
					} else {
						v_basicChart1 = false;
					}
					if(v_basicChart1) {
						v_basicChart = null;
					} else {
						v_basicChart = this.parse26();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { basicChart : v_basicChart, hiddenDimensionStrategy : v_hiddenDimensionStrategy, pieChart : v_pieChart, title : v_title};
	}
	,parse26: function() {
		var _gthis = this;
		var v_axis = null;
		var v_chartType = null;
		var v_domains = null;
		var v_headerCount = null;
		var v_legendPosition = null;
		var v_series = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("series".length == __name__.max - __name__.min && __name__.source.startsWith("series",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_series1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_series1 = true;
					} else {
						v_series1 = false;
					}
					if(v_series1) {
						v_series = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_series2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_series2 = true;
						} else {
							v_series2 = false;
						}
						if(!v_series2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_series3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_series3 = true;
						} else {
							v_series3 = false;
						}
						if(!v_series3) {
							while(true) {
								__ret.push(this.parse31());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_series4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_series4 = true;
								} else {
									v_series4 = false;
								}
								if(!v_series4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_series5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_series5 = true;
							} else {
								v_series5 = false;
							}
							if(!v_series5) {
								this.die("Expected ]");
							}
						}
						v_series = __ret;
					}
				} else if("legendPosition".length == __name__.max - __name__.min && __name__.source.startsWith("legendPosition",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_legendPosition1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_legendPosition1 = true;
					} else {
						v_legendPosition1 = false;
					}
					if(v_legendPosition1) {
						v_legendPosition = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "BASIC_CHART_LEGEND_POSITION_UNSPECIFIED":case "BOTTOM_LEGEND":case "LEFT_LEGEND":case "NO_LEGEND":case "RIGHT_LEGEND":case "TOP_LEGEND":
							v_legendPosition = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse26"}));
						}
					}
				} else if("headerCount".length == __name__.max - __name__.min && __name__.source.startsWith("headerCount",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_headerCount1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_headerCount1 = true;
					} else {
						v_headerCount1 = false;
					}
					if(v_headerCount1) {
						v_headerCount = null;
					} else {
						var this1 = this.parseNumber();
						v_headerCount = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("domains".length == __name__.max - __name__.min && __name__.source.startsWith("domains",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_domains1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_domains1 = true;
					} else {
						v_domains1 = false;
					}
					if(v_domains1) {
						v_domains = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_domains2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_domains2 = true;
						} else {
							v_domains2 = false;
						}
						if(!v_domains2) {
							this.die("Expected [");
						}
						var __ret1 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_domains3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_domains3 = true;
						} else {
							v_domains3 = false;
						}
						if(!v_domains3) {
							while(true) {
								__ret1.push(this.parse28());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_domains4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_domains4 = true;
								} else {
									v_domains4 = false;
								}
								if(!v_domains4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_domains5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_domains5 = true;
							} else {
								v_domains5 = false;
							}
							if(!v_domains5) {
								this.die("Expected ]");
							}
						}
						v_domains = __ret1;
					}
				} else if("chartType".length == __name__.max - __name__.min && __name__.source.startsWith("chartType",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_chartType1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_chartType1 = true;
					} else {
						v_chartType1 = false;
					}
					if(v_chartType1) {
						v_chartType = null;
					} else {
						var v1 = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v1) {
						case "AREA":case "BAR":case "BASIC_CHART_TYPE_UNSPECIFIED":case "COLUMN":case "COMBO":case "LINE":case "SCATTER":
							v_chartType = v1;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v1,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse26"}));
						}
					}
				} else if("axis".length == __name__.max - __name__.min && __name__.source.startsWith("axis",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_axis1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_axis1 = true;
					} else {
						v_axis1 = false;
					}
					if(v_axis1) {
						v_axis = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_axis2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_axis2 = true;
						} else {
							v_axis2 = false;
						}
						if(!v_axis2) {
							this.die("Expected [");
						}
						var __ret2 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_axis3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_axis3 = true;
						} else {
							v_axis3 = false;
						}
						if(!v_axis3) {
							while(true) {
								__ret2.push(this.parse27());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_axis4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_axis4 = true;
								} else {
									v_axis4 = false;
								}
								if(!v_axis4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_axis5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_axis5 = true;
							} else {
								v_axis5 = false;
							}
							if(!v_axis5) {
								this.die("Expected ]");
							}
						}
						v_axis = __ret2;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { axis : v_axis, chartType : v_chartType, domains : v_domains, headerCount : v_headerCount, legendPosition : v_legendPosition, series : v_series};
	}
	,parse27: function() {
		var _gthis = this;
		var v_format = null;
		var v_position = null;
		var v_title = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("title".length == __name__.max - __name__.min && __name__.source.startsWith("title",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_title1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_title1 = true;
					} else {
						v_title1 = false;
					}
					if(v_title1) {
						v_title = null;
					} else {
						v_title = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("position".length == __name__.max - __name__.min && __name__.source.startsWith("position",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_position1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_position1 = true;
					} else {
						v_position1 = false;
					}
					if(v_position1) {
						v_position = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "BASIC_CHART_AXIS_POSITION_UNSPECIFIED":case "BOTTOM_AXIS":case "LEFT_AXIS":case "RIGHT_AXIS":
							v_position = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse27"}));
						}
					}
				} else if("format".length == __name__.max - __name__.min && __name__.source.startsWith("format",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_format1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_format1 = true;
					} else {
						v_format1 = false;
					}
					if(v_format1) {
						v_format = null;
					} else {
						v_format = this.parse10();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { format : v_format, position : v_position, title : v_title};
	}
	,parse28: function() {
		var _gthis = this;
		var v_domain = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("domain".length == __name__.max - __name__.min && __name__.source.startsWith("domain",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_domain1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_domain1 = true;
					} else {
						v_domain1 = false;
					}
					if(v_domain1) {
						v_domain = null;
					} else {
						v_domain = this.parse29();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { domain : v_domain};
	}
	,parse29: function() {
		var _gthis = this;
		var v_sourceRange = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("sourceRange".length == __name__.max - __name__.min && __name__.source.startsWith("sourceRange",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sourceRange1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sourceRange1 = true;
					} else {
						v_sourceRange1 = false;
					}
					if(v_sourceRange1) {
						v_sourceRange = null;
					} else {
						v_sourceRange = this.parse30();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { sourceRange : v_sourceRange};
	}
	,parse30: function() {
		var _gthis = this;
		var v_sources = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("sources".length == __name__.max - __name__.min && __name__.source.startsWith("sources",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sources1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sources1 = true;
					} else {
						v_sources1 = false;
					}
					if(v_sources1) {
						v_sources = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_sources2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_sources2 = true;
						} else {
							v_sources2 = false;
						}
						if(!v_sources2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_sources3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_sources3 = true;
						} else {
							v_sources3 = false;
						}
						if(!v_sources3) {
							while(true) {
								__ret.push(this.parse2());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_sources4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_sources4 = true;
								} else {
									v_sources4 = false;
								}
								if(!v_sources4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_sources5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_sources5 = true;
							} else {
								v_sources5 = false;
							}
							if(!v_sources5) {
								this.die("Expected ]");
							}
						}
						v_sources = __ret;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { sources : v_sources};
	}
	,parse31: function() {
		var _gthis = this;
		var v_series = null;
		var v_targetAxis = null;
		var v_type = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("type".length == __name__.max - __name__.min && __name__.source.startsWith("type",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_type1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_type1 = true;
					} else {
						v_type1 = false;
					}
					if(v_type1) {
						v_type = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "AREA":case "BAR":case "BASIC_CHART_TYPE_UNSPECIFIED":case "COLUMN":case "COMBO":case "LINE":case "SCATTER":
							v_type = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse31"}));
						}
					}
				} else if("targetAxis".length == __name__.max - __name__.min && __name__.source.startsWith("targetAxis",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_targetAxis1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_targetAxis1 = true;
					} else {
						v_targetAxis1 = false;
					}
					if(v_targetAxis1) {
						v_targetAxis = null;
					} else {
						var v1 = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v1) {
						case "BASIC_CHART_AXIS_POSITION_UNSPECIFIED":case "BOTTOM_AXIS":case "LEFT_AXIS":case "RIGHT_AXIS":
							v_targetAxis = v1;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v1,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse31"}));
						}
					}
				} else if("series".length == __name__.max - __name__.min && __name__.source.startsWith("series",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_series1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_series1 = true;
					} else {
						v_series1 = false;
					}
					if(v_series1) {
						v_series = null;
					} else {
						v_series = this.parse29();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { series : v_series, targetAxis : v_targetAxis, type : v_type};
	}
	,parse32: function() {
		var _gthis = this;
		var v_domain = null;
		var v_legendPosition = null;
		var v_pieHole = null;
		var v_series = null;
		var v_threeDimensional = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("threeDimensional".length == __name__.max - __name__.min && __name__.source.startsWith("threeDimensional",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_threeDimensional1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_threeDimensional1 = true;
					} else {
						v_threeDimensional1 = false;
					}
					if(v_threeDimensional1) {
						v_threeDimensional = null;
					} else {
						v_threeDimensional = this.parseBool();
					}
				} else if("series".length == __name__.max - __name__.min && __name__.source.startsWith("series",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_series1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_series1 = true;
					} else {
						v_series1 = false;
					}
					if(v_series1) {
						v_series = null;
					} else {
						v_series = this.parse29();
					}
				} else if("pieHole".length == __name__.max - __name__.min && __name__.source.startsWith("pieHole",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_pieHole1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_pieHole1 = true;
					} else {
						v_pieHole1 = false;
					}
					if(v_pieHole1) {
						v_pieHole = null;
					} else {
						var this1 = this.parseNumber();
						v_pieHole = parseFloat(this1.source.substring(this1.min,this1.max));
					}
				} else if("legendPosition".length == __name__.max - __name__.min && __name__.source.startsWith("legendPosition",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_legendPosition1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_legendPosition1 = true;
					} else {
						v_legendPosition1 = false;
					}
					if(v_legendPosition1) {
						v_legendPosition = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "BOTTOM_LEGEND":case "LABELED_LEGEND":case "LEFT_LEGEND":case "NO_LEGEND":case "PIE_CHART_LEGEND_POSITION_UNSPECIFIED":case "RIGHT_LEGEND":case "TOP_LEGEND":
							v_legendPosition = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse32"}));
						}
					}
				} else if("domain".length == __name__.max - __name__.min && __name__.source.startsWith("domain",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_domain1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_domain1 = true;
					} else {
						v_domain1 = false;
					}
					if(v_domain1) {
						v_domain = null;
					} else {
						v_domain = this.parse29();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { domain : v_domain, legendPosition : v_legendPosition, pieHole : v_pieHole, series : v_series, threeDimensional : v_threeDimensional};
	}
	,parse33: function() {
		var _gthis = this;
		var v_booleanRule = null;
		var v_gradientRule = null;
		var v_ranges = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("ranges".length == __name__.max - __name__.min && __name__.source.startsWith("ranges",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_ranges1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_ranges1 = true;
					} else {
						v_ranges1 = false;
					}
					if(v_ranges1) {
						v_ranges = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_ranges2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_ranges2 = true;
						} else {
							v_ranges2 = false;
						}
						if(!v_ranges2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_ranges3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_ranges3 = true;
						} else {
							v_ranges3 = false;
						}
						if(!v_ranges3) {
							while(true) {
								__ret.push(this.parse2());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_ranges4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_ranges4 = true;
								} else {
									v_ranges4 = false;
								}
								if(!v_ranges4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_ranges5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_ranges5 = true;
							} else {
								v_ranges5 = false;
							}
							if(!v_ranges5) {
								this.die("Expected ]");
							}
						}
						v_ranges = __ret;
					}
				} else if("gradientRule".length == __name__.max - __name__.min && __name__.source.startsWith("gradientRule",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_gradientRule1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_gradientRule1 = true;
					} else {
						v_gradientRule1 = false;
					}
					if(v_gradientRule1) {
						v_gradientRule = null;
					} else {
						v_gradientRule = this.parse35();
					}
				} else if("booleanRule".length == __name__.max - __name__.min && __name__.source.startsWith("booleanRule",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_booleanRule1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_booleanRule1 = true;
					} else {
						v_booleanRule1 = false;
					}
					if(v_booleanRule1) {
						v_booleanRule = null;
					} else {
						v_booleanRule = this.parse34();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { booleanRule : v_booleanRule, gradientRule : v_gradientRule, ranges : v_ranges};
	}
	,parse34: function() {
		var _gthis = this;
		var v_condition = null;
		var v_format = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("format".length == __name__.max - __name__.min && __name__.source.startsWith("format",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_format1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_format1 = true;
					} else {
						v_format1 = false;
					}
					if(v_format1) {
						v_format = null;
					} else {
						v_format = this.parse4();
					}
				} else if("condition".length == __name__.max - __name__.min && __name__.source.startsWith("condition",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_condition1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_condition1 = true;
					} else {
						v_condition1 = false;
					}
					if(v_condition1) {
						v_condition = null;
					} else {
						v_condition = this.parse18();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { condition : v_condition, format : v_format};
	}
	,parse35: function() {
		var _gthis = this;
		var v_maxpoint = null;
		var v_midpoint = null;
		var v_minpoint = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("minpoint".length == __name__.max - __name__.min && __name__.source.startsWith("minpoint",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_minpoint1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_minpoint1 = true;
					} else {
						v_minpoint1 = false;
					}
					if(v_minpoint1) {
						v_minpoint = null;
					} else {
						v_minpoint = this.parse36();
					}
				} else if("midpoint".length == __name__.max - __name__.min && __name__.source.startsWith("midpoint",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_midpoint1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_midpoint1 = true;
					} else {
						v_midpoint1 = false;
					}
					if(v_midpoint1) {
						v_midpoint = null;
					} else {
						v_midpoint = this.parse36();
					}
				} else if("maxpoint".length == __name__.max - __name__.min && __name__.source.startsWith("maxpoint",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_maxpoint1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_maxpoint1 = true;
					} else {
						v_maxpoint1 = false;
					}
					if(v_maxpoint1) {
						v_maxpoint = null;
					} else {
						v_maxpoint = this.parse36();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { maxpoint : v_maxpoint, midpoint : v_midpoint, minpoint : v_minpoint};
	}
	,parse36: function() {
		var _gthis = this;
		var v_color = null;
		var v_type = null;
		var v_value = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("value".length == __name__.max - __name__.min && __name__.source.startsWith("value",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_value1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_value1 = true;
					} else {
						v_value1 = false;
					}
					if(v_value1) {
						v_value = null;
					} else {
						v_value = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("type".length == __name__.max - __name__.min && __name__.source.startsWith("type",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_type1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_type1 = true;
					} else {
						v_type1 = false;
					}
					if(v_type1) {
						v_type = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "INTERPOLATION_POINT_TYPE_UNSPECIFIED":case "MAX":case "MIN":case "NUMBER":case "PERCENT":case "PERCENTILE":
							v_type = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse36"}));
						}
					}
				} else if("color".length == __name__.max - __name__.min && __name__.source.startsWith("color",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_color1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_color1 = true;
					} else {
						v_color1 = false;
					}
					if(v_color1) {
						v_color = null;
					} else {
						v_color = this.parse5();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { color : v_color, type : v_type, value : v_value};
	}
	,parse37: function() {
		var _gthis = this;
		var v_columnMetadata = null;
		var v_rowData = null;
		var v_rowMetadata = null;
		var v_startColumn = null;
		var v_startRow = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("startRow".length == __name__.max - __name__.min && __name__.source.startsWith("startRow",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_startRow1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_startRow1 = true;
					} else {
						v_startRow1 = false;
					}
					if(v_startRow1) {
						v_startRow = null;
					} else {
						var this1 = this.parseNumber();
						v_startRow = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("startColumn".length == __name__.max - __name__.min && __name__.source.startsWith("startColumn",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_startColumn1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_startColumn1 = true;
					} else {
						v_startColumn1 = false;
					}
					if(v_startColumn1) {
						v_startColumn = null;
					} else {
						var this2 = this.parseNumber();
						v_startColumn = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("rowMetadata".length == __name__.max - __name__.min && __name__.source.startsWith("rowMetadata",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rowMetadata1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rowMetadata1 = true;
					} else {
						v_rowMetadata1 = false;
					}
					if(v_rowMetadata1) {
						v_rowMetadata = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_rowMetadata2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_rowMetadata2 = true;
						} else {
							v_rowMetadata2 = false;
						}
						if(!v_rowMetadata2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_rowMetadata3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_rowMetadata3 = true;
						} else {
							v_rowMetadata3 = false;
						}
						if(!v_rowMetadata3) {
							while(true) {
								__ret.push(this.parse38());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_rowMetadata4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_rowMetadata4 = true;
								} else {
									v_rowMetadata4 = false;
								}
								if(!v_rowMetadata4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_rowMetadata5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_rowMetadata5 = true;
							} else {
								v_rowMetadata5 = false;
							}
							if(!v_rowMetadata5) {
								this.die("Expected ]");
							}
						}
						v_rowMetadata = __ret;
					}
				} else if("rowData".length == __name__.max - __name__.min && __name__.source.startsWith("rowData",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rowData1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rowData1 = true;
					} else {
						v_rowData1 = false;
					}
					if(v_rowData1) {
						v_rowData = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_rowData2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_rowData2 = true;
						} else {
							v_rowData2 = false;
						}
						if(!v_rowData2) {
							this.die("Expected [");
						}
						var __ret1 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_rowData3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_rowData3 = true;
						} else {
							v_rowData3 = false;
						}
						if(!v_rowData3) {
							while(true) {
								__ret1.push(this.parse39());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_rowData4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_rowData4 = true;
								} else {
									v_rowData4 = false;
								}
								if(!v_rowData4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_rowData5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_rowData5 = true;
							} else {
								v_rowData5 = false;
							}
							if(!v_rowData5) {
								this.die("Expected ]");
							}
						}
						v_rowData = __ret1;
					}
				} else if("columnMetadata".length == __name__.max - __name__.min && __name__.source.startsWith("columnMetadata",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_columnMetadata1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_columnMetadata1 = true;
					} else {
						v_columnMetadata1 = false;
					}
					if(v_columnMetadata1) {
						v_columnMetadata = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_columnMetadata2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_columnMetadata2 = true;
						} else {
							v_columnMetadata2 = false;
						}
						if(!v_columnMetadata2) {
							this.die("Expected [");
						}
						var __ret2 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_columnMetadata3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_columnMetadata3 = true;
						} else {
							v_columnMetadata3 = false;
						}
						if(!v_columnMetadata3) {
							while(true) {
								__ret2.push(this.parse38());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_columnMetadata4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_columnMetadata4 = true;
								} else {
									v_columnMetadata4 = false;
								}
								if(!v_columnMetadata4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_columnMetadata5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_columnMetadata5 = true;
							} else {
								v_columnMetadata5 = false;
							}
							if(!v_columnMetadata5) {
								this.die("Expected ]");
							}
						}
						v_columnMetadata = __ret2;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { columnMetadata : v_columnMetadata, rowData : v_rowData, rowMetadata : v_rowMetadata, startColumn : v_startColumn, startRow : v_startRow};
	}
	,parse38: function() {
		var _gthis = this;
		var v_hiddenByFilter = null;
		var v_hiddenByUser = null;
		var v_pixelSize = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("pixelSize".length == __name__.max - __name__.min && __name__.source.startsWith("pixelSize",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_pixelSize1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_pixelSize1 = true;
					} else {
						v_pixelSize1 = false;
					}
					if(v_pixelSize1) {
						v_pixelSize = null;
					} else {
						var this1 = this.parseNumber();
						v_pixelSize = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("hiddenByUser".length == __name__.max - __name__.min && __name__.source.startsWith("hiddenByUser",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hiddenByUser1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hiddenByUser1 = true;
					} else {
						v_hiddenByUser1 = false;
					}
					if(v_hiddenByUser1) {
						v_hiddenByUser = null;
					} else {
						v_hiddenByUser = this.parseBool();
					}
				} else if("hiddenByFilter".length == __name__.max - __name__.min && __name__.source.startsWith("hiddenByFilter",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hiddenByFilter1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hiddenByFilter1 = true;
					} else {
						v_hiddenByFilter1 = false;
					}
					if(v_hiddenByFilter1) {
						v_hiddenByFilter = null;
					} else {
						v_hiddenByFilter = this.parseBool();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { hiddenByFilter : v_hiddenByFilter, hiddenByUser : v_hiddenByUser, pixelSize : v_pixelSize};
	}
	,parse39: function() {
		var _gthis = this;
		var v_values = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("values".length == __name__.max - __name__.min && __name__.source.startsWith("values",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_values1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_values1 = true;
					} else {
						v_values1 = false;
					}
					if(v_values1) {
						v_values = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values2 = true;
						} else {
							v_values2 = false;
						}
						if(!v_values2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values3 = true;
						} else {
							v_values3 = false;
						}
						if(!v_values3) {
							while(true) {
								__ret.push(this.parse40());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values4 = true;
								} else {
									v_values4 = false;
								}
								if(!v_values4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_values5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_values5 = true;
							} else {
								v_values5 = false;
							}
							if(!v_values5) {
								this.die("Expected ]");
							}
						}
						v_values = __ret;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { values : v_values};
	}
	,parse40: function() {
		var _gthis = this;
		var v_dataValidation = null;
		var v_effectiveFormat = null;
		var v_effectiveValue = null;
		var v_formattedValue = null;
		var v_hyperlink = null;
		var v_note = null;
		var v_pivotTable = null;
		var v_textFormatRuns = null;
		var v_userEnteredFormat = null;
		var v_userEnteredValue = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("userEnteredValue".length == __name__.max - __name__.min && __name__.source.startsWith("userEnteredValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_userEnteredValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_userEnteredValue1 = true;
					} else {
						v_userEnteredValue1 = false;
					}
					if(v_userEnteredValue1) {
						v_userEnteredValue = null;
					} else {
						v_userEnteredValue = this.parse42();
					}
				} else if("userEnteredFormat".length == __name__.max - __name__.min && __name__.source.startsWith("userEnteredFormat",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_userEnteredFormat1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_userEnteredFormat1 = true;
					} else {
						v_userEnteredFormat1 = false;
					}
					if(v_userEnteredFormat1) {
						v_userEnteredFormat = null;
					} else {
						v_userEnteredFormat = this.parse4();
					}
				} else if("textFormatRuns".length == __name__.max - __name__.min && __name__.source.startsWith("textFormatRuns",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_textFormatRuns1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_textFormatRuns1 = true;
					} else {
						v_textFormatRuns1 = false;
					}
					if(v_textFormatRuns1) {
						v_textFormatRuns = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_textFormatRuns2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_textFormatRuns2 = true;
						} else {
							v_textFormatRuns2 = false;
						}
						if(!v_textFormatRuns2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_textFormatRuns3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_textFormatRuns3 = true;
						} else {
							v_textFormatRuns3 = false;
						}
						if(!v_textFormatRuns3) {
							while(true) {
								__ret.push(this.parse50());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_textFormatRuns4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_textFormatRuns4 = true;
								} else {
									v_textFormatRuns4 = false;
								}
								if(!v_textFormatRuns4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_textFormatRuns5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_textFormatRuns5 = true;
							} else {
								v_textFormatRuns5 = false;
							}
							if(!v_textFormatRuns5) {
								this.die("Expected ]");
							}
						}
						v_textFormatRuns = __ret;
					}
				} else if("pivotTable".length == __name__.max - __name__.min && __name__.source.startsWith("pivotTable",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_pivotTable1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_pivotTable1 = true;
					} else {
						v_pivotTable1 = false;
					}
					if(v_pivotTable1) {
						v_pivotTable = null;
					} else {
						v_pivotTable = this.parse44();
					}
				} else if("note".length == __name__.max - __name__.min && __name__.source.startsWith("note",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_note1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_note1 = true;
					} else {
						v_note1 = false;
					}
					if(v_note1) {
						v_note = null;
					} else {
						v_note = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("hyperlink".length == __name__.max - __name__.min && __name__.source.startsWith("hyperlink",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hyperlink1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hyperlink1 = true;
					} else {
						v_hyperlink1 = false;
					}
					if(v_hyperlink1) {
						v_hyperlink = null;
					} else {
						v_hyperlink = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("formattedValue".length == __name__.max - __name__.min && __name__.source.startsWith("formattedValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_formattedValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_formattedValue1 = true;
					} else {
						v_formattedValue1 = false;
					}
					if(v_formattedValue1) {
						v_formattedValue = null;
					} else {
						v_formattedValue = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("effectiveValue".length == __name__.max - __name__.min && __name__.source.startsWith("effectiveValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_effectiveValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_effectiveValue1 = true;
					} else {
						v_effectiveValue1 = false;
					}
					if(v_effectiveValue1) {
						v_effectiveValue = null;
					} else {
						v_effectiveValue = this.parse42();
					}
				} else if("effectiveFormat".length == __name__.max - __name__.min && __name__.source.startsWith("effectiveFormat",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_effectiveFormat1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_effectiveFormat1 = true;
					} else {
						v_effectiveFormat1 = false;
					}
					if(v_effectiveFormat1) {
						v_effectiveFormat = null;
					} else {
						v_effectiveFormat = this.parse4();
					}
				} else if("dataValidation".length == __name__.max - __name__.min && __name__.source.startsWith("dataValidation",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_dataValidation1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_dataValidation1 = true;
					} else {
						v_dataValidation1 = false;
					}
					if(v_dataValidation1) {
						v_dataValidation = null;
					} else {
						v_dataValidation = this.parse41();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { dataValidation : v_dataValidation, effectiveFormat : v_effectiveFormat, effectiveValue : v_effectiveValue, formattedValue : v_formattedValue, hyperlink : v_hyperlink, note : v_note, pivotTable : v_pivotTable, textFormatRuns : v_textFormatRuns, userEnteredFormat : v_userEnteredFormat, userEnteredValue : v_userEnteredValue};
	}
	,parse41: function() {
		var _gthis = this;
		var v_condition = null;
		var v_inputMessage = null;
		var v_showCustomUi = null;
		var v_strict = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("strict".length == __name__.max - __name__.min && __name__.source.startsWith("strict",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_strict1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_strict1 = true;
					} else {
						v_strict1 = false;
					}
					if(v_strict1) {
						v_strict = null;
					} else {
						v_strict = this.parseBool();
					}
				} else if("showCustomUi".length == __name__.max - __name__.min && __name__.source.startsWith("showCustomUi",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_showCustomUi1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_showCustomUi1 = true;
					} else {
						v_showCustomUi1 = false;
					}
					if(v_showCustomUi1) {
						v_showCustomUi = null;
					} else {
						v_showCustomUi = this.parseBool();
					}
				} else if("inputMessage".length == __name__.max - __name__.min && __name__.source.startsWith("inputMessage",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_inputMessage1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_inputMessage1 = true;
					} else {
						v_inputMessage1 = false;
					}
					if(v_inputMessage1) {
						v_inputMessage = null;
					} else {
						v_inputMessage = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("condition".length == __name__.max - __name__.min && __name__.source.startsWith("condition",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_condition1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_condition1 = true;
					} else {
						v_condition1 = false;
					}
					if(v_condition1) {
						v_condition = null;
					} else {
						v_condition = this.parse18();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { condition : v_condition, inputMessage : v_inputMessage, showCustomUi : v_showCustomUi, strict : v_strict};
	}
	,parse42: function() {
		var _gthis = this;
		var v_boolValue = null;
		var v_errorValue = null;
		var v_formulaValue = null;
		var v_numberValue = null;
		var v_stringValue = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("stringValue".length == __name__.max - __name__.min && __name__.source.startsWith("stringValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_stringValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_stringValue1 = true;
					} else {
						v_stringValue1 = false;
					}
					if(v_stringValue1) {
						v_stringValue = null;
					} else {
						v_stringValue = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("numberValue".length == __name__.max - __name__.min && __name__.source.startsWith("numberValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_numberValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_numberValue1 = true;
					} else {
						v_numberValue1 = false;
					}
					if(v_numberValue1) {
						v_numberValue = null;
					} else {
						var this1 = this.parseNumber();
						v_numberValue = parseFloat(this1.source.substring(this1.min,this1.max));
					}
				} else if("formulaValue".length == __name__.max - __name__.min && __name__.source.startsWith("formulaValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_formulaValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_formulaValue1 = true;
					} else {
						v_formulaValue1 = false;
					}
					if(v_formulaValue1) {
						v_formulaValue = null;
					} else {
						v_formulaValue = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("errorValue".length == __name__.max - __name__.min && __name__.source.startsWith("errorValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_errorValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_errorValue1 = true;
					} else {
						v_errorValue1 = false;
					}
					if(v_errorValue1) {
						v_errorValue = null;
					} else {
						v_errorValue = this.parse43();
					}
				} else if("boolValue".length == __name__.max - __name__.min && __name__.source.startsWith("boolValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_boolValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_boolValue1 = true;
					} else {
						v_boolValue1 = false;
					}
					if(v_boolValue1) {
						v_boolValue = null;
					} else {
						v_boolValue = this.parseBool();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { boolValue : v_boolValue, errorValue : v_errorValue, formulaValue : v_formulaValue, numberValue : v_numberValue, stringValue : v_stringValue};
	}
	,parse43: function() {
		var _gthis = this;
		var v_message = null;
		var v_type = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("type".length == __name__.max - __name__.min && __name__.source.startsWith("type",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_type1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_type1 = true;
					} else {
						v_type1 = false;
					}
					if(v_type1) {
						v_type = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "DIVIDE_BY_ZERO":case "ERROR":case "ERROR_TYPE_UNSPECIFIED":case "LOADING":case "NAME":case "NULL_VALUE":case "NUM":case "N_A":case "REF":case "VALUE":
							v_type = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse43"}));
						}
					}
				} else if("message".length == __name__.max - __name__.min && __name__.source.startsWith("message",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_message1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_message1 = true;
					} else {
						v_message1 = false;
					}
					if(v_message1) {
						v_message = null;
					} else {
						v_message = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { message : v_message, type : v_type};
	}
	,parse44: function() {
		var _gthis = this;
		var v_columns = null;
		var v_criteria = null;
		var v_rows = null;
		var v_source = null;
		var v_valueLayout = null;
		var v_values = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("values".length == __name__.max - __name__.min && __name__.source.startsWith("values",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_values1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_values1 = true;
					} else {
						v_values1 = false;
					}
					if(v_values1) {
						v_values = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values2 = true;
						} else {
							v_values2 = false;
						}
						if(!v_values2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values3 = true;
						} else {
							v_values3 = false;
						}
						if(!v_values3) {
							while(true) {
								__ret.push(this.parse49());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values4 = true;
								} else {
									v_values4 = false;
								}
								if(!v_values4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_values5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_values5 = true;
							} else {
								v_values5 = false;
							}
							if(!v_values5) {
								this.die("Expected ]");
							}
						}
						v_values = __ret;
					}
				} else if("valueLayout".length == __name__.max - __name__.min && __name__.source.startsWith("valueLayout",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_valueLayout1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_valueLayout1 = true;
					} else {
						v_valueLayout1 = false;
					}
					if(v_valueLayout1) {
						v_valueLayout = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "HORIZONTAL":case "VERTICAL":
							v_valueLayout = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse44"}));
						}
					}
				} else if("source".length == __name__.max - __name__.min && __name__.source.startsWith("source",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_source1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_source1 = true;
					} else {
						v_source1 = false;
					}
					if(v_source1) {
						v_source = null;
					} else {
						v_source = this.parse2();
					}
				} else if("rows".length == __name__.max - __name__.min && __name__.source.startsWith("rows",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rows1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rows1 = true;
					} else {
						v_rows1 = false;
					}
					if(v_rows1) {
						v_rows = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_rows2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_rows2 = true;
						} else {
							v_rows2 = false;
						}
						if(!v_rows2) {
							this.die("Expected [");
						}
						var __ret1 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_rows3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_rows3 = true;
						} else {
							v_rows3 = false;
						}
						if(!v_rows3) {
							while(true) {
								__ret1.push(this.parse45());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_rows4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_rows4 = true;
								} else {
									v_rows4 = false;
								}
								if(!v_rows4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_rows5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_rows5 = true;
							} else {
								v_rows5 = false;
							}
							if(!v_rows5) {
								this.die("Expected ]");
							}
						}
						v_rows = __ret1;
					}
				} else if("criteria".length == __name__.max - __name__.min && __name__.source.startsWith("criteria",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_criteria1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_criteria1 = true;
					} else {
						v_criteria1 = false;
					}
					if(v_criteria1) {
						v_criteria = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_criteria2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_criteria2 = true;
						} else {
							v_criteria2 = false;
						}
						if(!v_criteria2) {
							this.die("Expected {");
						}
						var this1 = { };
						var __ret2 = this1;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_criteria3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_criteria3 = true;
						} else {
							v_criteria3 = false;
						}
						if(!v_criteria3) {
							while(true) {
								var key = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
								var e;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var e1;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									e1 = true;
								} else {
									e1 = false;
								}
								if(!e1) {
									e = this.die("Expected :");
								} else {
									e = null;
								}
								__ret2[key] = this.parse48();
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_criteria4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_criteria4 = true;
								} else {
									v_criteria4 = false;
								}
								if(!v_criteria4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_criteria5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_criteria5 = true;
							} else {
								v_criteria5 = false;
							}
							if(!v_criteria5) {
								this.die("Expected }");
							}
						}
						v_criteria = __ret2;
					}
				} else if("columns".length == __name__.max - __name__.min && __name__.source.startsWith("columns",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_columns1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_columns1 = true;
					} else {
						v_columns1 = false;
					}
					if(v_columns1) {
						v_columns = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_columns2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_columns2 = true;
						} else {
							v_columns2 = false;
						}
						if(!v_columns2) {
							this.die("Expected [");
						}
						var __ret3 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_columns3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_columns3 = true;
						} else {
							v_columns3 = false;
						}
						if(!v_columns3) {
							while(true) {
								__ret3.push(this.parse45());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_columns4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_columns4 = true;
								} else {
									v_columns4 = false;
								}
								if(!v_columns4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_columns5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_columns5 = true;
							} else {
								v_columns5 = false;
							}
							if(!v_columns5) {
								this.die("Expected ]");
							}
						}
						v_columns = __ret3;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { columns : v_columns, criteria : v_criteria, rows : v_rows, source : v_source, valueLayout : v_valueLayout, values : v_values};
	}
	,parse45: function() {
		var _gthis = this;
		var v_showTotals = null;
		var v_sortOrder = null;
		var v_sourceColumnOffset = null;
		var v_valueBucket = null;
		var v_valueMetadata = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("valueMetadata".length == __name__.max - __name__.min && __name__.source.startsWith("valueMetadata",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_valueMetadata1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_valueMetadata1 = true;
					} else {
						v_valueMetadata1 = false;
					}
					if(v_valueMetadata1) {
						v_valueMetadata = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_valueMetadata2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_valueMetadata2 = true;
						} else {
							v_valueMetadata2 = false;
						}
						if(!v_valueMetadata2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_valueMetadata3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_valueMetadata3 = true;
						} else {
							v_valueMetadata3 = false;
						}
						if(!v_valueMetadata3) {
							while(true) {
								__ret.push(this.parse47());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_valueMetadata4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_valueMetadata4 = true;
								} else {
									v_valueMetadata4 = false;
								}
								if(!v_valueMetadata4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_valueMetadata5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_valueMetadata5 = true;
							} else {
								v_valueMetadata5 = false;
							}
							if(!v_valueMetadata5) {
								this.die("Expected ]");
							}
						}
						v_valueMetadata = __ret;
					}
				} else if("valueBucket".length == __name__.max - __name__.min && __name__.source.startsWith("valueBucket",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_valueBucket1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_valueBucket1 = true;
					} else {
						v_valueBucket1 = false;
					}
					if(v_valueBucket1) {
						v_valueBucket = null;
					} else {
						v_valueBucket = this.parse46();
					}
				} else if("sourceColumnOffset".length == __name__.max - __name__.min && __name__.source.startsWith("sourceColumnOffset",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sourceColumnOffset1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sourceColumnOffset1 = true;
					} else {
						v_sourceColumnOffset1 = false;
					}
					if(v_sourceColumnOffset1) {
						v_sourceColumnOffset = null;
					} else {
						var this1 = this.parseNumber();
						v_sourceColumnOffset = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("sortOrder".length == __name__.max - __name__.min && __name__.source.startsWith("sortOrder",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sortOrder1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sortOrder1 = true;
					} else {
						v_sortOrder1 = false;
					}
					if(v_sortOrder1) {
						v_sortOrder = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "ASCENDING":case "DESCENDING":case "SORT_ORDER_UNSPECIFIED":
							v_sortOrder = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse45"}));
						}
					}
				} else if("showTotals".length == __name__.max - __name__.min && __name__.source.startsWith("showTotals",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_showTotals1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_showTotals1 = true;
					} else {
						v_showTotals1 = false;
					}
					if(v_showTotals1) {
						v_showTotals = null;
					} else {
						v_showTotals = this.parseBool();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { showTotals : v_showTotals, sortOrder : v_sortOrder, sourceColumnOffset : v_sourceColumnOffset, valueBucket : v_valueBucket, valueMetadata : v_valueMetadata};
	}
	,parse46: function() {
		var _gthis = this;
		var v_buckets = null;
		var v_valuesIndex = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("valuesIndex".length == __name__.max - __name__.min && __name__.source.startsWith("valuesIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_valuesIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_valuesIndex1 = true;
					} else {
						v_valuesIndex1 = false;
					}
					if(v_valuesIndex1) {
						v_valuesIndex = null;
					} else {
						var this1 = this.parseNumber();
						v_valuesIndex = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("buckets".length == __name__.max - __name__.min && __name__.source.startsWith("buckets",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_buckets1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_buckets1 = true;
					} else {
						v_buckets1 = false;
					}
					if(v_buckets1) {
						v_buckets = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_buckets2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_buckets2 = true;
						} else {
							v_buckets2 = false;
						}
						if(!v_buckets2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_buckets3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_buckets3 = true;
						} else {
							v_buckets3 = false;
						}
						if(!v_buckets3) {
							while(true) {
								__ret.push(this.parse42());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_buckets4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_buckets4 = true;
								} else {
									v_buckets4 = false;
								}
								if(!v_buckets4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_buckets5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_buckets5 = true;
							} else {
								v_buckets5 = false;
							}
							if(!v_buckets5) {
								this.die("Expected ]");
							}
						}
						v_buckets = __ret;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { buckets : v_buckets, valuesIndex : v_valuesIndex};
	}
	,parse47: function() {
		var _gthis = this;
		var v_collapsed = null;
		var v_value = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("value".length == __name__.max - __name__.min && __name__.source.startsWith("value",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_value1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_value1 = true;
					} else {
						v_value1 = false;
					}
					if(v_value1) {
						v_value = null;
					} else {
						v_value = this.parse42();
					}
				} else if("collapsed".length == __name__.max - __name__.min && __name__.source.startsWith("collapsed",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_collapsed1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_collapsed1 = true;
					} else {
						v_collapsed1 = false;
					}
					if(v_collapsed1) {
						v_collapsed = null;
					} else {
						v_collapsed = this.parseBool();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { collapsed : v_collapsed, value : v_value};
	}
	,parse48: function() {
		var _gthis = this;
		var v_visibleValues = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("visibleValues".length == __name__.max - __name__.min && __name__.source.startsWith("visibleValues",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_visibleValues1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_visibleValues1 = true;
					} else {
						v_visibleValues1 = false;
					}
					if(v_visibleValues1) {
						v_visibleValues = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_visibleValues2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_visibleValues2 = true;
						} else {
							v_visibleValues2 = false;
						}
						if(!v_visibleValues2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_visibleValues3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_visibleValues3 = true;
						} else {
							v_visibleValues3 = false;
						}
						if(!v_visibleValues3) {
							while(true) {
								__ret.push(tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString()));
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_visibleValues4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_visibleValues4 = true;
								} else {
									v_visibleValues4 = false;
								}
								if(!v_visibleValues4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_visibleValues5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_visibleValues5 = true;
							} else {
								v_visibleValues5 = false;
							}
							if(!v_visibleValues5) {
								this.die("Expected ]");
							}
						}
						v_visibleValues = __ret;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { visibleValues : v_visibleValues};
	}
	,parse49: function() {
		var _gthis = this;
		var v_formula = null;
		var v_name = null;
		var v_sourceColumnOffset = null;
		var v_summarizeFunction = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("summarizeFunction".length == __name__.max - __name__.min && __name__.source.startsWith("summarizeFunction",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_summarizeFunction1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_summarizeFunction1 = true;
					} else {
						v_summarizeFunction1 = false;
					}
					if(v_summarizeFunction1) {
						v_summarizeFunction = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "AVERAGE":case "COUNT":case "COUNTA":case "COUNTUNIQUE":case "CUSTOM":case "MAX":case "MEDIAN":case "MIN":case "PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED":case "PRODUCT":case "STDEV":case "STDEVP":case "SUM":case "VAR":case "VARP":
							v_summarizeFunction = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse49"}));
						}
					}
				} else if("sourceColumnOffset".length == __name__.max - __name__.min && __name__.source.startsWith("sourceColumnOffset",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sourceColumnOffset1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sourceColumnOffset1 = true;
					} else {
						v_sourceColumnOffset1 = false;
					}
					if(v_sourceColumnOffset1) {
						v_sourceColumnOffset = null;
					} else {
						var this1 = this.parseNumber();
						v_sourceColumnOffset = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("name".length == __name__.max - __name__.min && __name__.source.startsWith("name",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_name1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_name1 = true;
					} else {
						v_name1 = false;
					}
					if(v_name1) {
						v_name = null;
					} else {
						v_name = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("formula".length == __name__.max - __name__.min && __name__.source.startsWith("formula",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_formula1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_formula1 = true;
					} else {
						v_formula1 = false;
					}
					if(v_formula1) {
						v_formula = null;
					} else {
						v_formula = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { formula : v_formula, name : v_name, sourceColumnOffset : v_sourceColumnOffset, summarizeFunction : v_summarizeFunction};
	}
	,parse50: function() {
		var _gthis = this;
		var v_format = null;
		var v_startIndex = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("startIndex".length == __name__.max - __name__.min && __name__.source.startsWith("startIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_startIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_startIndex1 = true;
					} else {
						v_startIndex1 = false;
					}
					if(v_startIndex1) {
						v_startIndex = null;
					} else {
						var this1 = this.parseNumber();
						v_startIndex = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("format".length == __name__.max - __name__.min && __name__.source.startsWith("format",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_format1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_format1 = true;
					} else {
						v_format1 = false;
					}
					if(v_format1) {
						v_format = null;
					} else {
						v_format = this.parse10();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { format : v_format, startIndex : v_startIndex};
	}
	,parse51: function() {
		var _gthis = this;
		var v_criteria = null;
		var v_filterViewId = null;
		var v_namedRangeId = null;
		var v_range = null;
		var v_sortSpecs = null;
		var v_title = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("title".length == __name__.max - __name__.min && __name__.source.startsWith("title",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_title1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_title1 = true;
					} else {
						v_title1 = false;
					}
					if(v_title1) {
						v_title = null;
					} else {
						v_title = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("sortSpecs".length == __name__.max - __name__.min && __name__.source.startsWith("sortSpecs",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sortSpecs1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sortSpecs1 = true;
					} else {
						v_sortSpecs1 = false;
					}
					if(v_sortSpecs1) {
						v_sortSpecs = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_sortSpecs2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_sortSpecs2 = true;
						} else {
							v_sortSpecs2 = false;
						}
						if(!v_sortSpecs2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_sortSpecs3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_sortSpecs3 = true;
						} else {
							v_sortSpecs3 = false;
						}
						if(!v_sortSpecs3) {
							while(true) {
								__ret.push(this.parse20());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_sortSpecs4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_sortSpecs4 = true;
								} else {
									v_sortSpecs4 = false;
								}
								if(!v_sortSpecs4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_sortSpecs5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_sortSpecs5 = true;
							} else {
								v_sortSpecs5 = false;
							}
							if(!v_sortSpecs5) {
								this.die("Expected ]");
							}
						}
						v_sortSpecs = __ret;
					}
				} else if("range".length == __name__.max - __name__.min && __name__.source.startsWith("range",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_range1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_range1 = true;
					} else {
						v_range1 = false;
					}
					if(v_range1) {
						v_range = null;
					} else {
						v_range = this.parse2();
					}
				} else if("namedRangeId".length == __name__.max - __name__.min && __name__.source.startsWith("namedRangeId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_namedRangeId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_namedRangeId1 = true;
					} else {
						v_namedRangeId1 = false;
					}
					if(v_namedRangeId1) {
						v_namedRangeId = null;
					} else {
						v_namedRangeId = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("filterViewId".length == __name__.max - __name__.min && __name__.source.startsWith("filterViewId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_filterViewId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_filterViewId1 = true;
					} else {
						v_filterViewId1 = false;
					}
					if(v_filterViewId1) {
						v_filterViewId = null;
					} else {
						var this1 = this.parseNumber();
						v_filterViewId = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("criteria".length == __name__.max - __name__.min && __name__.source.startsWith("criteria",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_criteria1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_criteria1 = true;
					} else {
						v_criteria1 = false;
					}
					if(v_criteria1) {
						v_criteria = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_criteria2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_criteria2 = true;
						} else {
							v_criteria2 = false;
						}
						if(!v_criteria2) {
							this.die("Expected {");
						}
						var this2 = { };
						var __ret1 = this2;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_criteria3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_criteria3 = true;
						} else {
							v_criteria3 = false;
						}
						if(!v_criteria3) {
							while(true) {
								var key = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
								var e;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var e1;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									e1 = true;
								} else {
									e1 = false;
								}
								if(!e1) {
									e = this.die("Expected :");
								} else {
									e = null;
								}
								__ret1[key] = this.parse17();
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_criteria4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_criteria4 = true;
								} else {
									v_criteria4 = false;
								}
								if(!v_criteria4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_criteria5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_criteria5 = true;
							} else {
								v_criteria5 = false;
							}
							if(!v_criteria5) {
								this.die("Expected }");
							}
						}
						v_criteria = __ret1;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { criteria : v_criteria, filterViewId : v_filterViewId, namedRangeId : v_namedRangeId, range : v_range, sortSpecs : v_sortSpecs, title : v_title};
	}
	,parse52: function() {
		var _gthis = this;
		var v_gridProperties = null;
		var v_hidden = null;
		var v_index = null;
		var v_rightToLeft = null;
		var v_sheetId = null;
		var v_sheetType = null;
		var v_tabColor = null;
		var v_title = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("title".length == __name__.max - __name__.min && __name__.source.startsWith("title",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_title1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_title1 = true;
					} else {
						v_title1 = false;
					}
					if(v_title1) {
						v_title = null;
					} else {
						v_title = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("tabColor".length == __name__.max - __name__.min && __name__.source.startsWith("tabColor",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_tabColor1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_tabColor1 = true;
					} else {
						v_tabColor1 = false;
					}
					if(v_tabColor1) {
						v_tabColor = null;
					} else {
						v_tabColor = this.parse5();
					}
				} else if("sheetType".length == __name__.max - __name__.min && __name__.source.startsWith("sheetType",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sheetType1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sheetType1 = true;
					} else {
						v_sheetType1 = false;
					}
					if(v_sheetType1) {
						v_sheetType = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "GRID":case "OBJECT":case "SHEET_TYPE_UNSPECIFIED":
							v_sheetType = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser0", methodName : "parse52"}));
						}
					}
				} else if("sheetId".length == __name__.max - __name__.min && __name__.source.startsWith("sheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sheetId1 = true;
					} else {
						v_sheetId1 = false;
					}
					if(v_sheetId1) {
						v_sheetId = null;
					} else {
						var this1 = this.parseNumber();
						v_sheetId = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("rightToLeft".length == __name__.max - __name__.min && __name__.source.startsWith("rightToLeft",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rightToLeft1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rightToLeft1 = true;
					} else {
						v_rightToLeft1 = false;
					}
					if(v_rightToLeft1) {
						v_rightToLeft = null;
					} else {
						v_rightToLeft = this.parseBool();
					}
				} else if("index".length == __name__.max - __name__.min && __name__.source.startsWith("index",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_index1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_index1 = true;
					} else {
						v_index1 = false;
					}
					if(v_index1) {
						v_index = null;
					} else {
						var this2 = this.parseNumber();
						v_index = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("hidden".length == __name__.max - __name__.min && __name__.source.startsWith("hidden",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hidden1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hidden1 = true;
					} else {
						v_hidden1 = false;
					}
					if(v_hidden1) {
						v_hidden = null;
					} else {
						v_hidden = this.parseBool();
					}
				} else if("gridProperties".length == __name__.max - __name__.min && __name__.source.startsWith("gridProperties",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_gridProperties1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_gridProperties1 = true;
					} else {
						v_gridProperties1 = false;
					}
					if(v_gridProperties1) {
						v_gridProperties = null;
					} else {
						v_gridProperties = this.parse53();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { gridProperties : v_gridProperties, hidden : v_hidden, index : v_index, rightToLeft : v_rightToLeft, sheetId : v_sheetId, sheetType : v_sheetType, tabColor : v_tabColor, title : v_title};
	}
	,parse53: function() {
		var _gthis = this;
		var v_columnCount = null;
		var v_frozenColumnCount = null;
		var v_frozenRowCount = null;
		var v_hideGridlines = null;
		var v_rowCount = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("rowCount".length == __name__.max - __name__.min && __name__.source.startsWith("rowCount",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rowCount1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rowCount1 = true;
					} else {
						v_rowCount1 = false;
					}
					if(v_rowCount1) {
						v_rowCount = null;
					} else {
						var this1 = this.parseNumber();
						v_rowCount = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("hideGridlines".length == __name__.max - __name__.min && __name__.source.startsWith("hideGridlines",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hideGridlines1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hideGridlines1 = true;
					} else {
						v_hideGridlines1 = false;
					}
					if(v_hideGridlines1) {
						v_hideGridlines = null;
					} else {
						v_hideGridlines = this.parseBool();
					}
				} else if("frozenRowCount".length == __name__.max - __name__.min && __name__.source.startsWith("frozenRowCount",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_frozenRowCount1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_frozenRowCount1 = true;
					} else {
						v_frozenRowCount1 = false;
					}
					if(v_frozenRowCount1) {
						v_frozenRowCount = null;
					} else {
						var this2 = this.parseNumber();
						v_frozenRowCount = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("frozenColumnCount".length == __name__.max - __name__.min && __name__.source.startsWith("frozenColumnCount",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_frozenColumnCount1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_frozenColumnCount1 = true;
					} else {
						v_frozenColumnCount1 = false;
					}
					if(v_frozenColumnCount1) {
						v_frozenColumnCount = null;
					} else {
						var this3 = this.parseNumber();
						v_frozenColumnCount = Std.parseInt(this3.source.substring(this3.min,this3.max));
					}
				} else if("columnCount".length == __name__.max - __name__.min && __name__.source.startsWith("columnCount",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_columnCount1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_columnCount1 = true;
					} else {
						v_columnCount1 = false;
					}
					if(v_columnCount1) {
						v_columnCount = null;
					} else {
						var this4 = this.parseNumber();
						v_columnCount = Std.parseInt(this4.source.substring(this4.min,this4.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { columnCount : v_columnCount, frozenColumnCount : v_frozenColumnCount, frozenRowCount : v_frozenRowCount, hideGridlines : v_hideGridlines, rowCount : v_rowCount};
	}
	,parse54: function() {
		var _gthis = this;
		var v_description = null;
		var v_editors = null;
		var v_namedRangeId = null;
		var v_protectedRangeId = null;
		var v_range = null;
		var v_requestingUserCanEdit = null;
		var v_unprotectedRanges = null;
		var v_warningOnly = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("warningOnly".length == __name__.max - __name__.min && __name__.source.startsWith("warningOnly",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_warningOnly1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_warningOnly1 = true;
					} else {
						v_warningOnly1 = false;
					}
					if(v_warningOnly1) {
						v_warningOnly = null;
					} else {
						v_warningOnly = this.parseBool();
					}
				} else if("unprotectedRanges".length == __name__.max - __name__.min && __name__.source.startsWith("unprotectedRanges",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_unprotectedRanges1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_unprotectedRanges1 = true;
					} else {
						v_unprotectedRanges1 = false;
					}
					if(v_unprotectedRanges1) {
						v_unprotectedRanges = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_unprotectedRanges2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_unprotectedRanges2 = true;
						} else {
							v_unprotectedRanges2 = false;
						}
						if(!v_unprotectedRanges2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_unprotectedRanges3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_unprotectedRanges3 = true;
						} else {
							v_unprotectedRanges3 = false;
						}
						if(!v_unprotectedRanges3) {
							while(true) {
								__ret.push(this.parse2());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_unprotectedRanges4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_unprotectedRanges4 = true;
								} else {
									v_unprotectedRanges4 = false;
								}
								if(!v_unprotectedRanges4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_unprotectedRanges5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_unprotectedRanges5 = true;
							} else {
								v_unprotectedRanges5 = false;
							}
							if(!v_unprotectedRanges5) {
								this.die("Expected ]");
							}
						}
						v_unprotectedRanges = __ret;
					}
				} else if("requestingUserCanEdit".length == __name__.max - __name__.min && __name__.source.startsWith("requestingUserCanEdit",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_requestingUserCanEdit1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_requestingUserCanEdit1 = true;
					} else {
						v_requestingUserCanEdit1 = false;
					}
					if(v_requestingUserCanEdit1) {
						v_requestingUserCanEdit = null;
					} else {
						v_requestingUserCanEdit = this.parseBool();
					}
				} else if("range".length == __name__.max - __name__.min && __name__.source.startsWith("range",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_range1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_range1 = true;
					} else {
						v_range1 = false;
					}
					if(v_range1) {
						v_range = null;
					} else {
						v_range = this.parse2();
					}
				} else if("protectedRangeId".length == __name__.max - __name__.min && __name__.source.startsWith("protectedRangeId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_protectedRangeId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_protectedRangeId1 = true;
					} else {
						v_protectedRangeId1 = false;
					}
					if(v_protectedRangeId1) {
						v_protectedRangeId = null;
					} else {
						var this1 = this.parseNumber();
						v_protectedRangeId = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("namedRangeId".length == __name__.max - __name__.min && __name__.source.startsWith("namedRangeId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_namedRangeId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_namedRangeId1 = true;
					} else {
						v_namedRangeId1 = false;
					}
					if(v_namedRangeId1) {
						v_namedRangeId = null;
					} else {
						v_namedRangeId = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("editors".length == __name__.max - __name__.min && __name__.source.startsWith("editors",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_editors1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_editors1 = true;
					} else {
						v_editors1 = false;
					}
					if(v_editors1) {
						v_editors = null;
					} else {
						v_editors = this.parse55();
					}
				} else if("description".length == __name__.max - __name__.min && __name__.source.startsWith("description",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_description1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_description1 = true;
					} else {
						v_description1 = false;
					}
					if(v_description1) {
						v_description = null;
					} else {
						v_description = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { description : v_description, editors : v_editors, namedRangeId : v_namedRangeId, protectedRangeId : v_protectedRangeId, range : v_range, requestingUserCanEdit : v_requestingUserCanEdit, unprotectedRanges : v_unprotectedRanges, warningOnly : v_warningOnly};
	}
	,parse55: function() {
		var _gthis = this;
		var v_domainUsersCanEdit = null;
		var v_groups = null;
		var v_users = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("users".length == __name__.max - __name__.min && __name__.source.startsWith("users",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_users1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_users1 = true;
					} else {
						v_users1 = false;
					}
					if(v_users1) {
						v_users = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_users2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_users2 = true;
						} else {
							v_users2 = false;
						}
						if(!v_users2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_users3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_users3 = true;
						} else {
							v_users3 = false;
						}
						if(!v_users3) {
							while(true) {
								__ret.push(tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString()));
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_users4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_users4 = true;
								} else {
									v_users4 = false;
								}
								if(!v_users4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_users5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_users5 = true;
							} else {
								v_users5 = false;
							}
							if(!v_users5) {
								this.die("Expected ]");
							}
						}
						v_users = __ret;
					}
				} else if("groups".length == __name__.max - __name__.min && __name__.source.startsWith("groups",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_groups1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_groups1 = true;
					} else {
						v_groups1 = false;
					}
					if(v_groups1) {
						v_groups = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_groups2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_groups2 = true;
						} else {
							v_groups2 = false;
						}
						if(!v_groups2) {
							this.die("Expected [");
						}
						var __ret1 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_groups3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_groups3 = true;
						} else {
							v_groups3 = false;
						}
						if(!v_groups3) {
							while(true) {
								__ret1.push(tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString()));
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_groups4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_groups4 = true;
								} else {
									v_groups4 = false;
								}
								if(!v_groups4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_groups5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_groups5 = true;
							} else {
								v_groups5 = false;
							}
							if(!v_groups5) {
								this.die("Expected ]");
							}
						}
						v_groups = __ret1;
					}
				} else if("domainUsersCanEdit".length == __name__.max - __name__.min && __name__.source.startsWith("domainUsersCanEdit",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_domainUsersCanEdit1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_domainUsersCanEdit1 = true;
					} else {
						v_domainUsersCanEdit1 = false;
					}
					if(v_domainUsersCanEdit1) {
						v_domainUsersCanEdit = null;
					} else {
						v_domainUsersCanEdit = this.parseBool();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { domainUsersCanEdit : v_domainUsersCanEdit, groups : v_groups, users : v_users};
	}
	,parse: function(source) {
		this.init(source);
		return this.parse0();
	}
	,tryParse: function(source) {
		var _gthis = this;
		return tink_core_TypedError.catchExceptions(function() {
			return _gthis.parse(source);
		},null,{ fileName : "Macro.hx", lineNumber : 67, className : "tink.json.Parser0", methodName : "tryParse"});
	}
	,__class__: tink_json_Parser0
});
var tink_json_Parser1 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser1.__name__ = true;
tink_json_Parser1.__super__ = tink_json_BasicParser;
tink_json_Parser1.prototype = $extend(tink_json_BasicParser.prototype,{
	parse0: function() {
		var _gthis = this;
		var v_replies = null;
		var v_spreadsheetId = null;
		var v_updatedSpreadsheet = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("updatedSpreadsheet".length == __name__.max - __name__.min && __name__.source.startsWith("updatedSpreadsheet",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updatedSpreadsheet1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updatedSpreadsheet1 = true;
					} else {
						v_updatedSpreadsheet1 = false;
					}
					if(v_updatedSpreadsheet1) {
						v_updatedSpreadsheet = null;
					} else {
						v_updatedSpreadsheet = this.parse49();
					}
				} else if("spreadsheetId".length == __name__.max - __name__.min && __name__.source.startsWith("spreadsheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_spreadsheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_spreadsheetId1 = true;
					} else {
						v_spreadsheetId1 = false;
					}
					if(v_spreadsheetId1) {
						v_spreadsheetId = null;
					} else {
						v_spreadsheetId = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("replies".length == __name__.max - __name__.min && __name__.source.startsWith("replies",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_replies1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_replies1 = true;
					} else {
						v_replies1 = false;
					}
					if(v_replies1) {
						v_replies = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_replies2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_replies2 = true;
						} else {
							v_replies2 = false;
						}
						if(!v_replies2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_replies3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_replies3 = true;
						} else {
							v_replies3 = false;
						}
						if(!v_replies3) {
							while(true) {
								__ret.push(this.parse1());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_replies4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_replies4 = true;
								} else {
									v_replies4 = false;
								}
								if(!v_replies4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_replies5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_replies5 = true;
							} else {
								v_replies5 = false;
							}
							if(!v_replies5) {
								this.die("Expected ]");
							}
						}
						v_replies = __ret;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { replies : v_replies, spreadsheetId : v_spreadsheetId, updatedSpreadsheet : v_updatedSpreadsheet};
	}
	,parse1: function() {
		var _gthis = this;
		var v_addBanding = null;
		var v_addChart = null;
		var v_addFilterView = null;
		var v_addNamedRange = null;
		var v_addProtectedRange = null;
		var v_addSheet = null;
		var v_deleteConditionalFormatRule = null;
		var v_duplicateFilterView = null;
		var v_duplicateSheet = null;
		var v_findReplace = null;
		var v_updateConditionalFormatRule = null;
		var v_updateEmbeddedObjectPosition = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("updateEmbeddedObjectPosition".length == __name__.max - __name__.min && __name__.source.startsWith("updateEmbeddedObjectPosition",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updateEmbeddedObjectPosition1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updateEmbeddedObjectPosition1 = true;
					} else {
						v_updateEmbeddedObjectPosition1 = false;
					}
					if(v_updateEmbeddedObjectPosition1) {
						v_updateEmbeddedObjectPosition = null;
					} else {
						v_updateEmbeddedObjectPosition = this.parse48();
					}
				} else if("updateConditionalFormatRule".length == __name__.max - __name__.min && __name__.source.startsWith("updateConditionalFormatRule",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updateConditionalFormatRule1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updateConditionalFormatRule1 = true;
					} else {
						v_updateConditionalFormatRule1 = false;
					}
					if(v_updateConditionalFormatRule1) {
						v_updateConditionalFormatRule = null;
					} else {
						v_updateConditionalFormatRule = this.parse47();
					}
				} else if("findReplace".length == __name__.max - __name__.min && __name__.source.startsWith("findReplace",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_findReplace1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_findReplace1 = true;
					} else {
						v_findReplace1 = false;
					}
					if(v_findReplace1) {
						v_findReplace = null;
					} else {
						v_findReplace = this.parse46();
					}
				} else if("duplicateSheet".length == __name__.max - __name__.min && __name__.source.startsWith("duplicateSheet",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_duplicateSheet1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_duplicateSheet1 = true;
					} else {
						v_duplicateSheet1 = false;
					}
					if(v_duplicateSheet1) {
						v_duplicateSheet = null;
					} else {
						v_duplicateSheet = this.parse32();
					}
				} else if("duplicateFilterView".length == __name__.max - __name__.min && __name__.source.startsWith("duplicateFilterView",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_duplicateFilterView1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_duplicateFilterView1 = true;
					} else {
						v_duplicateFilterView1 = false;
					}
					if(v_duplicateFilterView1) {
						v_duplicateFilterView = null;
					} else {
						v_duplicateFilterView = this.parse21();
					}
				} else if("deleteConditionalFormatRule".length == __name__.max - __name__.min && __name__.source.startsWith("deleteConditionalFormatRule",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_deleteConditionalFormatRule1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_deleteConditionalFormatRule1 = true;
					} else {
						v_deleteConditionalFormatRule1 = false;
					}
					if(v_deleteConditionalFormatRule1) {
						v_deleteConditionalFormatRule = null;
					} else {
						v_deleteConditionalFormatRule = this.parse35();
					}
				} else if("addSheet".length == __name__.max - __name__.min && __name__.source.startsWith("addSheet",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_addSheet1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_addSheet1 = true;
					} else {
						v_addSheet1 = false;
					}
					if(v_addSheet1) {
						v_addSheet = null;
					} else {
						v_addSheet = this.parse32();
					}
				} else if("addProtectedRange".length == __name__.max - __name__.min && __name__.source.startsWith("addProtectedRange",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_addProtectedRange1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_addProtectedRange1 = true;
					} else {
						v_addProtectedRange1 = false;
					}
					if(v_addProtectedRange1) {
						v_addProtectedRange = null;
					} else {
						v_addProtectedRange = this.parse29();
					}
				} else if("addNamedRange".length == __name__.max - __name__.min && __name__.source.startsWith("addNamedRange",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_addNamedRange1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_addNamedRange1 = true;
					} else {
						v_addNamedRange1 = false;
					}
					if(v_addNamedRange1) {
						v_addNamedRange = null;
					} else {
						v_addNamedRange = this.parse27();
					}
				} else if("addFilterView".length == __name__.max - __name__.min && __name__.source.startsWith("addFilterView",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_addFilterView1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_addFilterView1 = true;
					} else {
						v_addFilterView1 = false;
					}
					if(v_addFilterView1) {
						v_addFilterView = null;
					} else {
						v_addFilterView = this.parse21();
					}
				} else if("addChart".length == __name__.max - __name__.min && __name__.source.startsWith("addChart",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_addChart1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_addChart1 = true;
					} else {
						v_addChart1 = false;
					}
					if(v_addChart1) {
						v_addChart = null;
					} else {
						v_addChart = this.parse7();
					}
				} else if("addBanding".length == __name__.max - __name__.min && __name__.source.startsWith("addBanding",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_addBanding1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_addBanding1 = true;
					} else {
						v_addBanding1 = false;
					}
					if(v_addBanding1) {
						v_addBanding = null;
					} else {
						v_addBanding = this.parse2();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { addBanding : v_addBanding, addChart : v_addChart, addFilterView : v_addFilterView, addNamedRange : v_addNamedRange, addProtectedRange : v_addProtectedRange, addSheet : v_addSheet, deleteConditionalFormatRule : v_deleteConditionalFormatRule, duplicateFilterView : v_duplicateFilterView, duplicateSheet : v_duplicateSheet, findReplace : v_findReplace, updateConditionalFormatRule : v_updateConditionalFormatRule, updateEmbeddedObjectPosition : v_updateEmbeddedObjectPosition};
	}
	,parse2: function() {
		var _gthis = this;
		var v_bandedRange = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("bandedRange".length == __name__.max - __name__.min && __name__.source.startsWith("bandedRange",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_bandedRange1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_bandedRange1 = true;
					} else {
						v_bandedRange1 = false;
					}
					if(v_bandedRange1) {
						v_bandedRange = null;
					} else {
						v_bandedRange = this.parse3();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { bandedRange : v_bandedRange};
	}
	,parse3: function() {
		var _gthis = this;
		var v_bandedRangeId = null;
		var v_columnProperties = null;
		var v_range = null;
		var v_rowProperties = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("rowProperties".length == __name__.max - __name__.min && __name__.source.startsWith("rowProperties",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rowProperties1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rowProperties1 = true;
					} else {
						v_rowProperties1 = false;
					}
					if(v_rowProperties1) {
						v_rowProperties = null;
					} else {
						v_rowProperties = this.parse4();
					}
				} else if("range".length == __name__.max - __name__.min && __name__.source.startsWith("range",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_range1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_range1 = true;
					} else {
						v_range1 = false;
					}
					if(v_range1) {
						v_range = null;
					} else {
						v_range = this.parse6();
					}
				} else if("columnProperties".length == __name__.max - __name__.min && __name__.source.startsWith("columnProperties",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_columnProperties1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_columnProperties1 = true;
					} else {
						v_columnProperties1 = false;
					}
					if(v_columnProperties1) {
						v_columnProperties = null;
					} else {
						v_columnProperties = this.parse4();
					}
				} else if("bandedRangeId".length == __name__.max - __name__.min && __name__.source.startsWith("bandedRangeId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_bandedRangeId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_bandedRangeId1 = true;
					} else {
						v_bandedRangeId1 = false;
					}
					if(v_bandedRangeId1) {
						v_bandedRangeId = null;
					} else {
						var this1 = this.parseNumber();
						v_bandedRangeId = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { bandedRangeId : v_bandedRangeId, columnProperties : v_columnProperties, range : v_range, rowProperties : v_rowProperties};
	}
	,parse4: function() {
		var _gthis = this;
		var v_firstBandColor = null;
		var v_footerColor = null;
		var v_headerColor = null;
		var v_secondBandColor = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("secondBandColor".length == __name__.max - __name__.min && __name__.source.startsWith("secondBandColor",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_secondBandColor1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_secondBandColor1 = true;
					} else {
						v_secondBandColor1 = false;
					}
					if(v_secondBandColor1) {
						v_secondBandColor = null;
					} else {
						v_secondBandColor = this.parse5();
					}
				} else if("headerColor".length == __name__.max - __name__.min && __name__.source.startsWith("headerColor",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_headerColor1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_headerColor1 = true;
					} else {
						v_headerColor1 = false;
					}
					if(v_headerColor1) {
						v_headerColor = null;
					} else {
						v_headerColor = this.parse5();
					}
				} else if("footerColor".length == __name__.max - __name__.min && __name__.source.startsWith("footerColor",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_footerColor1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_footerColor1 = true;
					} else {
						v_footerColor1 = false;
					}
					if(v_footerColor1) {
						v_footerColor = null;
					} else {
						v_footerColor = this.parse5();
					}
				} else if("firstBandColor".length == __name__.max - __name__.min && __name__.source.startsWith("firstBandColor",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_firstBandColor1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_firstBandColor1 = true;
					} else {
						v_firstBandColor1 = false;
					}
					if(v_firstBandColor1) {
						v_firstBandColor = null;
					} else {
						v_firstBandColor = this.parse5();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { firstBandColor : v_firstBandColor, footerColor : v_footerColor, headerColor : v_headerColor, secondBandColor : v_secondBandColor};
	}
	,parse5: function() {
		var _gthis = this;
		var v_alpha = null;
		var v_blue = null;
		var v_green = null;
		var v_red = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("red".length == __name__.max - __name__.min && __name__.source.startsWith("red",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_red1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_red1 = true;
					} else {
						v_red1 = false;
					}
					if(v_red1) {
						v_red = null;
					} else {
						var this1 = this.parseNumber();
						v_red = parseFloat(this1.source.substring(this1.min,this1.max));
					}
				} else if("green".length == __name__.max - __name__.min && __name__.source.startsWith("green",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_green1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_green1 = true;
					} else {
						v_green1 = false;
					}
					if(v_green1) {
						v_green = null;
					} else {
						var this2 = this.parseNumber();
						v_green = parseFloat(this2.source.substring(this2.min,this2.max));
					}
				} else if("blue".length == __name__.max - __name__.min && __name__.source.startsWith("blue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_blue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_blue1 = true;
					} else {
						v_blue1 = false;
					}
					if(v_blue1) {
						v_blue = null;
					} else {
						var this3 = this.parseNumber();
						v_blue = parseFloat(this3.source.substring(this3.min,this3.max));
					}
				} else if("alpha".length == __name__.max - __name__.min && __name__.source.startsWith("alpha",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_alpha1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_alpha1 = true;
					} else {
						v_alpha1 = false;
					}
					if(v_alpha1) {
						v_alpha = null;
					} else {
						var this4 = this.parseNumber();
						v_alpha = parseFloat(this4.source.substring(this4.min,this4.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { alpha : v_alpha, blue : v_blue, green : v_green, red : v_red};
	}
	,parse6: function() {
		var _gthis = this;
		var v_endColumnIndex = null;
		var v_endRowIndex = null;
		var v_sheetId = null;
		var v_startColumnIndex = null;
		var v_startRowIndex = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("startRowIndex".length == __name__.max - __name__.min && __name__.source.startsWith("startRowIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_startRowIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_startRowIndex1 = true;
					} else {
						v_startRowIndex1 = false;
					}
					if(v_startRowIndex1) {
						v_startRowIndex = null;
					} else {
						var this1 = this.parseNumber();
						v_startRowIndex = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("startColumnIndex".length == __name__.max - __name__.min && __name__.source.startsWith("startColumnIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_startColumnIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_startColumnIndex1 = true;
					} else {
						v_startColumnIndex1 = false;
					}
					if(v_startColumnIndex1) {
						v_startColumnIndex = null;
					} else {
						var this2 = this.parseNumber();
						v_startColumnIndex = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("sheetId".length == __name__.max - __name__.min && __name__.source.startsWith("sheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sheetId1 = true;
					} else {
						v_sheetId1 = false;
					}
					if(v_sheetId1) {
						v_sheetId = null;
					} else {
						var this3 = this.parseNumber();
						v_sheetId = Std.parseInt(this3.source.substring(this3.min,this3.max));
					}
				} else if("endRowIndex".length == __name__.max - __name__.min && __name__.source.startsWith("endRowIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_endRowIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_endRowIndex1 = true;
					} else {
						v_endRowIndex1 = false;
					}
					if(v_endRowIndex1) {
						v_endRowIndex = null;
					} else {
						var this4 = this.parseNumber();
						v_endRowIndex = Std.parseInt(this4.source.substring(this4.min,this4.max));
					}
				} else if("endColumnIndex".length == __name__.max - __name__.min && __name__.source.startsWith("endColumnIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_endColumnIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_endColumnIndex1 = true;
					} else {
						v_endColumnIndex1 = false;
					}
					if(v_endColumnIndex1) {
						v_endColumnIndex = null;
					} else {
						var this5 = this.parseNumber();
						v_endColumnIndex = Std.parseInt(this5.source.substring(this5.min,this5.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { endColumnIndex : v_endColumnIndex, endRowIndex : v_endRowIndex, sheetId : v_sheetId, startColumnIndex : v_startColumnIndex, startRowIndex : v_startRowIndex};
	}
	,parse7: function() {
		var _gthis = this;
		var v_chart = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("chart".length == __name__.max - __name__.min && __name__.source.startsWith("chart",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_chart1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_chart1 = true;
					} else {
						v_chart1 = false;
					}
					if(v_chart1) {
						v_chart = null;
					} else {
						v_chart = this.parse8();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { chart : v_chart};
	}
	,parse8: function() {
		var _gthis = this;
		var v_chartId = null;
		var v_position = null;
		var v_spec = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("spec".length == __name__.max - __name__.min && __name__.source.startsWith("spec",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_spec1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_spec1 = true;
					} else {
						v_spec1 = false;
					}
					if(v_spec1) {
						v_spec = null;
					} else {
						v_spec = this.parse12();
					}
				} else if("position".length == __name__.max - __name__.min && __name__.source.startsWith("position",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_position1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_position1 = true;
					} else {
						v_position1 = false;
					}
					if(v_position1) {
						v_position = null;
					} else {
						v_position = this.parse9();
					}
				} else if("chartId".length == __name__.max - __name__.min && __name__.source.startsWith("chartId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_chartId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_chartId1 = true;
					} else {
						v_chartId1 = false;
					}
					if(v_chartId1) {
						v_chartId = null;
					} else {
						var this1 = this.parseNumber();
						v_chartId = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { chartId : v_chartId, position : v_position, spec : v_spec};
	}
	,parse9: function() {
		var _gthis = this;
		var v_newSheet = null;
		var v_overlayPosition = null;
		var v_sheetId = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("sheetId".length == __name__.max - __name__.min && __name__.source.startsWith("sheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sheetId1 = true;
					} else {
						v_sheetId1 = false;
					}
					if(v_sheetId1) {
						v_sheetId = null;
					} else {
						var this1 = this.parseNumber();
						v_sheetId = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("overlayPosition".length == __name__.max - __name__.min && __name__.source.startsWith("overlayPosition",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_overlayPosition1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_overlayPosition1 = true;
					} else {
						v_overlayPosition1 = false;
					}
					if(v_overlayPosition1) {
						v_overlayPosition = null;
					} else {
						v_overlayPosition = this.parse10();
					}
				} else if("newSheet".length == __name__.max - __name__.min && __name__.source.startsWith("newSheet",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_newSheet1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_newSheet1 = true;
					} else {
						v_newSheet1 = false;
					}
					if(v_newSheet1) {
						v_newSheet = null;
					} else {
						v_newSheet = this.parseBool();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { newSheet : v_newSheet, overlayPosition : v_overlayPosition, sheetId : v_sheetId};
	}
	,parse10: function() {
		var _gthis = this;
		var v_anchorCell = null;
		var v_heightPixels = null;
		var v_offsetXPixels = null;
		var v_offsetYPixels = null;
		var v_widthPixels = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("widthPixels".length == __name__.max - __name__.min && __name__.source.startsWith("widthPixels",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_widthPixels1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_widthPixels1 = true;
					} else {
						v_widthPixels1 = false;
					}
					if(v_widthPixels1) {
						v_widthPixels = null;
					} else {
						var this1 = this.parseNumber();
						v_widthPixels = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("offsetYPixels".length == __name__.max - __name__.min && __name__.source.startsWith("offsetYPixels",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_offsetYPixels1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_offsetYPixels1 = true;
					} else {
						v_offsetYPixels1 = false;
					}
					if(v_offsetYPixels1) {
						v_offsetYPixels = null;
					} else {
						var this2 = this.parseNumber();
						v_offsetYPixels = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("offsetXPixels".length == __name__.max - __name__.min && __name__.source.startsWith("offsetXPixels",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_offsetXPixels1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_offsetXPixels1 = true;
					} else {
						v_offsetXPixels1 = false;
					}
					if(v_offsetXPixels1) {
						v_offsetXPixels = null;
					} else {
						var this3 = this.parseNumber();
						v_offsetXPixels = Std.parseInt(this3.source.substring(this3.min,this3.max));
					}
				} else if("heightPixels".length == __name__.max - __name__.min && __name__.source.startsWith("heightPixels",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_heightPixels1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_heightPixels1 = true;
					} else {
						v_heightPixels1 = false;
					}
					if(v_heightPixels1) {
						v_heightPixels = null;
					} else {
						var this4 = this.parseNumber();
						v_heightPixels = Std.parseInt(this4.source.substring(this4.min,this4.max));
					}
				} else if("anchorCell".length == __name__.max - __name__.min && __name__.source.startsWith("anchorCell",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_anchorCell1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_anchorCell1 = true;
					} else {
						v_anchorCell1 = false;
					}
					if(v_anchorCell1) {
						v_anchorCell = null;
					} else {
						v_anchorCell = this.parse11();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { anchorCell : v_anchorCell, heightPixels : v_heightPixels, offsetXPixels : v_offsetXPixels, offsetYPixels : v_offsetYPixels, widthPixels : v_widthPixels};
	}
	,parse11: function() {
		var _gthis = this;
		var v_columnIndex = null;
		var v_rowIndex = null;
		var v_sheetId = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("sheetId".length == __name__.max - __name__.min && __name__.source.startsWith("sheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sheetId1 = true;
					} else {
						v_sheetId1 = false;
					}
					if(v_sheetId1) {
						v_sheetId = null;
					} else {
						var this1 = this.parseNumber();
						v_sheetId = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("rowIndex".length == __name__.max - __name__.min && __name__.source.startsWith("rowIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rowIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rowIndex1 = true;
					} else {
						v_rowIndex1 = false;
					}
					if(v_rowIndex1) {
						v_rowIndex = null;
					} else {
						var this2 = this.parseNumber();
						v_rowIndex = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("columnIndex".length == __name__.max - __name__.min && __name__.source.startsWith("columnIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_columnIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_columnIndex1 = true;
					} else {
						v_columnIndex1 = false;
					}
					if(v_columnIndex1) {
						v_columnIndex = null;
					} else {
						var this3 = this.parseNumber();
						v_columnIndex = Std.parseInt(this3.source.substring(this3.min,this3.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { columnIndex : v_columnIndex, rowIndex : v_rowIndex, sheetId : v_sheetId};
	}
	,parse12: function() {
		var _gthis = this;
		var v_basicChart = null;
		var v_hiddenDimensionStrategy = null;
		var v_pieChart = null;
		var v_title = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("title".length == __name__.max - __name__.min && __name__.source.startsWith("title",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_title1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_title1 = true;
					} else {
						v_title1 = false;
					}
					if(v_title1) {
						v_title = null;
					} else {
						v_title = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("pieChart".length == __name__.max - __name__.min && __name__.source.startsWith("pieChart",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_pieChart1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_pieChart1 = true;
					} else {
						v_pieChart1 = false;
					}
					if(v_pieChart1) {
						v_pieChart = null;
					} else {
						v_pieChart = this.parse20();
					}
				} else if("hiddenDimensionStrategy".length == __name__.max - __name__.min && __name__.source.startsWith("hiddenDimensionStrategy",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hiddenDimensionStrategy1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hiddenDimensionStrategy1 = true;
					} else {
						v_hiddenDimensionStrategy1 = false;
					}
					if(v_hiddenDimensionStrategy1) {
						v_hiddenDimensionStrategy = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED":case "SHOW_ALL":case "SKIP_HIDDEN_COLUMNS":case "SKIP_HIDDEN_ROWS":case "SKIP_HIDDEN_ROWS_AND_COLUMNS":
							v_hiddenDimensionStrategy = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse12"}));
						}
					}
				} else if("basicChart".length == __name__.max - __name__.min && __name__.source.startsWith("basicChart",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_basicChart1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_basicChart1 = true;
					} else {
						v_basicChart1 = false;
					}
					if(v_basicChart1) {
						v_basicChart = null;
					} else {
						v_basicChart = this.parse13();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { basicChart : v_basicChart, hiddenDimensionStrategy : v_hiddenDimensionStrategy, pieChart : v_pieChart, title : v_title};
	}
	,parse13: function() {
		var _gthis = this;
		var v_axis = null;
		var v_chartType = null;
		var v_domains = null;
		var v_headerCount = null;
		var v_legendPosition = null;
		var v_series = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("series".length == __name__.max - __name__.min && __name__.source.startsWith("series",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_series1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_series1 = true;
					} else {
						v_series1 = false;
					}
					if(v_series1) {
						v_series = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_series2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_series2 = true;
						} else {
							v_series2 = false;
						}
						if(!v_series2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_series3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_series3 = true;
						} else {
							v_series3 = false;
						}
						if(!v_series3) {
							while(true) {
								__ret.push(this.parse19());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_series4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_series4 = true;
								} else {
									v_series4 = false;
								}
								if(!v_series4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_series5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_series5 = true;
							} else {
								v_series5 = false;
							}
							if(!v_series5) {
								this.die("Expected ]");
							}
						}
						v_series = __ret;
					}
				} else if("legendPosition".length == __name__.max - __name__.min && __name__.source.startsWith("legendPosition",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_legendPosition1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_legendPosition1 = true;
					} else {
						v_legendPosition1 = false;
					}
					if(v_legendPosition1) {
						v_legendPosition = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "BASIC_CHART_LEGEND_POSITION_UNSPECIFIED":case "BOTTOM_LEGEND":case "LEFT_LEGEND":case "NO_LEGEND":case "RIGHT_LEGEND":case "TOP_LEGEND":
							v_legendPosition = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse13"}));
						}
					}
				} else if("headerCount".length == __name__.max - __name__.min && __name__.source.startsWith("headerCount",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_headerCount1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_headerCount1 = true;
					} else {
						v_headerCount1 = false;
					}
					if(v_headerCount1) {
						v_headerCount = null;
					} else {
						var this1 = this.parseNumber();
						v_headerCount = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("domains".length == __name__.max - __name__.min && __name__.source.startsWith("domains",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_domains1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_domains1 = true;
					} else {
						v_domains1 = false;
					}
					if(v_domains1) {
						v_domains = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_domains2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_domains2 = true;
						} else {
							v_domains2 = false;
						}
						if(!v_domains2) {
							this.die("Expected [");
						}
						var __ret1 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_domains3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_domains3 = true;
						} else {
							v_domains3 = false;
						}
						if(!v_domains3) {
							while(true) {
								__ret1.push(this.parse16());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_domains4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_domains4 = true;
								} else {
									v_domains4 = false;
								}
								if(!v_domains4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_domains5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_domains5 = true;
							} else {
								v_domains5 = false;
							}
							if(!v_domains5) {
								this.die("Expected ]");
							}
						}
						v_domains = __ret1;
					}
				} else if("chartType".length == __name__.max - __name__.min && __name__.source.startsWith("chartType",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_chartType1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_chartType1 = true;
					} else {
						v_chartType1 = false;
					}
					if(v_chartType1) {
						v_chartType = null;
					} else {
						var v1 = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v1) {
						case "AREA":case "BAR":case "BASIC_CHART_TYPE_UNSPECIFIED":case "COLUMN":case "COMBO":case "LINE":case "SCATTER":
							v_chartType = v1;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v1,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse13"}));
						}
					}
				} else if("axis".length == __name__.max - __name__.min && __name__.source.startsWith("axis",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_axis1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_axis1 = true;
					} else {
						v_axis1 = false;
					}
					if(v_axis1) {
						v_axis = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_axis2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_axis2 = true;
						} else {
							v_axis2 = false;
						}
						if(!v_axis2) {
							this.die("Expected [");
						}
						var __ret2 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_axis3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_axis3 = true;
						} else {
							v_axis3 = false;
						}
						if(!v_axis3) {
							while(true) {
								__ret2.push(this.parse14());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_axis4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_axis4 = true;
								} else {
									v_axis4 = false;
								}
								if(!v_axis4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_axis5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_axis5 = true;
							} else {
								v_axis5 = false;
							}
							if(!v_axis5) {
								this.die("Expected ]");
							}
						}
						v_axis = __ret2;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { axis : v_axis, chartType : v_chartType, domains : v_domains, headerCount : v_headerCount, legendPosition : v_legendPosition, series : v_series};
	}
	,parse14: function() {
		var _gthis = this;
		var v_format = null;
		var v_position = null;
		var v_title = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("title".length == __name__.max - __name__.min && __name__.source.startsWith("title",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_title1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_title1 = true;
					} else {
						v_title1 = false;
					}
					if(v_title1) {
						v_title = null;
					} else {
						v_title = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("position".length == __name__.max - __name__.min && __name__.source.startsWith("position",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_position1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_position1 = true;
					} else {
						v_position1 = false;
					}
					if(v_position1) {
						v_position = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "BASIC_CHART_AXIS_POSITION_UNSPECIFIED":case "BOTTOM_AXIS":case "LEFT_AXIS":case "RIGHT_AXIS":
							v_position = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse14"}));
						}
					}
				} else if("format".length == __name__.max - __name__.min && __name__.source.startsWith("format",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_format1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_format1 = true;
					} else {
						v_format1 = false;
					}
					if(v_format1) {
						v_format = null;
					} else {
						v_format = this.parse15();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { format : v_format, position : v_position, title : v_title};
	}
	,parse15: function() {
		var _gthis = this;
		var v_bold = null;
		var v_fontFamily = null;
		var v_fontSize = null;
		var v_foregroundColor = null;
		var v_italic = null;
		var v_strikethrough = null;
		var v_underline = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("underline".length == __name__.max - __name__.min && __name__.source.startsWith("underline",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_underline1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_underline1 = true;
					} else {
						v_underline1 = false;
					}
					if(v_underline1) {
						v_underline = null;
					} else {
						v_underline = this.parseBool();
					}
				} else if("strikethrough".length == __name__.max - __name__.min && __name__.source.startsWith("strikethrough",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_strikethrough1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_strikethrough1 = true;
					} else {
						v_strikethrough1 = false;
					}
					if(v_strikethrough1) {
						v_strikethrough = null;
					} else {
						v_strikethrough = this.parseBool();
					}
				} else if("italic".length == __name__.max - __name__.min && __name__.source.startsWith("italic",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_italic1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_italic1 = true;
					} else {
						v_italic1 = false;
					}
					if(v_italic1) {
						v_italic = null;
					} else {
						v_italic = this.parseBool();
					}
				} else if("foregroundColor".length == __name__.max - __name__.min && __name__.source.startsWith("foregroundColor",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_foregroundColor1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_foregroundColor1 = true;
					} else {
						v_foregroundColor1 = false;
					}
					if(v_foregroundColor1) {
						v_foregroundColor = null;
					} else {
						v_foregroundColor = this.parse5();
					}
				} else if("fontSize".length == __name__.max - __name__.min && __name__.source.startsWith("fontSize",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_fontSize1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_fontSize1 = true;
					} else {
						v_fontSize1 = false;
					}
					if(v_fontSize1) {
						v_fontSize = null;
					} else {
						var this1 = this.parseNumber();
						v_fontSize = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("fontFamily".length == __name__.max - __name__.min && __name__.source.startsWith("fontFamily",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_fontFamily1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_fontFamily1 = true;
					} else {
						v_fontFamily1 = false;
					}
					if(v_fontFamily1) {
						v_fontFamily = null;
					} else {
						v_fontFamily = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("bold".length == __name__.max - __name__.min && __name__.source.startsWith("bold",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_bold1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_bold1 = true;
					} else {
						v_bold1 = false;
					}
					if(v_bold1) {
						v_bold = null;
					} else {
						v_bold = this.parseBool();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { bold : v_bold, fontFamily : v_fontFamily, fontSize : v_fontSize, foregroundColor : v_foregroundColor, italic : v_italic, strikethrough : v_strikethrough, underline : v_underline};
	}
	,parse16: function() {
		var _gthis = this;
		var v_domain = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("domain".length == __name__.max - __name__.min && __name__.source.startsWith("domain",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_domain1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_domain1 = true;
					} else {
						v_domain1 = false;
					}
					if(v_domain1) {
						v_domain = null;
					} else {
						v_domain = this.parse17();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { domain : v_domain};
	}
	,parse17: function() {
		var _gthis = this;
		var v_sourceRange = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("sourceRange".length == __name__.max - __name__.min && __name__.source.startsWith("sourceRange",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sourceRange1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sourceRange1 = true;
					} else {
						v_sourceRange1 = false;
					}
					if(v_sourceRange1) {
						v_sourceRange = null;
					} else {
						v_sourceRange = this.parse18();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { sourceRange : v_sourceRange};
	}
	,parse18: function() {
		var _gthis = this;
		var v_sources = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("sources".length == __name__.max - __name__.min && __name__.source.startsWith("sources",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sources1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sources1 = true;
					} else {
						v_sources1 = false;
					}
					if(v_sources1) {
						v_sources = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_sources2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_sources2 = true;
						} else {
							v_sources2 = false;
						}
						if(!v_sources2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_sources3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_sources3 = true;
						} else {
							v_sources3 = false;
						}
						if(!v_sources3) {
							while(true) {
								__ret.push(this.parse6());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_sources4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_sources4 = true;
								} else {
									v_sources4 = false;
								}
								if(!v_sources4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_sources5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_sources5 = true;
							} else {
								v_sources5 = false;
							}
							if(!v_sources5) {
								this.die("Expected ]");
							}
						}
						v_sources = __ret;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { sources : v_sources};
	}
	,parse19: function() {
		var _gthis = this;
		var v_series = null;
		var v_targetAxis = null;
		var v_type = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("type".length == __name__.max - __name__.min && __name__.source.startsWith("type",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_type1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_type1 = true;
					} else {
						v_type1 = false;
					}
					if(v_type1) {
						v_type = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "AREA":case "BAR":case "BASIC_CHART_TYPE_UNSPECIFIED":case "COLUMN":case "COMBO":case "LINE":case "SCATTER":
							v_type = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse19"}));
						}
					}
				} else if("targetAxis".length == __name__.max - __name__.min && __name__.source.startsWith("targetAxis",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_targetAxis1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_targetAxis1 = true;
					} else {
						v_targetAxis1 = false;
					}
					if(v_targetAxis1) {
						v_targetAxis = null;
					} else {
						var v1 = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v1) {
						case "BASIC_CHART_AXIS_POSITION_UNSPECIFIED":case "BOTTOM_AXIS":case "LEFT_AXIS":case "RIGHT_AXIS":
							v_targetAxis = v1;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v1,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse19"}));
						}
					}
				} else if("series".length == __name__.max - __name__.min && __name__.source.startsWith("series",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_series1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_series1 = true;
					} else {
						v_series1 = false;
					}
					if(v_series1) {
						v_series = null;
					} else {
						v_series = this.parse17();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { series : v_series, targetAxis : v_targetAxis, type : v_type};
	}
	,parse20: function() {
		var _gthis = this;
		var v_domain = null;
		var v_legendPosition = null;
		var v_pieHole = null;
		var v_series = null;
		var v_threeDimensional = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("threeDimensional".length == __name__.max - __name__.min && __name__.source.startsWith("threeDimensional",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_threeDimensional1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_threeDimensional1 = true;
					} else {
						v_threeDimensional1 = false;
					}
					if(v_threeDimensional1) {
						v_threeDimensional = null;
					} else {
						v_threeDimensional = this.parseBool();
					}
				} else if("series".length == __name__.max - __name__.min && __name__.source.startsWith("series",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_series1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_series1 = true;
					} else {
						v_series1 = false;
					}
					if(v_series1) {
						v_series = null;
					} else {
						v_series = this.parse17();
					}
				} else if("pieHole".length == __name__.max - __name__.min && __name__.source.startsWith("pieHole",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_pieHole1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_pieHole1 = true;
					} else {
						v_pieHole1 = false;
					}
					if(v_pieHole1) {
						v_pieHole = null;
					} else {
						var this1 = this.parseNumber();
						v_pieHole = parseFloat(this1.source.substring(this1.min,this1.max));
					}
				} else if("legendPosition".length == __name__.max - __name__.min && __name__.source.startsWith("legendPosition",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_legendPosition1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_legendPosition1 = true;
					} else {
						v_legendPosition1 = false;
					}
					if(v_legendPosition1) {
						v_legendPosition = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "BOTTOM_LEGEND":case "LABELED_LEGEND":case "LEFT_LEGEND":case "NO_LEGEND":case "PIE_CHART_LEGEND_POSITION_UNSPECIFIED":case "RIGHT_LEGEND":case "TOP_LEGEND":
							v_legendPosition = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse20"}));
						}
					}
				} else if("domain".length == __name__.max - __name__.min && __name__.source.startsWith("domain",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_domain1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_domain1 = true;
					} else {
						v_domain1 = false;
					}
					if(v_domain1) {
						v_domain = null;
					} else {
						v_domain = this.parse17();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { domain : v_domain, legendPosition : v_legendPosition, pieHole : v_pieHole, series : v_series, threeDimensional : v_threeDimensional};
	}
	,parse21: function() {
		var _gthis = this;
		var v_filter = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("filter".length == __name__.max - __name__.min && __name__.source.startsWith("filter",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_filter1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_filter1 = true;
					} else {
						v_filter1 = false;
					}
					if(v_filter1) {
						v_filter = null;
					} else {
						v_filter = this.parse22();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { filter : v_filter};
	}
	,parse22: function() {
		var _gthis = this;
		var v_criteria = null;
		var v_filterViewId = null;
		var v_namedRangeId = null;
		var v_range = null;
		var v_sortSpecs = null;
		var v_title = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("title".length == __name__.max - __name__.min && __name__.source.startsWith("title",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_title1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_title1 = true;
					} else {
						v_title1 = false;
					}
					if(v_title1) {
						v_title = null;
					} else {
						v_title = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("sortSpecs".length == __name__.max - __name__.min && __name__.source.startsWith("sortSpecs",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sortSpecs1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sortSpecs1 = true;
					} else {
						v_sortSpecs1 = false;
					}
					if(v_sortSpecs1) {
						v_sortSpecs = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_sortSpecs2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_sortSpecs2 = true;
						} else {
							v_sortSpecs2 = false;
						}
						if(!v_sortSpecs2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_sortSpecs3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_sortSpecs3 = true;
						} else {
							v_sortSpecs3 = false;
						}
						if(!v_sortSpecs3) {
							while(true) {
								__ret.push(this.parse26());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_sortSpecs4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_sortSpecs4 = true;
								} else {
									v_sortSpecs4 = false;
								}
								if(!v_sortSpecs4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_sortSpecs5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_sortSpecs5 = true;
							} else {
								v_sortSpecs5 = false;
							}
							if(!v_sortSpecs5) {
								this.die("Expected ]");
							}
						}
						v_sortSpecs = __ret;
					}
				} else if("range".length == __name__.max - __name__.min && __name__.source.startsWith("range",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_range1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_range1 = true;
					} else {
						v_range1 = false;
					}
					if(v_range1) {
						v_range = null;
					} else {
						v_range = this.parse6();
					}
				} else if("namedRangeId".length == __name__.max - __name__.min && __name__.source.startsWith("namedRangeId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_namedRangeId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_namedRangeId1 = true;
					} else {
						v_namedRangeId1 = false;
					}
					if(v_namedRangeId1) {
						v_namedRangeId = null;
					} else {
						v_namedRangeId = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("filterViewId".length == __name__.max - __name__.min && __name__.source.startsWith("filterViewId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_filterViewId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_filterViewId1 = true;
					} else {
						v_filterViewId1 = false;
					}
					if(v_filterViewId1) {
						v_filterViewId = null;
					} else {
						var this1 = this.parseNumber();
						v_filterViewId = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("criteria".length == __name__.max - __name__.min && __name__.source.startsWith("criteria",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_criteria1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_criteria1 = true;
					} else {
						v_criteria1 = false;
					}
					if(v_criteria1) {
						v_criteria = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_criteria2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_criteria2 = true;
						} else {
							v_criteria2 = false;
						}
						if(!v_criteria2) {
							this.die("Expected {");
						}
						var this2 = { };
						var __ret1 = this2;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_criteria3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_criteria3 = true;
						} else {
							v_criteria3 = false;
						}
						if(!v_criteria3) {
							while(true) {
								var key = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
								var e;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var e1;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									e1 = true;
								} else {
									e1 = false;
								}
								if(!e1) {
									e = this.die("Expected :");
								} else {
									e = null;
								}
								__ret1[key] = this.parse23();
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_criteria4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_criteria4 = true;
								} else {
									v_criteria4 = false;
								}
								if(!v_criteria4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_criteria5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_criteria5 = true;
							} else {
								v_criteria5 = false;
							}
							if(!v_criteria5) {
								this.die("Expected }");
							}
						}
						v_criteria = __ret1;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { criteria : v_criteria, filterViewId : v_filterViewId, namedRangeId : v_namedRangeId, range : v_range, sortSpecs : v_sortSpecs, title : v_title};
	}
	,parse23: function() {
		var _gthis = this;
		var v_condition = null;
		var v_hiddenValues = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("hiddenValues".length == __name__.max - __name__.min && __name__.source.startsWith("hiddenValues",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hiddenValues1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hiddenValues1 = true;
					} else {
						v_hiddenValues1 = false;
					}
					if(v_hiddenValues1) {
						v_hiddenValues = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_hiddenValues2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_hiddenValues2 = true;
						} else {
							v_hiddenValues2 = false;
						}
						if(!v_hiddenValues2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_hiddenValues3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_hiddenValues3 = true;
						} else {
							v_hiddenValues3 = false;
						}
						if(!v_hiddenValues3) {
							while(true) {
								__ret.push(tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString()));
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_hiddenValues4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_hiddenValues4 = true;
								} else {
									v_hiddenValues4 = false;
								}
								if(!v_hiddenValues4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_hiddenValues5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_hiddenValues5 = true;
							} else {
								v_hiddenValues5 = false;
							}
							if(!v_hiddenValues5) {
								this.die("Expected ]");
							}
						}
						v_hiddenValues = __ret;
					}
				} else if("condition".length == __name__.max - __name__.min && __name__.source.startsWith("condition",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_condition1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_condition1 = true;
					} else {
						v_condition1 = false;
					}
					if(v_condition1) {
						v_condition = null;
					} else {
						v_condition = this.parse24();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { condition : v_condition, hiddenValues : v_hiddenValues};
	}
	,parse24: function() {
		var _gthis = this;
		var v_type = null;
		var v_values = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("values".length == __name__.max - __name__.min && __name__.source.startsWith("values",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_values1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_values1 = true;
					} else {
						v_values1 = false;
					}
					if(v_values1) {
						v_values = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values2 = true;
						} else {
							v_values2 = false;
						}
						if(!v_values2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values3 = true;
						} else {
							v_values3 = false;
						}
						if(!v_values3) {
							while(true) {
								__ret.push(this.parse25());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values4 = true;
								} else {
									v_values4 = false;
								}
								if(!v_values4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_values5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_values5 = true;
							} else {
								v_values5 = false;
							}
							if(!v_values5) {
								this.die("Expected ]");
							}
						}
						v_values = __ret;
					}
				} else if("type".length == __name__.max - __name__.min && __name__.source.startsWith("type",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_type1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_type1 = true;
					} else {
						v_type1 = false;
					}
					if(v_type1) {
						v_type = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "BLANK":case "CONDITION_TYPE_UNSPECIFIED":case "CUSTOM_FORMULA":case "DATE_AFTER":case "DATE_BEFORE":case "DATE_BETWEEN":case "DATE_EQ":case "DATE_IS_VALID":case "DATE_NOT_BETWEEN":case "DATE_ON_OR_AFTER":case "DATE_ON_OR_BEFORE":case "NOT_BLANK":case "NUMBER_BETWEEN":case "NUMBER_EQ":case "NUMBER_GREATER":case "NUMBER_GREATER_THAN_EQ":case "NUMBER_LESS":case "NUMBER_LESS_THAN_EQ":case "NUMBER_NOT_BETWEEN":case "NUMBER_NOT_EQ":case "ONE_OF_LIST":case "ONE_OF_RANGE":case "TEXT_CONTAINS":case "TEXT_ENDS_WITH":case "TEXT_EQ":case "TEXT_IS_EMAIL":case "TEXT_IS_URL":case "TEXT_NOT_CONTAINS":case "TEXT_STARTS_WITH":
							v_type = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse24"}));
						}
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { type : v_type, values : v_values};
	}
	,parse25: function() {
		var _gthis = this;
		var v_relativeDate = null;
		var v_userEnteredValue = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("userEnteredValue".length == __name__.max - __name__.min && __name__.source.startsWith("userEnteredValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_userEnteredValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_userEnteredValue1 = true;
					} else {
						v_userEnteredValue1 = false;
					}
					if(v_userEnteredValue1) {
						v_userEnteredValue = null;
					} else {
						v_userEnteredValue = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("relativeDate".length == __name__.max - __name__.min && __name__.source.startsWith("relativeDate",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_relativeDate1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_relativeDate1 = true;
					} else {
						v_relativeDate1 = false;
					}
					if(v_relativeDate1) {
						v_relativeDate = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "PAST_MONTH":case "PAST_WEEK":case "PAST_YEAR":case "RELATIVE_DATE_UNSPECIFIED":case "TODAY":case "TOMORROW":case "YESTERDAY":
							v_relativeDate = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse25"}));
						}
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { relativeDate : v_relativeDate, userEnteredValue : v_userEnteredValue};
	}
	,parse26: function() {
		var _gthis = this;
		var v_dimensionIndex = null;
		var v_sortOrder = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("sortOrder".length == __name__.max - __name__.min && __name__.source.startsWith("sortOrder",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sortOrder1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sortOrder1 = true;
					} else {
						v_sortOrder1 = false;
					}
					if(v_sortOrder1) {
						v_sortOrder = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "ASCENDING":case "DESCENDING":case "SORT_ORDER_UNSPECIFIED":
							v_sortOrder = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse26"}));
						}
					}
				} else if("dimensionIndex".length == __name__.max - __name__.min && __name__.source.startsWith("dimensionIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_dimensionIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_dimensionIndex1 = true;
					} else {
						v_dimensionIndex1 = false;
					}
					if(v_dimensionIndex1) {
						v_dimensionIndex = null;
					} else {
						var this1 = this.parseNumber();
						v_dimensionIndex = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { dimensionIndex : v_dimensionIndex, sortOrder : v_sortOrder};
	}
	,parse27: function() {
		var _gthis = this;
		var v_namedRange = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("namedRange".length == __name__.max - __name__.min && __name__.source.startsWith("namedRange",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_namedRange1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_namedRange1 = true;
					} else {
						v_namedRange1 = false;
					}
					if(v_namedRange1) {
						v_namedRange = null;
					} else {
						v_namedRange = this.parse28();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { namedRange : v_namedRange};
	}
	,parse28: function() {
		var _gthis = this;
		var v_name = null;
		var v_namedRangeId = null;
		var v_range = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("range".length == __name__.max - __name__.min && __name__.source.startsWith("range",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_range1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_range1 = true;
					} else {
						v_range1 = false;
					}
					if(v_range1) {
						v_range = null;
					} else {
						v_range = this.parse6();
					}
				} else if("namedRangeId".length == __name__.max - __name__.min && __name__.source.startsWith("namedRangeId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_namedRangeId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_namedRangeId1 = true;
					} else {
						v_namedRangeId1 = false;
					}
					if(v_namedRangeId1) {
						v_namedRangeId = null;
					} else {
						v_namedRangeId = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("name".length == __name__.max - __name__.min && __name__.source.startsWith("name",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_name1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_name1 = true;
					} else {
						v_name1 = false;
					}
					if(v_name1) {
						v_name = null;
					} else {
						v_name = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { name : v_name, namedRangeId : v_namedRangeId, range : v_range};
	}
	,parse29: function() {
		var _gthis = this;
		var v_protectedRange = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("protectedRange".length == __name__.max - __name__.min && __name__.source.startsWith("protectedRange",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_protectedRange1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_protectedRange1 = true;
					} else {
						v_protectedRange1 = false;
					}
					if(v_protectedRange1) {
						v_protectedRange = null;
					} else {
						v_protectedRange = this.parse30();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { protectedRange : v_protectedRange};
	}
	,parse30: function() {
		var _gthis = this;
		var v_description = null;
		var v_editors = null;
		var v_namedRangeId = null;
		var v_protectedRangeId = null;
		var v_range = null;
		var v_requestingUserCanEdit = null;
		var v_unprotectedRanges = null;
		var v_warningOnly = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("warningOnly".length == __name__.max - __name__.min && __name__.source.startsWith("warningOnly",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_warningOnly1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_warningOnly1 = true;
					} else {
						v_warningOnly1 = false;
					}
					if(v_warningOnly1) {
						v_warningOnly = null;
					} else {
						v_warningOnly = this.parseBool();
					}
				} else if("unprotectedRanges".length == __name__.max - __name__.min && __name__.source.startsWith("unprotectedRanges",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_unprotectedRanges1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_unprotectedRanges1 = true;
					} else {
						v_unprotectedRanges1 = false;
					}
					if(v_unprotectedRanges1) {
						v_unprotectedRanges = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_unprotectedRanges2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_unprotectedRanges2 = true;
						} else {
							v_unprotectedRanges2 = false;
						}
						if(!v_unprotectedRanges2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_unprotectedRanges3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_unprotectedRanges3 = true;
						} else {
							v_unprotectedRanges3 = false;
						}
						if(!v_unprotectedRanges3) {
							while(true) {
								__ret.push(this.parse6());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_unprotectedRanges4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_unprotectedRanges4 = true;
								} else {
									v_unprotectedRanges4 = false;
								}
								if(!v_unprotectedRanges4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_unprotectedRanges5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_unprotectedRanges5 = true;
							} else {
								v_unprotectedRanges5 = false;
							}
							if(!v_unprotectedRanges5) {
								this.die("Expected ]");
							}
						}
						v_unprotectedRanges = __ret;
					}
				} else if("requestingUserCanEdit".length == __name__.max - __name__.min && __name__.source.startsWith("requestingUserCanEdit",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_requestingUserCanEdit1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_requestingUserCanEdit1 = true;
					} else {
						v_requestingUserCanEdit1 = false;
					}
					if(v_requestingUserCanEdit1) {
						v_requestingUserCanEdit = null;
					} else {
						v_requestingUserCanEdit = this.parseBool();
					}
				} else if("range".length == __name__.max - __name__.min && __name__.source.startsWith("range",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_range1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_range1 = true;
					} else {
						v_range1 = false;
					}
					if(v_range1) {
						v_range = null;
					} else {
						v_range = this.parse6();
					}
				} else if("protectedRangeId".length == __name__.max - __name__.min && __name__.source.startsWith("protectedRangeId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_protectedRangeId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_protectedRangeId1 = true;
					} else {
						v_protectedRangeId1 = false;
					}
					if(v_protectedRangeId1) {
						v_protectedRangeId = null;
					} else {
						var this1 = this.parseNumber();
						v_protectedRangeId = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("namedRangeId".length == __name__.max - __name__.min && __name__.source.startsWith("namedRangeId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_namedRangeId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_namedRangeId1 = true;
					} else {
						v_namedRangeId1 = false;
					}
					if(v_namedRangeId1) {
						v_namedRangeId = null;
					} else {
						v_namedRangeId = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("editors".length == __name__.max - __name__.min && __name__.source.startsWith("editors",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_editors1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_editors1 = true;
					} else {
						v_editors1 = false;
					}
					if(v_editors1) {
						v_editors = null;
					} else {
						v_editors = this.parse31();
					}
				} else if("description".length == __name__.max - __name__.min && __name__.source.startsWith("description",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_description1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_description1 = true;
					} else {
						v_description1 = false;
					}
					if(v_description1) {
						v_description = null;
					} else {
						v_description = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { description : v_description, editors : v_editors, namedRangeId : v_namedRangeId, protectedRangeId : v_protectedRangeId, range : v_range, requestingUserCanEdit : v_requestingUserCanEdit, unprotectedRanges : v_unprotectedRanges, warningOnly : v_warningOnly};
	}
	,parse31: function() {
		var _gthis = this;
		var v_domainUsersCanEdit = null;
		var v_groups = null;
		var v_users = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("users".length == __name__.max - __name__.min && __name__.source.startsWith("users",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_users1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_users1 = true;
					} else {
						v_users1 = false;
					}
					if(v_users1) {
						v_users = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_users2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_users2 = true;
						} else {
							v_users2 = false;
						}
						if(!v_users2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_users3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_users3 = true;
						} else {
							v_users3 = false;
						}
						if(!v_users3) {
							while(true) {
								__ret.push(tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString()));
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_users4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_users4 = true;
								} else {
									v_users4 = false;
								}
								if(!v_users4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_users5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_users5 = true;
							} else {
								v_users5 = false;
							}
							if(!v_users5) {
								this.die("Expected ]");
							}
						}
						v_users = __ret;
					}
				} else if("groups".length == __name__.max - __name__.min && __name__.source.startsWith("groups",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_groups1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_groups1 = true;
					} else {
						v_groups1 = false;
					}
					if(v_groups1) {
						v_groups = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_groups2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_groups2 = true;
						} else {
							v_groups2 = false;
						}
						if(!v_groups2) {
							this.die("Expected [");
						}
						var __ret1 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_groups3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_groups3 = true;
						} else {
							v_groups3 = false;
						}
						if(!v_groups3) {
							while(true) {
								__ret1.push(tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString()));
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_groups4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_groups4 = true;
								} else {
									v_groups4 = false;
								}
								if(!v_groups4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_groups5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_groups5 = true;
							} else {
								v_groups5 = false;
							}
							if(!v_groups5) {
								this.die("Expected ]");
							}
						}
						v_groups = __ret1;
					}
				} else if("domainUsersCanEdit".length == __name__.max - __name__.min && __name__.source.startsWith("domainUsersCanEdit",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_domainUsersCanEdit1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_domainUsersCanEdit1 = true;
					} else {
						v_domainUsersCanEdit1 = false;
					}
					if(v_domainUsersCanEdit1) {
						v_domainUsersCanEdit = null;
					} else {
						v_domainUsersCanEdit = this.parseBool();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { domainUsersCanEdit : v_domainUsersCanEdit, groups : v_groups, users : v_users};
	}
	,parse32: function() {
		var _gthis = this;
		var v_properties = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("properties".length == __name__.max - __name__.min && __name__.source.startsWith("properties",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_properties1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_properties1 = true;
					} else {
						v_properties1 = false;
					}
					if(v_properties1) {
						v_properties = null;
					} else {
						v_properties = this.parse33();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { properties : v_properties};
	}
	,parse33: function() {
		var _gthis = this;
		var v_gridProperties = null;
		var v_hidden = null;
		var v_index = null;
		var v_rightToLeft = null;
		var v_sheetId = null;
		var v_sheetType = null;
		var v_tabColor = null;
		var v_title = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("title".length == __name__.max - __name__.min && __name__.source.startsWith("title",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_title1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_title1 = true;
					} else {
						v_title1 = false;
					}
					if(v_title1) {
						v_title = null;
					} else {
						v_title = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("tabColor".length == __name__.max - __name__.min && __name__.source.startsWith("tabColor",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_tabColor1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_tabColor1 = true;
					} else {
						v_tabColor1 = false;
					}
					if(v_tabColor1) {
						v_tabColor = null;
					} else {
						v_tabColor = this.parse5();
					}
				} else if("sheetType".length == __name__.max - __name__.min && __name__.source.startsWith("sheetType",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sheetType1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sheetType1 = true;
					} else {
						v_sheetType1 = false;
					}
					if(v_sheetType1) {
						v_sheetType = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "GRID":case "OBJECT":case "SHEET_TYPE_UNSPECIFIED":
							v_sheetType = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse33"}));
						}
					}
				} else if("sheetId".length == __name__.max - __name__.min && __name__.source.startsWith("sheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sheetId1 = true;
					} else {
						v_sheetId1 = false;
					}
					if(v_sheetId1) {
						v_sheetId = null;
					} else {
						var this1 = this.parseNumber();
						v_sheetId = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("rightToLeft".length == __name__.max - __name__.min && __name__.source.startsWith("rightToLeft",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rightToLeft1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rightToLeft1 = true;
					} else {
						v_rightToLeft1 = false;
					}
					if(v_rightToLeft1) {
						v_rightToLeft = null;
					} else {
						v_rightToLeft = this.parseBool();
					}
				} else if("index".length == __name__.max - __name__.min && __name__.source.startsWith("index",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_index1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_index1 = true;
					} else {
						v_index1 = false;
					}
					if(v_index1) {
						v_index = null;
					} else {
						var this2 = this.parseNumber();
						v_index = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("hidden".length == __name__.max - __name__.min && __name__.source.startsWith("hidden",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hidden1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hidden1 = true;
					} else {
						v_hidden1 = false;
					}
					if(v_hidden1) {
						v_hidden = null;
					} else {
						v_hidden = this.parseBool();
					}
				} else if("gridProperties".length == __name__.max - __name__.min && __name__.source.startsWith("gridProperties",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_gridProperties1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_gridProperties1 = true;
					} else {
						v_gridProperties1 = false;
					}
					if(v_gridProperties1) {
						v_gridProperties = null;
					} else {
						v_gridProperties = this.parse34();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { gridProperties : v_gridProperties, hidden : v_hidden, index : v_index, rightToLeft : v_rightToLeft, sheetId : v_sheetId, sheetType : v_sheetType, tabColor : v_tabColor, title : v_title};
	}
	,parse34: function() {
		var _gthis = this;
		var v_columnCount = null;
		var v_frozenColumnCount = null;
		var v_frozenRowCount = null;
		var v_hideGridlines = null;
		var v_rowCount = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("rowCount".length == __name__.max - __name__.min && __name__.source.startsWith("rowCount",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rowCount1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rowCount1 = true;
					} else {
						v_rowCount1 = false;
					}
					if(v_rowCount1) {
						v_rowCount = null;
					} else {
						var this1 = this.parseNumber();
						v_rowCount = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("hideGridlines".length == __name__.max - __name__.min && __name__.source.startsWith("hideGridlines",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hideGridlines1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hideGridlines1 = true;
					} else {
						v_hideGridlines1 = false;
					}
					if(v_hideGridlines1) {
						v_hideGridlines = null;
					} else {
						v_hideGridlines = this.parseBool();
					}
				} else if("frozenRowCount".length == __name__.max - __name__.min && __name__.source.startsWith("frozenRowCount",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_frozenRowCount1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_frozenRowCount1 = true;
					} else {
						v_frozenRowCount1 = false;
					}
					if(v_frozenRowCount1) {
						v_frozenRowCount = null;
					} else {
						var this2 = this.parseNumber();
						v_frozenRowCount = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("frozenColumnCount".length == __name__.max - __name__.min && __name__.source.startsWith("frozenColumnCount",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_frozenColumnCount1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_frozenColumnCount1 = true;
					} else {
						v_frozenColumnCount1 = false;
					}
					if(v_frozenColumnCount1) {
						v_frozenColumnCount = null;
					} else {
						var this3 = this.parseNumber();
						v_frozenColumnCount = Std.parseInt(this3.source.substring(this3.min,this3.max));
					}
				} else if("columnCount".length == __name__.max - __name__.min && __name__.source.startsWith("columnCount",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_columnCount1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_columnCount1 = true;
					} else {
						v_columnCount1 = false;
					}
					if(v_columnCount1) {
						v_columnCount = null;
					} else {
						var this4 = this.parseNumber();
						v_columnCount = Std.parseInt(this4.source.substring(this4.min,this4.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { columnCount : v_columnCount, frozenColumnCount : v_frozenColumnCount, frozenRowCount : v_frozenRowCount, hideGridlines : v_hideGridlines, rowCount : v_rowCount};
	}
	,parse35: function() {
		var _gthis = this;
		var v_rule = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("rule".length == __name__.max - __name__.min && __name__.source.startsWith("rule",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rule1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rule1 = true;
					} else {
						v_rule1 = false;
					}
					if(v_rule1) {
						v_rule = null;
					} else {
						v_rule = this.parse36();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { rule : v_rule};
	}
	,parse36: function() {
		var _gthis = this;
		var v_booleanRule = null;
		var v_gradientRule = null;
		var v_ranges = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("ranges".length == __name__.max - __name__.min && __name__.source.startsWith("ranges",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_ranges1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_ranges1 = true;
					} else {
						v_ranges1 = false;
					}
					if(v_ranges1) {
						v_ranges = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_ranges2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_ranges2 = true;
						} else {
							v_ranges2 = false;
						}
						if(!v_ranges2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_ranges3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_ranges3 = true;
						} else {
							v_ranges3 = false;
						}
						if(!v_ranges3) {
							while(true) {
								__ret.push(this.parse6());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_ranges4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_ranges4 = true;
								} else {
									v_ranges4 = false;
								}
								if(!v_ranges4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_ranges5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_ranges5 = true;
							} else {
								v_ranges5 = false;
							}
							if(!v_ranges5) {
								this.die("Expected ]");
							}
						}
						v_ranges = __ret;
					}
				} else if("gradientRule".length == __name__.max - __name__.min && __name__.source.startsWith("gradientRule",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_gradientRule1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_gradientRule1 = true;
					} else {
						v_gradientRule1 = false;
					}
					if(v_gradientRule1) {
						v_gradientRule = null;
					} else {
						v_gradientRule = this.parse44();
					}
				} else if("booleanRule".length == __name__.max - __name__.min && __name__.source.startsWith("booleanRule",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_booleanRule1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_booleanRule1 = true;
					} else {
						v_booleanRule1 = false;
					}
					if(v_booleanRule1) {
						v_booleanRule = null;
					} else {
						v_booleanRule = this.parse37();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { booleanRule : v_booleanRule, gradientRule : v_gradientRule, ranges : v_ranges};
	}
	,parse37: function() {
		var _gthis = this;
		var v_condition = null;
		var v_format = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("format".length == __name__.max - __name__.min && __name__.source.startsWith("format",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_format1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_format1 = true;
					} else {
						v_format1 = false;
					}
					if(v_format1) {
						v_format = null;
					} else {
						v_format = this.parse38();
					}
				} else if("condition".length == __name__.max - __name__.min && __name__.source.startsWith("condition",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_condition1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_condition1 = true;
					} else {
						v_condition1 = false;
					}
					if(v_condition1) {
						v_condition = null;
					} else {
						v_condition = this.parse24();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { condition : v_condition, format : v_format};
	}
	,parse38: function() {
		var _gthis = this;
		var v_backgroundColor = null;
		var v_borders = null;
		var v_horizontalAlignment = null;
		var v_hyperlinkDisplayType = null;
		var v_numberFormat = null;
		var v_padding = null;
		var v_textDirection = null;
		var v_textFormat = null;
		var v_textRotation = null;
		var v_verticalAlignment = null;
		var v_wrapStrategy = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("wrapStrategy".length == __name__.max - __name__.min && __name__.source.startsWith("wrapStrategy",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_wrapStrategy1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_wrapStrategy1 = true;
					} else {
						v_wrapStrategy1 = false;
					}
					if(v_wrapStrategy1) {
						v_wrapStrategy = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "CLIP":case "LEGACY_WRAP":case "OVERFLOW_CELL":case "WRAP":case "WRAP_STRATEGY_UNSPECIFIED":
							v_wrapStrategy = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse38"}));
						}
					}
				} else if("verticalAlignment".length == __name__.max - __name__.min && __name__.source.startsWith("verticalAlignment",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_verticalAlignment1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_verticalAlignment1 = true;
					} else {
						v_verticalAlignment1 = false;
					}
					if(v_verticalAlignment1) {
						v_verticalAlignment = null;
					} else {
						var v1 = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v1) {
						case "BOTTOM":case "MIDDLE":case "TOP":case "VERTICAL_ALIGN_UNSPECIFIED":
							v_verticalAlignment = v1;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v1,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse38"}));
						}
					}
				} else if("textRotation".length == __name__.max - __name__.min && __name__.source.startsWith("textRotation",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_textRotation1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_textRotation1 = true;
					} else {
						v_textRotation1 = false;
					}
					if(v_textRotation1) {
						v_textRotation = null;
					} else {
						v_textRotation = this.parse43();
					}
				} else if("textFormat".length == __name__.max - __name__.min && __name__.source.startsWith("textFormat",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_textFormat1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_textFormat1 = true;
					} else {
						v_textFormat1 = false;
					}
					if(v_textFormat1) {
						v_textFormat = null;
					} else {
						v_textFormat = this.parse15();
					}
				} else if("textDirection".length == __name__.max - __name__.min && __name__.source.startsWith("textDirection",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_textDirection1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_textDirection1 = true;
					} else {
						v_textDirection1 = false;
					}
					if(v_textDirection1) {
						v_textDirection = null;
					} else {
						var v2 = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v2) {
						case "LEFT_TO_RIGHT":case "RIGHT_TO_LEFT":case "TEXT_DIRECTION_UNSPECIFIED":
							v_textDirection = v2;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v2,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse38"}));
						}
					}
				} else if("padding".length == __name__.max - __name__.min && __name__.source.startsWith("padding",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_padding1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_padding1 = true;
					} else {
						v_padding1 = false;
					}
					if(v_padding1) {
						v_padding = null;
					} else {
						v_padding = this.parse42();
					}
				} else if("numberFormat".length == __name__.max - __name__.min && __name__.source.startsWith("numberFormat",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_numberFormat1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_numberFormat1 = true;
					} else {
						v_numberFormat1 = false;
					}
					if(v_numberFormat1) {
						v_numberFormat = null;
					} else {
						v_numberFormat = this.parse41();
					}
				} else if("hyperlinkDisplayType".length == __name__.max - __name__.min && __name__.source.startsWith("hyperlinkDisplayType",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hyperlinkDisplayType1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hyperlinkDisplayType1 = true;
					} else {
						v_hyperlinkDisplayType1 = false;
					}
					if(v_hyperlinkDisplayType1) {
						v_hyperlinkDisplayType = null;
					} else {
						var v3 = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v3) {
						case "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED":case "LINKED":case "PLAIN_TEXT":
							v_hyperlinkDisplayType = v3;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v3,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse38"}));
						}
					}
				} else if("horizontalAlignment".length == __name__.max - __name__.min && __name__.source.startsWith("horizontalAlignment",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_horizontalAlignment1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_horizontalAlignment1 = true;
					} else {
						v_horizontalAlignment1 = false;
					}
					if(v_horizontalAlignment1) {
						v_horizontalAlignment = null;
					} else {
						var v4 = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v4) {
						case "CENTER":case "HORIZONTAL_ALIGN_UNSPECIFIED":case "LEFT":case "RIGHT":
							v_horizontalAlignment = v4;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v4,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse38"}));
						}
					}
				} else if("borders".length == __name__.max - __name__.min && __name__.source.startsWith("borders",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_borders1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_borders1 = true;
					} else {
						v_borders1 = false;
					}
					if(v_borders1) {
						v_borders = null;
					} else {
						v_borders = this.parse39();
					}
				} else if("backgroundColor".length == __name__.max - __name__.min && __name__.source.startsWith("backgroundColor",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_backgroundColor1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_backgroundColor1 = true;
					} else {
						v_backgroundColor1 = false;
					}
					if(v_backgroundColor1) {
						v_backgroundColor = null;
					} else {
						v_backgroundColor = this.parse5();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { backgroundColor : v_backgroundColor, borders : v_borders, horizontalAlignment : v_horizontalAlignment, hyperlinkDisplayType : v_hyperlinkDisplayType, numberFormat : v_numberFormat, padding : v_padding, textDirection : v_textDirection, textFormat : v_textFormat, textRotation : v_textRotation, verticalAlignment : v_verticalAlignment, wrapStrategy : v_wrapStrategy};
	}
	,parse39: function() {
		var _gthis = this;
		var v_bottom = null;
		var v_left = null;
		var v_right = null;
		var v_top = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("top".length == __name__.max - __name__.min && __name__.source.startsWith("top",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_top1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_top1 = true;
					} else {
						v_top1 = false;
					}
					if(v_top1) {
						v_top = null;
					} else {
						v_top = this.parse40();
					}
				} else if("right".length == __name__.max - __name__.min && __name__.source.startsWith("right",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_right1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_right1 = true;
					} else {
						v_right1 = false;
					}
					if(v_right1) {
						v_right = null;
					} else {
						v_right = this.parse40();
					}
				} else if("left".length == __name__.max - __name__.min && __name__.source.startsWith("left",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_left1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_left1 = true;
					} else {
						v_left1 = false;
					}
					if(v_left1) {
						v_left = null;
					} else {
						v_left = this.parse40();
					}
				} else if("bottom".length == __name__.max - __name__.min && __name__.source.startsWith("bottom",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_bottom1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_bottom1 = true;
					} else {
						v_bottom1 = false;
					}
					if(v_bottom1) {
						v_bottom = null;
					} else {
						v_bottom = this.parse40();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { bottom : v_bottom, left : v_left, right : v_right, top : v_top};
	}
	,parse40: function() {
		var _gthis = this;
		var v_color = null;
		var v_style = null;
		var v_width = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("width".length == __name__.max - __name__.min && __name__.source.startsWith("width",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_width1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_width1 = true;
					} else {
						v_width1 = false;
					}
					if(v_width1) {
						v_width = null;
					} else {
						var this1 = this.parseNumber();
						v_width = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("style".length == __name__.max - __name__.min && __name__.source.startsWith("style",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_style1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_style1 = true;
					} else {
						v_style1 = false;
					}
					if(v_style1) {
						v_style = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "DASHED":case "DOTTED":case "DOUBLE":case "NONE":case "SOLID":case "SOLID_MEDIUM":case "SOLID_THICK":case "STYLE_UNSPECIFIED":
							v_style = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse40"}));
						}
					}
				} else if("color".length == __name__.max - __name__.min && __name__.source.startsWith("color",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_color1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_color1 = true;
					} else {
						v_color1 = false;
					}
					if(v_color1) {
						v_color = null;
					} else {
						v_color = this.parse5();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { color : v_color, style : v_style, width : v_width};
	}
	,parse41: function() {
		var _gthis = this;
		var v_pattern = null;
		var v_type = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("type".length == __name__.max - __name__.min && __name__.source.startsWith("type",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_type1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_type1 = true;
					} else {
						v_type1 = false;
					}
					if(v_type1) {
						v_type = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "CURRENCY":case "DATE":case "DATE_TIME":case "NUMBER":case "NUMBER_FORMAT_TYPE_UNSPECIFIED":case "PERCENT":case "SCIENTIFIC":case "TEXT":case "TIME":
							v_type = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse41"}));
						}
					}
				} else if("pattern".length == __name__.max - __name__.min && __name__.source.startsWith("pattern",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_pattern1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_pattern1 = true;
					} else {
						v_pattern1 = false;
					}
					if(v_pattern1) {
						v_pattern = null;
					} else {
						v_pattern = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { pattern : v_pattern, type : v_type};
	}
	,parse42: function() {
		var _gthis = this;
		var v_bottom = null;
		var v_left = null;
		var v_right = null;
		var v_top = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("top".length == __name__.max - __name__.min && __name__.source.startsWith("top",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_top1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_top1 = true;
					} else {
						v_top1 = false;
					}
					if(v_top1) {
						v_top = null;
					} else {
						var this1 = this.parseNumber();
						v_top = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("right".length == __name__.max - __name__.min && __name__.source.startsWith("right",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_right1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_right1 = true;
					} else {
						v_right1 = false;
					}
					if(v_right1) {
						v_right = null;
					} else {
						var this2 = this.parseNumber();
						v_right = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("left".length == __name__.max - __name__.min && __name__.source.startsWith("left",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_left1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_left1 = true;
					} else {
						v_left1 = false;
					}
					if(v_left1) {
						v_left = null;
					} else {
						var this3 = this.parseNumber();
						v_left = Std.parseInt(this3.source.substring(this3.min,this3.max));
					}
				} else if("bottom".length == __name__.max - __name__.min && __name__.source.startsWith("bottom",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_bottom1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_bottom1 = true;
					} else {
						v_bottom1 = false;
					}
					if(v_bottom1) {
						v_bottom = null;
					} else {
						var this4 = this.parseNumber();
						v_bottom = Std.parseInt(this4.source.substring(this4.min,this4.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { bottom : v_bottom, left : v_left, right : v_right, top : v_top};
	}
	,parse43: function() {
		var _gthis = this;
		var v_angle = null;
		var v_vertical = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("vertical".length == __name__.max - __name__.min && __name__.source.startsWith("vertical",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_vertical1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_vertical1 = true;
					} else {
						v_vertical1 = false;
					}
					if(v_vertical1) {
						v_vertical = null;
					} else {
						v_vertical = this.parseBool();
					}
				} else if("angle".length == __name__.max - __name__.min && __name__.source.startsWith("angle",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_angle1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_angle1 = true;
					} else {
						v_angle1 = false;
					}
					if(v_angle1) {
						v_angle = null;
					} else {
						var this1 = this.parseNumber();
						v_angle = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { angle : v_angle, vertical : v_vertical};
	}
	,parse44: function() {
		var _gthis = this;
		var v_maxpoint = null;
		var v_midpoint = null;
		var v_minpoint = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("minpoint".length == __name__.max - __name__.min && __name__.source.startsWith("minpoint",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_minpoint1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_minpoint1 = true;
					} else {
						v_minpoint1 = false;
					}
					if(v_minpoint1) {
						v_minpoint = null;
					} else {
						v_minpoint = this.parse45();
					}
				} else if("midpoint".length == __name__.max - __name__.min && __name__.source.startsWith("midpoint",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_midpoint1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_midpoint1 = true;
					} else {
						v_midpoint1 = false;
					}
					if(v_midpoint1) {
						v_midpoint = null;
					} else {
						v_midpoint = this.parse45();
					}
				} else if("maxpoint".length == __name__.max - __name__.min && __name__.source.startsWith("maxpoint",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_maxpoint1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_maxpoint1 = true;
					} else {
						v_maxpoint1 = false;
					}
					if(v_maxpoint1) {
						v_maxpoint = null;
					} else {
						v_maxpoint = this.parse45();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { maxpoint : v_maxpoint, midpoint : v_midpoint, minpoint : v_minpoint};
	}
	,parse45: function() {
		var _gthis = this;
		var v_color = null;
		var v_type = null;
		var v_value = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("value".length == __name__.max - __name__.min && __name__.source.startsWith("value",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_value1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_value1 = true;
					} else {
						v_value1 = false;
					}
					if(v_value1) {
						v_value = null;
					} else {
						v_value = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("type".length == __name__.max - __name__.min && __name__.source.startsWith("type",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_type1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_type1 = true;
					} else {
						v_type1 = false;
					}
					if(v_type1) {
						v_type = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "INTERPOLATION_POINT_TYPE_UNSPECIFIED":case "MAX":case "MIN":case "NUMBER":case "PERCENT":case "PERCENTILE":
							v_type = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse45"}));
						}
					}
				} else if("color".length == __name__.max - __name__.min && __name__.source.startsWith("color",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_color1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_color1 = true;
					} else {
						v_color1 = false;
					}
					if(v_color1) {
						v_color = null;
					} else {
						v_color = this.parse5();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { color : v_color, type : v_type, value : v_value};
	}
	,parse46: function() {
		var _gthis = this;
		var v_formulasChanged = null;
		var v_occurrencesChanged = null;
		var v_rowsChanged = null;
		var v_sheetsChanged = null;
		var v_valuesChanged = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("valuesChanged".length == __name__.max - __name__.min && __name__.source.startsWith("valuesChanged",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_valuesChanged1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_valuesChanged1 = true;
					} else {
						v_valuesChanged1 = false;
					}
					if(v_valuesChanged1) {
						v_valuesChanged = null;
					} else {
						var this1 = this.parseNumber();
						v_valuesChanged = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("sheetsChanged".length == __name__.max - __name__.min && __name__.source.startsWith("sheetsChanged",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sheetsChanged1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sheetsChanged1 = true;
					} else {
						v_sheetsChanged1 = false;
					}
					if(v_sheetsChanged1) {
						v_sheetsChanged = null;
					} else {
						var this2 = this.parseNumber();
						v_sheetsChanged = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("rowsChanged".length == __name__.max - __name__.min && __name__.source.startsWith("rowsChanged",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rowsChanged1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rowsChanged1 = true;
					} else {
						v_rowsChanged1 = false;
					}
					if(v_rowsChanged1) {
						v_rowsChanged = null;
					} else {
						var this3 = this.parseNumber();
						v_rowsChanged = Std.parseInt(this3.source.substring(this3.min,this3.max));
					}
				} else if("occurrencesChanged".length == __name__.max - __name__.min && __name__.source.startsWith("occurrencesChanged",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_occurrencesChanged1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_occurrencesChanged1 = true;
					} else {
						v_occurrencesChanged1 = false;
					}
					if(v_occurrencesChanged1) {
						v_occurrencesChanged = null;
					} else {
						var this4 = this.parseNumber();
						v_occurrencesChanged = Std.parseInt(this4.source.substring(this4.min,this4.max));
					}
				} else if("formulasChanged".length == __name__.max - __name__.min && __name__.source.startsWith("formulasChanged",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_formulasChanged1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_formulasChanged1 = true;
					} else {
						v_formulasChanged1 = false;
					}
					if(v_formulasChanged1) {
						v_formulasChanged = null;
					} else {
						var this5 = this.parseNumber();
						v_formulasChanged = Std.parseInt(this5.source.substring(this5.min,this5.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { formulasChanged : v_formulasChanged, occurrencesChanged : v_occurrencesChanged, rowsChanged : v_rowsChanged, sheetsChanged : v_sheetsChanged, valuesChanged : v_valuesChanged};
	}
	,parse47: function() {
		var _gthis = this;
		var v_newIndex = null;
		var v_newRule = null;
		var v_oldIndex = null;
		var v_oldRule = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("oldRule".length == __name__.max - __name__.min && __name__.source.startsWith("oldRule",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_oldRule1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_oldRule1 = true;
					} else {
						v_oldRule1 = false;
					}
					if(v_oldRule1) {
						v_oldRule = null;
					} else {
						v_oldRule = this.parse36();
					}
				} else if("oldIndex".length == __name__.max - __name__.min && __name__.source.startsWith("oldIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_oldIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_oldIndex1 = true;
					} else {
						v_oldIndex1 = false;
					}
					if(v_oldIndex1) {
						v_oldIndex = null;
					} else {
						var this1 = this.parseNumber();
						v_oldIndex = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("newRule".length == __name__.max - __name__.min && __name__.source.startsWith("newRule",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_newRule1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_newRule1 = true;
					} else {
						v_newRule1 = false;
					}
					if(v_newRule1) {
						v_newRule = null;
					} else {
						v_newRule = this.parse36();
					}
				} else if("newIndex".length == __name__.max - __name__.min && __name__.source.startsWith("newIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_newIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_newIndex1 = true;
					} else {
						v_newIndex1 = false;
					}
					if(v_newIndex1) {
						v_newIndex = null;
					} else {
						var this2 = this.parseNumber();
						v_newIndex = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { newIndex : v_newIndex, newRule : v_newRule, oldIndex : v_oldIndex, oldRule : v_oldRule};
	}
	,parse48: function() {
		var _gthis = this;
		var v_position = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("position".length == __name__.max - __name__.min && __name__.source.startsWith("position",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_position1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_position1 = true;
					} else {
						v_position1 = false;
					}
					if(v_position1) {
						v_position = null;
					} else {
						v_position = this.parse9();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { position : v_position};
	}
	,parse49: function() {
		var _gthis = this;
		var v_namedRanges = null;
		var v_properties = null;
		var v_sheets = null;
		var v_spreadsheetId = null;
		var v_spreadsheetUrl = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("spreadsheetUrl".length == __name__.max - __name__.min && __name__.source.startsWith("spreadsheetUrl",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_spreadsheetUrl1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_spreadsheetUrl1 = true;
					} else {
						v_spreadsheetUrl1 = false;
					}
					if(v_spreadsheetUrl1) {
						v_spreadsheetUrl = null;
					} else {
						v_spreadsheetUrl = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("spreadsheetId".length == __name__.max - __name__.min && __name__.source.startsWith("spreadsheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_spreadsheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_spreadsheetId1 = true;
					} else {
						v_spreadsheetId1 = false;
					}
					if(v_spreadsheetId1) {
						v_spreadsheetId = null;
					} else {
						v_spreadsheetId = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("sheets".length == __name__.max - __name__.min && __name__.source.startsWith("sheets",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sheets1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sheets1 = true;
					} else {
						v_sheets1 = false;
					}
					if(v_sheets1) {
						v_sheets = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_sheets2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_sheets2 = true;
						} else {
							v_sheets2 = false;
						}
						if(!v_sheets2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_sheets3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_sheets3 = true;
						} else {
							v_sheets3 = false;
						}
						if(!v_sheets3) {
							while(true) {
								__ret.push(this.parse52());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_sheets4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_sheets4 = true;
								} else {
									v_sheets4 = false;
								}
								if(!v_sheets4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_sheets5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_sheets5 = true;
							} else {
								v_sheets5 = false;
							}
							if(!v_sheets5) {
								this.die("Expected ]");
							}
						}
						v_sheets = __ret;
					}
				} else if("properties".length == __name__.max - __name__.min && __name__.source.startsWith("properties",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_properties1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_properties1 = true;
					} else {
						v_properties1 = false;
					}
					if(v_properties1) {
						v_properties = null;
					} else {
						v_properties = this.parse50();
					}
				} else if("namedRanges".length == __name__.max - __name__.min && __name__.source.startsWith("namedRanges",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_namedRanges1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_namedRanges1 = true;
					} else {
						v_namedRanges1 = false;
					}
					if(v_namedRanges1) {
						v_namedRanges = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_namedRanges2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_namedRanges2 = true;
						} else {
							v_namedRanges2 = false;
						}
						if(!v_namedRanges2) {
							this.die("Expected [");
						}
						var __ret1 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_namedRanges3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_namedRanges3 = true;
						} else {
							v_namedRanges3 = false;
						}
						if(!v_namedRanges3) {
							while(true) {
								__ret1.push(this.parse28());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_namedRanges4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_namedRanges4 = true;
								} else {
									v_namedRanges4 = false;
								}
								if(!v_namedRanges4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_namedRanges5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_namedRanges5 = true;
							} else {
								v_namedRanges5 = false;
							}
							if(!v_namedRanges5) {
								this.die("Expected ]");
							}
						}
						v_namedRanges = __ret1;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { namedRanges : v_namedRanges, properties : v_properties, sheets : v_sheets, spreadsheetId : v_spreadsheetId, spreadsheetUrl : v_spreadsheetUrl};
	}
	,parse50: function() {
		var _gthis = this;
		var v_autoRecalc = null;
		var v_defaultFormat = null;
		var v_iterativeCalculationSettings = null;
		var v_locale = null;
		var v_timeZone = null;
		var v_title = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("title".length == __name__.max - __name__.min && __name__.source.startsWith("title",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_title1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_title1 = true;
					} else {
						v_title1 = false;
					}
					if(v_title1) {
						v_title = null;
					} else {
						v_title = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("timeZone".length == __name__.max - __name__.min && __name__.source.startsWith("timeZone",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_timeZone1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_timeZone1 = true;
					} else {
						v_timeZone1 = false;
					}
					if(v_timeZone1) {
						v_timeZone = null;
					} else {
						v_timeZone = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("locale".length == __name__.max - __name__.min && __name__.source.startsWith("locale",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_locale1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_locale1 = true;
					} else {
						v_locale1 = false;
					}
					if(v_locale1) {
						v_locale = null;
					} else {
						v_locale = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("iterativeCalculationSettings".length == __name__.max - __name__.min && __name__.source.startsWith("iterativeCalculationSettings",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_iterativeCalculationSettings1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_iterativeCalculationSettings1 = true;
					} else {
						v_iterativeCalculationSettings1 = false;
					}
					if(v_iterativeCalculationSettings1) {
						v_iterativeCalculationSettings = null;
					} else {
						v_iterativeCalculationSettings = this.parse51();
					}
				} else if("defaultFormat".length == __name__.max - __name__.min && __name__.source.startsWith("defaultFormat",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_defaultFormat1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_defaultFormat1 = true;
					} else {
						v_defaultFormat1 = false;
					}
					if(v_defaultFormat1) {
						v_defaultFormat = null;
					} else {
						v_defaultFormat = this.parse38();
					}
				} else if("autoRecalc".length == __name__.max - __name__.min && __name__.source.startsWith("autoRecalc",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_autoRecalc1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_autoRecalc1 = true;
					} else {
						v_autoRecalc1 = false;
					}
					if(v_autoRecalc1) {
						v_autoRecalc = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "HOUR":case "MINUTE":case "ON_CHANGE":case "RECALCULATION_INTERVAL_UNSPECIFIED":
							v_autoRecalc = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse50"}));
						}
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { autoRecalc : v_autoRecalc, defaultFormat : v_defaultFormat, iterativeCalculationSettings : v_iterativeCalculationSettings, locale : v_locale, timeZone : v_timeZone, title : v_title};
	}
	,parse51: function() {
		var _gthis = this;
		var v_convergenceThreshold = null;
		var v_maxIterations = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("maxIterations".length == __name__.max - __name__.min && __name__.source.startsWith("maxIterations",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_maxIterations1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_maxIterations1 = true;
					} else {
						v_maxIterations1 = false;
					}
					if(v_maxIterations1) {
						v_maxIterations = null;
					} else {
						var this1 = this.parseNumber();
						v_maxIterations = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("convergenceThreshold".length == __name__.max - __name__.min && __name__.source.startsWith("convergenceThreshold",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_convergenceThreshold1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_convergenceThreshold1 = true;
					} else {
						v_convergenceThreshold1 = false;
					}
					if(v_convergenceThreshold1) {
						v_convergenceThreshold = null;
					} else {
						var this2 = this.parseNumber();
						v_convergenceThreshold = parseFloat(this2.source.substring(this2.min,this2.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { convergenceThreshold : v_convergenceThreshold, maxIterations : v_maxIterations};
	}
	,parse52: function() {
		var _gthis = this;
		var v_bandedRanges = null;
		var v_basicFilter = null;
		var v_charts = null;
		var v_conditionalFormats = null;
		var v_data = null;
		var v_filterViews = null;
		var v_merges = null;
		var v_properties = null;
		var v_protectedRanges = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("protectedRanges".length == __name__.max - __name__.min && __name__.source.startsWith("protectedRanges",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_protectedRanges1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_protectedRanges1 = true;
					} else {
						v_protectedRanges1 = false;
					}
					if(v_protectedRanges1) {
						v_protectedRanges = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_protectedRanges2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_protectedRanges2 = true;
						} else {
							v_protectedRanges2 = false;
						}
						if(!v_protectedRanges2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_protectedRanges3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_protectedRanges3 = true;
						} else {
							v_protectedRanges3 = false;
						}
						if(!v_protectedRanges3) {
							while(true) {
								__ret.push(this.parse30());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_protectedRanges4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_protectedRanges4 = true;
								} else {
									v_protectedRanges4 = false;
								}
								if(!v_protectedRanges4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_protectedRanges5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_protectedRanges5 = true;
							} else {
								v_protectedRanges5 = false;
							}
							if(!v_protectedRanges5) {
								this.die("Expected ]");
							}
						}
						v_protectedRanges = __ret;
					}
				} else if("properties".length == __name__.max - __name__.min && __name__.source.startsWith("properties",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_properties1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_properties1 = true;
					} else {
						v_properties1 = false;
					}
					if(v_properties1) {
						v_properties = null;
					} else {
						v_properties = this.parse33();
					}
				} else if("merges".length == __name__.max - __name__.min && __name__.source.startsWith("merges",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_merges1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_merges1 = true;
					} else {
						v_merges1 = false;
					}
					if(v_merges1) {
						v_merges = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_merges2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_merges2 = true;
						} else {
							v_merges2 = false;
						}
						if(!v_merges2) {
							this.die("Expected [");
						}
						var __ret1 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_merges3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_merges3 = true;
						} else {
							v_merges3 = false;
						}
						if(!v_merges3) {
							while(true) {
								__ret1.push(this.parse6());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_merges4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_merges4 = true;
								} else {
									v_merges4 = false;
								}
								if(!v_merges4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_merges5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_merges5 = true;
							} else {
								v_merges5 = false;
							}
							if(!v_merges5) {
								this.die("Expected ]");
							}
						}
						v_merges = __ret1;
					}
				} else if("filterViews".length == __name__.max - __name__.min && __name__.source.startsWith("filterViews",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_filterViews1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_filterViews1 = true;
					} else {
						v_filterViews1 = false;
					}
					if(v_filterViews1) {
						v_filterViews = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_filterViews2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_filterViews2 = true;
						} else {
							v_filterViews2 = false;
						}
						if(!v_filterViews2) {
							this.die("Expected [");
						}
						var __ret2 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_filterViews3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_filterViews3 = true;
						} else {
							v_filterViews3 = false;
						}
						if(!v_filterViews3) {
							while(true) {
								__ret2.push(this.parse22());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_filterViews4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_filterViews4 = true;
								} else {
									v_filterViews4 = false;
								}
								if(!v_filterViews4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_filterViews5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_filterViews5 = true;
							} else {
								v_filterViews5 = false;
							}
							if(!v_filterViews5) {
								this.die("Expected ]");
							}
						}
						v_filterViews = __ret2;
					}
				} else if("data".length == __name__.max - __name__.min && __name__.source.startsWith("data",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_data1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_data1 = true;
					} else {
						v_data1 = false;
					}
					if(v_data1) {
						v_data = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_data2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_data2 = true;
						} else {
							v_data2 = false;
						}
						if(!v_data2) {
							this.die("Expected [");
						}
						var __ret3 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_data3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_data3 = true;
						} else {
							v_data3 = false;
						}
						if(!v_data3) {
							while(true) {
								__ret3.push(this.parse54());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_data4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_data4 = true;
								} else {
									v_data4 = false;
								}
								if(!v_data4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_data5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_data5 = true;
							} else {
								v_data5 = false;
							}
							if(!v_data5) {
								this.die("Expected ]");
							}
						}
						v_data = __ret3;
					}
				} else if("conditionalFormats".length == __name__.max - __name__.min && __name__.source.startsWith("conditionalFormats",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_conditionalFormats1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_conditionalFormats1 = true;
					} else {
						v_conditionalFormats1 = false;
					}
					if(v_conditionalFormats1) {
						v_conditionalFormats = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_conditionalFormats2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_conditionalFormats2 = true;
						} else {
							v_conditionalFormats2 = false;
						}
						if(!v_conditionalFormats2) {
							this.die("Expected [");
						}
						var __ret4 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_conditionalFormats3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_conditionalFormats3 = true;
						} else {
							v_conditionalFormats3 = false;
						}
						if(!v_conditionalFormats3) {
							while(true) {
								__ret4.push(this.parse36());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_conditionalFormats4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_conditionalFormats4 = true;
								} else {
									v_conditionalFormats4 = false;
								}
								if(!v_conditionalFormats4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_conditionalFormats5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_conditionalFormats5 = true;
							} else {
								v_conditionalFormats5 = false;
							}
							if(!v_conditionalFormats5) {
								this.die("Expected ]");
							}
						}
						v_conditionalFormats = __ret4;
					}
				} else if("charts".length == __name__.max - __name__.min && __name__.source.startsWith("charts",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_charts1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_charts1 = true;
					} else {
						v_charts1 = false;
					}
					if(v_charts1) {
						v_charts = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_charts2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_charts2 = true;
						} else {
							v_charts2 = false;
						}
						if(!v_charts2) {
							this.die("Expected [");
						}
						var __ret5 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_charts3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_charts3 = true;
						} else {
							v_charts3 = false;
						}
						if(!v_charts3) {
							while(true) {
								__ret5.push(this.parse8());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_charts4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_charts4 = true;
								} else {
									v_charts4 = false;
								}
								if(!v_charts4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_charts5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_charts5 = true;
							} else {
								v_charts5 = false;
							}
							if(!v_charts5) {
								this.die("Expected ]");
							}
						}
						v_charts = __ret5;
					}
				} else if("basicFilter".length == __name__.max - __name__.min && __name__.source.startsWith("basicFilter",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_basicFilter1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_basicFilter1 = true;
					} else {
						v_basicFilter1 = false;
					}
					if(v_basicFilter1) {
						v_basicFilter = null;
					} else {
						v_basicFilter = this.parse53();
					}
				} else if("bandedRanges".length == __name__.max - __name__.min && __name__.source.startsWith("bandedRanges",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_bandedRanges1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_bandedRanges1 = true;
					} else {
						v_bandedRanges1 = false;
					}
					if(v_bandedRanges1) {
						v_bandedRanges = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_bandedRanges2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_bandedRanges2 = true;
						} else {
							v_bandedRanges2 = false;
						}
						if(!v_bandedRanges2) {
							this.die("Expected [");
						}
						var __ret6 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_bandedRanges3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_bandedRanges3 = true;
						} else {
							v_bandedRanges3 = false;
						}
						if(!v_bandedRanges3) {
							while(true) {
								__ret6.push(this.parse3());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_bandedRanges4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_bandedRanges4 = true;
								} else {
									v_bandedRanges4 = false;
								}
								if(!v_bandedRanges4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_bandedRanges5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_bandedRanges5 = true;
							} else {
								v_bandedRanges5 = false;
							}
							if(!v_bandedRanges5) {
								this.die("Expected ]");
							}
						}
						v_bandedRanges = __ret6;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { bandedRanges : v_bandedRanges, basicFilter : v_basicFilter, charts : v_charts, conditionalFormats : v_conditionalFormats, data : v_data, filterViews : v_filterViews, merges : v_merges, properties : v_properties, protectedRanges : v_protectedRanges};
	}
	,parse53: function() {
		var _gthis = this;
		var v_criteria = null;
		var v_range = null;
		var v_sortSpecs = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("sortSpecs".length == __name__.max - __name__.min && __name__.source.startsWith("sortSpecs",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sortSpecs1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sortSpecs1 = true;
					} else {
						v_sortSpecs1 = false;
					}
					if(v_sortSpecs1) {
						v_sortSpecs = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_sortSpecs2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_sortSpecs2 = true;
						} else {
							v_sortSpecs2 = false;
						}
						if(!v_sortSpecs2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_sortSpecs3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_sortSpecs3 = true;
						} else {
							v_sortSpecs3 = false;
						}
						if(!v_sortSpecs3) {
							while(true) {
								__ret.push(this.parse26());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_sortSpecs4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_sortSpecs4 = true;
								} else {
									v_sortSpecs4 = false;
								}
								if(!v_sortSpecs4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_sortSpecs5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_sortSpecs5 = true;
							} else {
								v_sortSpecs5 = false;
							}
							if(!v_sortSpecs5) {
								this.die("Expected ]");
							}
						}
						v_sortSpecs = __ret;
					}
				} else if("range".length == __name__.max - __name__.min && __name__.source.startsWith("range",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_range1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_range1 = true;
					} else {
						v_range1 = false;
					}
					if(v_range1) {
						v_range = null;
					} else {
						v_range = this.parse6();
					}
				} else if("criteria".length == __name__.max - __name__.min && __name__.source.startsWith("criteria",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_criteria1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_criteria1 = true;
					} else {
						v_criteria1 = false;
					}
					if(v_criteria1) {
						v_criteria = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_criteria2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_criteria2 = true;
						} else {
							v_criteria2 = false;
						}
						if(!v_criteria2) {
							this.die("Expected {");
						}
						var this1 = { };
						var __ret1 = this1;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_criteria3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_criteria3 = true;
						} else {
							v_criteria3 = false;
						}
						if(!v_criteria3) {
							while(true) {
								var key = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
								var e;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var e1;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									e1 = true;
								} else {
									e1 = false;
								}
								if(!e1) {
									e = this.die("Expected :");
								} else {
									e = null;
								}
								__ret1[key] = this.parse23();
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_criteria4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_criteria4 = true;
								} else {
									v_criteria4 = false;
								}
								if(!v_criteria4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_criteria5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_criteria5 = true;
							} else {
								v_criteria5 = false;
							}
							if(!v_criteria5) {
								this.die("Expected }");
							}
						}
						v_criteria = __ret1;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { criteria : v_criteria, range : v_range, sortSpecs : v_sortSpecs};
	}
	,parse54: function() {
		var _gthis = this;
		var v_columnMetadata = null;
		var v_rowData = null;
		var v_rowMetadata = null;
		var v_startColumn = null;
		var v_startRow = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("startRow".length == __name__.max - __name__.min && __name__.source.startsWith("startRow",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_startRow1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_startRow1 = true;
					} else {
						v_startRow1 = false;
					}
					if(v_startRow1) {
						v_startRow = null;
					} else {
						var this1 = this.parseNumber();
						v_startRow = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("startColumn".length == __name__.max - __name__.min && __name__.source.startsWith("startColumn",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_startColumn1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_startColumn1 = true;
					} else {
						v_startColumn1 = false;
					}
					if(v_startColumn1) {
						v_startColumn = null;
					} else {
						var this2 = this.parseNumber();
						v_startColumn = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("rowMetadata".length == __name__.max - __name__.min && __name__.source.startsWith("rowMetadata",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rowMetadata1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rowMetadata1 = true;
					} else {
						v_rowMetadata1 = false;
					}
					if(v_rowMetadata1) {
						v_rowMetadata = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_rowMetadata2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_rowMetadata2 = true;
						} else {
							v_rowMetadata2 = false;
						}
						if(!v_rowMetadata2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_rowMetadata3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_rowMetadata3 = true;
						} else {
							v_rowMetadata3 = false;
						}
						if(!v_rowMetadata3) {
							while(true) {
								__ret.push(this.parse55());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_rowMetadata4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_rowMetadata4 = true;
								} else {
									v_rowMetadata4 = false;
								}
								if(!v_rowMetadata4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_rowMetadata5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_rowMetadata5 = true;
							} else {
								v_rowMetadata5 = false;
							}
							if(!v_rowMetadata5) {
								this.die("Expected ]");
							}
						}
						v_rowMetadata = __ret;
					}
				} else if("rowData".length == __name__.max - __name__.min && __name__.source.startsWith("rowData",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rowData1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rowData1 = true;
					} else {
						v_rowData1 = false;
					}
					if(v_rowData1) {
						v_rowData = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_rowData2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_rowData2 = true;
						} else {
							v_rowData2 = false;
						}
						if(!v_rowData2) {
							this.die("Expected [");
						}
						var __ret1 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_rowData3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_rowData3 = true;
						} else {
							v_rowData3 = false;
						}
						if(!v_rowData3) {
							while(true) {
								__ret1.push(this.parse56());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_rowData4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_rowData4 = true;
								} else {
									v_rowData4 = false;
								}
								if(!v_rowData4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_rowData5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_rowData5 = true;
							} else {
								v_rowData5 = false;
							}
							if(!v_rowData5) {
								this.die("Expected ]");
							}
						}
						v_rowData = __ret1;
					}
				} else if("columnMetadata".length == __name__.max - __name__.min && __name__.source.startsWith("columnMetadata",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_columnMetadata1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_columnMetadata1 = true;
					} else {
						v_columnMetadata1 = false;
					}
					if(v_columnMetadata1) {
						v_columnMetadata = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_columnMetadata2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_columnMetadata2 = true;
						} else {
							v_columnMetadata2 = false;
						}
						if(!v_columnMetadata2) {
							this.die("Expected [");
						}
						var __ret2 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_columnMetadata3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_columnMetadata3 = true;
						} else {
							v_columnMetadata3 = false;
						}
						if(!v_columnMetadata3) {
							while(true) {
								__ret2.push(this.parse55());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_columnMetadata4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_columnMetadata4 = true;
								} else {
									v_columnMetadata4 = false;
								}
								if(!v_columnMetadata4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_columnMetadata5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_columnMetadata5 = true;
							} else {
								v_columnMetadata5 = false;
							}
							if(!v_columnMetadata5) {
								this.die("Expected ]");
							}
						}
						v_columnMetadata = __ret2;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { columnMetadata : v_columnMetadata, rowData : v_rowData, rowMetadata : v_rowMetadata, startColumn : v_startColumn, startRow : v_startRow};
	}
	,parse55: function() {
		var _gthis = this;
		var v_hiddenByFilter = null;
		var v_hiddenByUser = null;
		var v_pixelSize = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("pixelSize".length == __name__.max - __name__.min && __name__.source.startsWith("pixelSize",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_pixelSize1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_pixelSize1 = true;
					} else {
						v_pixelSize1 = false;
					}
					if(v_pixelSize1) {
						v_pixelSize = null;
					} else {
						var this1 = this.parseNumber();
						v_pixelSize = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("hiddenByUser".length == __name__.max - __name__.min && __name__.source.startsWith("hiddenByUser",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hiddenByUser1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hiddenByUser1 = true;
					} else {
						v_hiddenByUser1 = false;
					}
					if(v_hiddenByUser1) {
						v_hiddenByUser = null;
					} else {
						v_hiddenByUser = this.parseBool();
					}
				} else if("hiddenByFilter".length == __name__.max - __name__.min && __name__.source.startsWith("hiddenByFilter",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hiddenByFilter1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hiddenByFilter1 = true;
					} else {
						v_hiddenByFilter1 = false;
					}
					if(v_hiddenByFilter1) {
						v_hiddenByFilter = null;
					} else {
						v_hiddenByFilter = this.parseBool();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { hiddenByFilter : v_hiddenByFilter, hiddenByUser : v_hiddenByUser, pixelSize : v_pixelSize};
	}
	,parse56: function() {
		var _gthis = this;
		var v_values = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("values".length == __name__.max - __name__.min && __name__.source.startsWith("values",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_values1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_values1 = true;
					} else {
						v_values1 = false;
					}
					if(v_values1) {
						v_values = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values2 = true;
						} else {
							v_values2 = false;
						}
						if(!v_values2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values3 = true;
						} else {
							v_values3 = false;
						}
						if(!v_values3) {
							while(true) {
								__ret.push(this.parse57());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values4 = true;
								} else {
									v_values4 = false;
								}
								if(!v_values4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_values5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_values5 = true;
							} else {
								v_values5 = false;
							}
							if(!v_values5) {
								this.die("Expected ]");
							}
						}
						v_values = __ret;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { values : v_values};
	}
	,parse57: function() {
		var _gthis = this;
		var v_dataValidation = null;
		var v_effectiveFormat = null;
		var v_effectiveValue = null;
		var v_formattedValue = null;
		var v_hyperlink = null;
		var v_note = null;
		var v_pivotTable = null;
		var v_textFormatRuns = null;
		var v_userEnteredFormat = null;
		var v_userEnteredValue = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("userEnteredValue".length == __name__.max - __name__.min && __name__.source.startsWith("userEnteredValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_userEnteredValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_userEnteredValue1 = true;
					} else {
						v_userEnteredValue1 = false;
					}
					if(v_userEnteredValue1) {
						v_userEnteredValue = null;
					} else {
						v_userEnteredValue = this.parse59();
					}
				} else if("userEnteredFormat".length == __name__.max - __name__.min && __name__.source.startsWith("userEnteredFormat",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_userEnteredFormat1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_userEnteredFormat1 = true;
					} else {
						v_userEnteredFormat1 = false;
					}
					if(v_userEnteredFormat1) {
						v_userEnteredFormat = null;
					} else {
						v_userEnteredFormat = this.parse38();
					}
				} else if("textFormatRuns".length == __name__.max - __name__.min && __name__.source.startsWith("textFormatRuns",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_textFormatRuns1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_textFormatRuns1 = true;
					} else {
						v_textFormatRuns1 = false;
					}
					if(v_textFormatRuns1) {
						v_textFormatRuns = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_textFormatRuns2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_textFormatRuns2 = true;
						} else {
							v_textFormatRuns2 = false;
						}
						if(!v_textFormatRuns2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_textFormatRuns3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_textFormatRuns3 = true;
						} else {
							v_textFormatRuns3 = false;
						}
						if(!v_textFormatRuns3) {
							while(true) {
								__ret.push(this.parse67());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_textFormatRuns4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_textFormatRuns4 = true;
								} else {
									v_textFormatRuns4 = false;
								}
								if(!v_textFormatRuns4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_textFormatRuns5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_textFormatRuns5 = true;
							} else {
								v_textFormatRuns5 = false;
							}
							if(!v_textFormatRuns5) {
								this.die("Expected ]");
							}
						}
						v_textFormatRuns = __ret;
					}
				} else if("pivotTable".length == __name__.max - __name__.min && __name__.source.startsWith("pivotTable",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_pivotTable1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_pivotTable1 = true;
					} else {
						v_pivotTable1 = false;
					}
					if(v_pivotTable1) {
						v_pivotTable = null;
					} else {
						v_pivotTable = this.parse61();
					}
				} else if("note".length == __name__.max - __name__.min && __name__.source.startsWith("note",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_note1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_note1 = true;
					} else {
						v_note1 = false;
					}
					if(v_note1) {
						v_note = null;
					} else {
						v_note = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("hyperlink".length == __name__.max - __name__.min && __name__.source.startsWith("hyperlink",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hyperlink1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hyperlink1 = true;
					} else {
						v_hyperlink1 = false;
					}
					if(v_hyperlink1) {
						v_hyperlink = null;
					} else {
						v_hyperlink = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("formattedValue".length == __name__.max - __name__.min && __name__.source.startsWith("formattedValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_formattedValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_formattedValue1 = true;
					} else {
						v_formattedValue1 = false;
					}
					if(v_formattedValue1) {
						v_formattedValue = null;
					} else {
						v_formattedValue = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("effectiveValue".length == __name__.max - __name__.min && __name__.source.startsWith("effectiveValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_effectiveValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_effectiveValue1 = true;
					} else {
						v_effectiveValue1 = false;
					}
					if(v_effectiveValue1) {
						v_effectiveValue = null;
					} else {
						v_effectiveValue = this.parse59();
					}
				} else if("effectiveFormat".length == __name__.max - __name__.min && __name__.source.startsWith("effectiveFormat",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_effectiveFormat1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_effectiveFormat1 = true;
					} else {
						v_effectiveFormat1 = false;
					}
					if(v_effectiveFormat1) {
						v_effectiveFormat = null;
					} else {
						v_effectiveFormat = this.parse38();
					}
				} else if("dataValidation".length == __name__.max - __name__.min && __name__.source.startsWith("dataValidation",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_dataValidation1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_dataValidation1 = true;
					} else {
						v_dataValidation1 = false;
					}
					if(v_dataValidation1) {
						v_dataValidation = null;
					} else {
						v_dataValidation = this.parse58();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { dataValidation : v_dataValidation, effectiveFormat : v_effectiveFormat, effectiveValue : v_effectiveValue, formattedValue : v_formattedValue, hyperlink : v_hyperlink, note : v_note, pivotTable : v_pivotTable, textFormatRuns : v_textFormatRuns, userEnteredFormat : v_userEnteredFormat, userEnteredValue : v_userEnteredValue};
	}
	,parse58: function() {
		var _gthis = this;
		var v_condition = null;
		var v_inputMessage = null;
		var v_showCustomUi = null;
		var v_strict = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("strict".length == __name__.max - __name__.min && __name__.source.startsWith("strict",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_strict1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_strict1 = true;
					} else {
						v_strict1 = false;
					}
					if(v_strict1) {
						v_strict = null;
					} else {
						v_strict = this.parseBool();
					}
				} else if("showCustomUi".length == __name__.max - __name__.min && __name__.source.startsWith("showCustomUi",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_showCustomUi1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_showCustomUi1 = true;
					} else {
						v_showCustomUi1 = false;
					}
					if(v_showCustomUi1) {
						v_showCustomUi = null;
					} else {
						v_showCustomUi = this.parseBool();
					}
				} else if("inputMessage".length == __name__.max - __name__.min && __name__.source.startsWith("inputMessage",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_inputMessage1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_inputMessage1 = true;
					} else {
						v_inputMessage1 = false;
					}
					if(v_inputMessage1) {
						v_inputMessage = null;
					} else {
						v_inputMessage = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("condition".length == __name__.max - __name__.min && __name__.source.startsWith("condition",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_condition1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_condition1 = true;
					} else {
						v_condition1 = false;
					}
					if(v_condition1) {
						v_condition = null;
					} else {
						v_condition = this.parse24();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { condition : v_condition, inputMessage : v_inputMessage, showCustomUi : v_showCustomUi, strict : v_strict};
	}
	,parse59: function() {
		var _gthis = this;
		var v_boolValue = null;
		var v_errorValue = null;
		var v_formulaValue = null;
		var v_numberValue = null;
		var v_stringValue = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("stringValue".length == __name__.max - __name__.min && __name__.source.startsWith("stringValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_stringValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_stringValue1 = true;
					} else {
						v_stringValue1 = false;
					}
					if(v_stringValue1) {
						v_stringValue = null;
					} else {
						v_stringValue = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("numberValue".length == __name__.max - __name__.min && __name__.source.startsWith("numberValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_numberValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_numberValue1 = true;
					} else {
						v_numberValue1 = false;
					}
					if(v_numberValue1) {
						v_numberValue = null;
					} else {
						var this1 = this.parseNumber();
						v_numberValue = parseFloat(this1.source.substring(this1.min,this1.max));
					}
				} else if("formulaValue".length == __name__.max - __name__.min && __name__.source.startsWith("formulaValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_formulaValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_formulaValue1 = true;
					} else {
						v_formulaValue1 = false;
					}
					if(v_formulaValue1) {
						v_formulaValue = null;
					} else {
						v_formulaValue = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("errorValue".length == __name__.max - __name__.min && __name__.source.startsWith("errorValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_errorValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_errorValue1 = true;
					} else {
						v_errorValue1 = false;
					}
					if(v_errorValue1) {
						v_errorValue = null;
					} else {
						v_errorValue = this.parse60();
					}
				} else if("boolValue".length == __name__.max - __name__.min && __name__.source.startsWith("boolValue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_boolValue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_boolValue1 = true;
					} else {
						v_boolValue1 = false;
					}
					if(v_boolValue1) {
						v_boolValue = null;
					} else {
						v_boolValue = this.parseBool();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { boolValue : v_boolValue, errorValue : v_errorValue, formulaValue : v_formulaValue, numberValue : v_numberValue, stringValue : v_stringValue};
	}
	,parse60: function() {
		var _gthis = this;
		var v_message = null;
		var v_type = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("type".length == __name__.max - __name__.min && __name__.source.startsWith("type",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_type1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_type1 = true;
					} else {
						v_type1 = false;
					}
					if(v_type1) {
						v_type = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "DIVIDE_BY_ZERO":case "ERROR":case "ERROR_TYPE_UNSPECIFIED":case "LOADING":case "NAME":case "NULL_VALUE":case "NUM":case "N_A":case "REF":case "VALUE":
							v_type = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse60"}));
						}
					}
				} else if("message".length == __name__.max - __name__.min && __name__.source.startsWith("message",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_message1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_message1 = true;
					} else {
						v_message1 = false;
					}
					if(v_message1) {
						v_message = null;
					} else {
						v_message = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { message : v_message, type : v_type};
	}
	,parse61: function() {
		var _gthis = this;
		var v_columns = null;
		var v_criteria = null;
		var v_rows = null;
		var v_source = null;
		var v_valueLayout = null;
		var v_values = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("values".length == __name__.max - __name__.min && __name__.source.startsWith("values",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_values1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_values1 = true;
					} else {
						v_values1 = false;
					}
					if(v_values1) {
						v_values = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values2 = true;
						} else {
							v_values2 = false;
						}
						if(!v_values2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values3 = true;
						} else {
							v_values3 = false;
						}
						if(!v_values3) {
							while(true) {
								__ret.push(this.parse66());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values4 = true;
								} else {
									v_values4 = false;
								}
								if(!v_values4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_values5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_values5 = true;
							} else {
								v_values5 = false;
							}
							if(!v_values5) {
								this.die("Expected ]");
							}
						}
						v_values = __ret;
					}
				} else if("valueLayout".length == __name__.max - __name__.min && __name__.source.startsWith("valueLayout",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_valueLayout1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_valueLayout1 = true;
					} else {
						v_valueLayout1 = false;
					}
					if(v_valueLayout1) {
						v_valueLayout = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "HORIZONTAL":case "VERTICAL":
							v_valueLayout = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse61"}));
						}
					}
				} else if("source".length == __name__.max - __name__.min && __name__.source.startsWith("source",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_source1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_source1 = true;
					} else {
						v_source1 = false;
					}
					if(v_source1) {
						v_source = null;
					} else {
						v_source = this.parse6();
					}
				} else if("rows".length == __name__.max - __name__.min && __name__.source.startsWith("rows",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rows1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rows1 = true;
					} else {
						v_rows1 = false;
					}
					if(v_rows1) {
						v_rows = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_rows2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_rows2 = true;
						} else {
							v_rows2 = false;
						}
						if(!v_rows2) {
							this.die("Expected [");
						}
						var __ret1 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_rows3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_rows3 = true;
						} else {
							v_rows3 = false;
						}
						if(!v_rows3) {
							while(true) {
								__ret1.push(this.parse62());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_rows4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_rows4 = true;
								} else {
									v_rows4 = false;
								}
								if(!v_rows4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_rows5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_rows5 = true;
							} else {
								v_rows5 = false;
							}
							if(!v_rows5) {
								this.die("Expected ]");
							}
						}
						v_rows = __ret1;
					}
				} else if("criteria".length == __name__.max - __name__.min && __name__.source.startsWith("criteria",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_criteria1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_criteria1 = true;
					} else {
						v_criteria1 = false;
					}
					if(v_criteria1) {
						v_criteria = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_criteria2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_criteria2 = true;
						} else {
							v_criteria2 = false;
						}
						if(!v_criteria2) {
							this.die("Expected {");
						}
						var this1 = { };
						var __ret2 = this1;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_criteria3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_criteria3 = true;
						} else {
							v_criteria3 = false;
						}
						if(!v_criteria3) {
							while(true) {
								var key = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
								var e;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var e1;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									e1 = true;
								} else {
									e1 = false;
								}
								if(!e1) {
									e = this.die("Expected :");
								} else {
									e = null;
								}
								__ret2[key] = this.parse65();
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_criteria4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_criteria4 = true;
								} else {
									v_criteria4 = false;
								}
								if(!v_criteria4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_criteria5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_criteria5 = true;
							} else {
								v_criteria5 = false;
							}
							if(!v_criteria5) {
								this.die("Expected }");
							}
						}
						v_criteria = __ret2;
					}
				} else if("columns".length == __name__.max - __name__.min && __name__.source.startsWith("columns",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_columns1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_columns1 = true;
					} else {
						v_columns1 = false;
					}
					if(v_columns1) {
						v_columns = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_columns2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_columns2 = true;
						} else {
							v_columns2 = false;
						}
						if(!v_columns2) {
							this.die("Expected [");
						}
						var __ret3 = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_columns3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_columns3 = true;
						} else {
							v_columns3 = false;
						}
						if(!v_columns3) {
							while(true) {
								__ret3.push(this.parse62());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_columns4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_columns4 = true;
								} else {
									v_columns4 = false;
								}
								if(!v_columns4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_columns5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_columns5 = true;
							} else {
								v_columns5 = false;
							}
							if(!v_columns5) {
								this.die("Expected ]");
							}
						}
						v_columns = __ret3;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { columns : v_columns, criteria : v_criteria, rows : v_rows, source : v_source, valueLayout : v_valueLayout, values : v_values};
	}
	,parse62: function() {
		var _gthis = this;
		var v_showTotals = null;
		var v_sortOrder = null;
		var v_sourceColumnOffset = null;
		var v_valueBucket = null;
		var v_valueMetadata = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("valueMetadata".length == __name__.max - __name__.min && __name__.source.startsWith("valueMetadata",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_valueMetadata1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_valueMetadata1 = true;
					} else {
						v_valueMetadata1 = false;
					}
					if(v_valueMetadata1) {
						v_valueMetadata = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_valueMetadata2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_valueMetadata2 = true;
						} else {
							v_valueMetadata2 = false;
						}
						if(!v_valueMetadata2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_valueMetadata3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_valueMetadata3 = true;
						} else {
							v_valueMetadata3 = false;
						}
						if(!v_valueMetadata3) {
							while(true) {
								__ret.push(this.parse64());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_valueMetadata4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_valueMetadata4 = true;
								} else {
									v_valueMetadata4 = false;
								}
								if(!v_valueMetadata4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_valueMetadata5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_valueMetadata5 = true;
							} else {
								v_valueMetadata5 = false;
							}
							if(!v_valueMetadata5) {
								this.die("Expected ]");
							}
						}
						v_valueMetadata = __ret;
					}
				} else if("valueBucket".length == __name__.max - __name__.min && __name__.source.startsWith("valueBucket",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_valueBucket1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_valueBucket1 = true;
					} else {
						v_valueBucket1 = false;
					}
					if(v_valueBucket1) {
						v_valueBucket = null;
					} else {
						v_valueBucket = this.parse63();
					}
				} else if("sourceColumnOffset".length == __name__.max - __name__.min && __name__.source.startsWith("sourceColumnOffset",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sourceColumnOffset1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sourceColumnOffset1 = true;
					} else {
						v_sourceColumnOffset1 = false;
					}
					if(v_sourceColumnOffset1) {
						v_sourceColumnOffset = null;
					} else {
						var this1 = this.parseNumber();
						v_sourceColumnOffset = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("sortOrder".length == __name__.max - __name__.min && __name__.source.startsWith("sortOrder",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sortOrder1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sortOrder1 = true;
					} else {
						v_sortOrder1 = false;
					}
					if(v_sortOrder1) {
						v_sortOrder = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "ASCENDING":case "DESCENDING":case "SORT_ORDER_UNSPECIFIED":
							v_sortOrder = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse62"}));
						}
					}
				} else if("showTotals".length == __name__.max - __name__.min && __name__.source.startsWith("showTotals",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_showTotals1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_showTotals1 = true;
					} else {
						v_showTotals1 = false;
					}
					if(v_showTotals1) {
						v_showTotals = null;
					} else {
						v_showTotals = this.parseBool();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { showTotals : v_showTotals, sortOrder : v_sortOrder, sourceColumnOffset : v_sourceColumnOffset, valueBucket : v_valueBucket, valueMetadata : v_valueMetadata};
	}
	,parse63: function() {
		var _gthis = this;
		var v_buckets = null;
		var v_valuesIndex = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("valuesIndex".length == __name__.max - __name__.min && __name__.source.startsWith("valuesIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_valuesIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_valuesIndex1 = true;
					} else {
						v_valuesIndex1 = false;
					}
					if(v_valuesIndex1) {
						v_valuesIndex = null;
					} else {
						var this1 = this.parseNumber();
						v_valuesIndex = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("buckets".length == __name__.max - __name__.min && __name__.source.startsWith("buckets",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_buckets1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_buckets1 = true;
					} else {
						v_buckets1 = false;
					}
					if(v_buckets1) {
						v_buckets = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_buckets2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_buckets2 = true;
						} else {
							v_buckets2 = false;
						}
						if(!v_buckets2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_buckets3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_buckets3 = true;
						} else {
							v_buckets3 = false;
						}
						if(!v_buckets3) {
							while(true) {
								__ret.push(this.parse59());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_buckets4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_buckets4 = true;
								} else {
									v_buckets4 = false;
								}
								if(!v_buckets4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_buckets5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_buckets5 = true;
							} else {
								v_buckets5 = false;
							}
							if(!v_buckets5) {
								this.die("Expected ]");
							}
						}
						v_buckets = __ret;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { buckets : v_buckets, valuesIndex : v_valuesIndex};
	}
	,parse64: function() {
		var _gthis = this;
		var v_collapsed = null;
		var v_value = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("value".length == __name__.max - __name__.min && __name__.source.startsWith("value",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_value1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_value1 = true;
					} else {
						v_value1 = false;
					}
					if(v_value1) {
						v_value = null;
					} else {
						v_value = this.parse59();
					}
				} else if("collapsed".length == __name__.max - __name__.min && __name__.source.startsWith("collapsed",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_collapsed1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_collapsed1 = true;
					} else {
						v_collapsed1 = false;
					}
					if(v_collapsed1) {
						v_collapsed = null;
					} else {
						v_collapsed = this.parseBool();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { collapsed : v_collapsed, value : v_value};
	}
	,parse65: function() {
		var _gthis = this;
		var v_visibleValues = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("visibleValues".length == __name__.max - __name__.min && __name__.source.startsWith("visibleValues",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_visibleValues1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_visibleValues1 = true;
					} else {
						v_visibleValues1 = false;
					}
					if(v_visibleValues1) {
						v_visibleValues = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_visibleValues2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_visibleValues2 = true;
						} else {
							v_visibleValues2 = false;
						}
						if(!v_visibleValues2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_visibleValues3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_visibleValues3 = true;
						} else {
							v_visibleValues3 = false;
						}
						if(!v_visibleValues3) {
							while(true) {
								__ret.push(tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString()));
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_visibleValues4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_visibleValues4 = true;
								} else {
									v_visibleValues4 = false;
								}
								if(!v_visibleValues4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_visibleValues5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_visibleValues5 = true;
							} else {
								v_visibleValues5 = false;
							}
							if(!v_visibleValues5) {
								this.die("Expected ]");
							}
						}
						v_visibleValues = __ret;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { visibleValues : v_visibleValues};
	}
	,parse66: function() {
		var _gthis = this;
		var v_formula = null;
		var v_name = null;
		var v_sourceColumnOffset = null;
		var v_summarizeFunction = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("summarizeFunction".length == __name__.max - __name__.min && __name__.source.startsWith("summarizeFunction",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_summarizeFunction1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_summarizeFunction1 = true;
					} else {
						v_summarizeFunction1 = false;
					}
					if(v_summarizeFunction1) {
						v_summarizeFunction = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "AVERAGE":case "COUNT":case "COUNTA":case "COUNTUNIQUE":case "CUSTOM":case "MAX":case "MEDIAN":case "MIN":case "PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED":case "PRODUCT":case "STDEV":case "STDEVP":case "SUM":case "VAR":case "VARP":
							v_summarizeFunction = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser1", methodName : "parse66"}));
						}
					}
				} else if("sourceColumnOffset".length == __name__.max - __name__.min && __name__.source.startsWith("sourceColumnOffset",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sourceColumnOffset1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sourceColumnOffset1 = true;
					} else {
						v_sourceColumnOffset1 = false;
					}
					if(v_sourceColumnOffset1) {
						v_sourceColumnOffset = null;
					} else {
						var this1 = this.parseNumber();
						v_sourceColumnOffset = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("name".length == __name__.max - __name__.min && __name__.source.startsWith("name",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_name1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_name1 = true;
					} else {
						v_name1 = false;
					}
					if(v_name1) {
						v_name = null;
					} else {
						v_name = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("formula".length == __name__.max - __name__.min && __name__.source.startsWith("formula",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_formula1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_formula1 = true;
					} else {
						v_formula1 = false;
					}
					if(v_formula1) {
						v_formula = null;
					} else {
						v_formula = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { formula : v_formula, name : v_name, sourceColumnOffset : v_sourceColumnOffset, summarizeFunction : v_summarizeFunction};
	}
	,parse67: function() {
		var _gthis = this;
		var v_format = null;
		var v_startIndex = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("startIndex".length == __name__.max - __name__.min && __name__.source.startsWith("startIndex",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_startIndex1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_startIndex1 = true;
					} else {
						v_startIndex1 = false;
					}
					if(v_startIndex1) {
						v_startIndex = null;
					} else {
						var this1 = this.parseNumber();
						v_startIndex = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("format".length == __name__.max - __name__.min && __name__.source.startsWith("format",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_format1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_format1 = true;
					} else {
						v_format1 = false;
					}
					if(v_format1) {
						v_format = null;
					} else {
						v_format = this.parse15();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { format : v_format, startIndex : v_startIndex};
	}
	,parse: function(source) {
		this.init(source);
		return this.parse0();
	}
	,tryParse: function(source) {
		var _gthis = this;
		return tink_core_TypedError.catchExceptions(function() {
			return _gthis.parse(source);
		},null,{ fileName : "Macro.hx", lineNumber : 67, className : "tink.json.Parser1", methodName : "tryParse"});
	}
	,__class__: tink_json_Parser1
});
var tink_json_Parser2 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser2.__name__ = true;
tink_json_Parser2.__super__ = tink_json_BasicParser;
tink_json_Parser2.prototype = $extend(tink_json_BasicParser.prototype,{
	parse0: function() {
		var _gthis = this;
		var v_clearedRanges = null;
		var v_spreadsheetId = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("spreadsheetId".length == __name__.max - __name__.min && __name__.source.startsWith("spreadsheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_spreadsheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_spreadsheetId1 = true;
					} else {
						v_spreadsheetId1 = false;
					}
					if(v_spreadsheetId1) {
						v_spreadsheetId = null;
					} else {
						v_spreadsheetId = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("clearedRanges".length == __name__.max - __name__.min && __name__.source.startsWith("clearedRanges",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_clearedRanges1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_clearedRanges1 = true;
					} else {
						v_clearedRanges1 = false;
					}
					if(v_clearedRanges1) {
						v_clearedRanges = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_clearedRanges2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_clearedRanges2 = true;
						} else {
							v_clearedRanges2 = false;
						}
						if(!v_clearedRanges2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_clearedRanges3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_clearedRanges3 = true;
						} else {
							v_clearedRanges3 = false;
						}
						if(!v_clearedRanges3) {
							while(true) {
								__ret.push(tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString()));
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_clearedRanges4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_clearedRanges4 = true;
								} else {
									v_clearedRanges4 = false;
								}
								if(!v_clearedRanges4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_clearedRanges5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_clearedRanges5 = true;
							} else {
								v_clearedRanges5 = false;
							}
							if(!v_clearedRanges5) {
								this.die("Expected ]");
							}
						}
						v_clearedRanges = __ret;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { clearedRanges : v_clearedRanges, spreadsheetId : v_spreadsheetId};
	}
	,parse: function(source) {
		this.init(source);
		return this.parse0();
	}
	,tryParse: function(source) {
		var _gthis = this;
		return tink_core_TypedError.catchExceptions(function() {
			return _gthis.parse(source);
		},null,{ fileName : "Macro.hx", lineNumber : 67, className : "tink.json.Parser2", methodName : "tryParse"});
	}
	,__class__: tink_json_Parser2
});
var tink_json_Parser3 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser3.__name__ = true;
tink_json_Parser3.__super__ = tink_json_BasicParser;
tink_json_Parser3.prototype = $extend(tink_json_BasicParser.prototype,{
	parse0: function() {
		var _gthis = this;
		var v_majorDimension = null;
		var v_range = null;
		var v_values = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("values".length == __name__.max - __name__.min && __name__.source.startsWith("values",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_values1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_values1 = true;
					} else {
						v_values1 = false;
					}
					if(v_values1) {
						v_values = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values2 = true;
						} else {
							v_values2 = false;
						}
						if(!v_values2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values3 = true;
						} else {
							v_values3 = false;
						}
						if(!v_values3) {
							while(true) {
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values4 = true;
								} else {
									v_values4 = false;
								}
								if(!v_values4) {
									this.die("Expected [");
								}
								var __ret1 = [];
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values5;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values5 = true;
								} else {
									v_values5 = false;
								}
								if(!v_values5) {
									while(true) {
										__ret1.push(this.parseValue());
										while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
										var v_values6;
										if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
											this.pos += 1;
											while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
											v_values6 = true;
										} else {
											v_values6 = false;
										}
										if(!v_values6) {
											break;
										}
									}
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									var v_values7;
									if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
										this.pos += 1;
										while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
										v_values7 = true;
									} else {
										v_values7 = false;
									}
									if(!v_values7) {
										this.die("Expected ]");
									}
								}
								__ret.push(__ret1);
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values8;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values8 = true;
								} else {
									v_values8 = false;
								}
								if(!v_values8) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_values9;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_values9 = true;
							} else {
								v_values9 = false;
							}
							if(!v_values9) {
								this.die("Expected ]");
							}
						}
						v_values = __ret;
					}
				} else if("range".length == __name__.max - __name__.min && __name__.source.startsWith("range",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_range1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_range1 = true;
					} else {
						v_range1 = false;
					}
					if(v_range1) {
						v_range = null;
					} else {
						v_range = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("majorDimension".length == __name__.max - __name__.min && __name__.source.startsWith("majorDimension",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_majorDimension1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_majorDimension1 = true;
					} else {
						v_majorDimension1 = false;
					}
					if(v_majorDimension1) {
						v_majorDimension = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "COLUMNS":case "DIMENSION_UNSPECIFIED":case "ROWS":
							v_majorDimension = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser3", methodName : "parse0"}));
						}
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { majorDimension : v_majorDimension, range : v_range, values : v_values};
	}
	,parse: function(source) {
		this.init(source);
		return this.parse0();
	}
	,tryParse: function(source) {
		var _gthis = this;
		return tink_core_TypedError.catchExceptions(function() {
			return _gthis.parse(source);
		},null,{ fileName : "Macro.hx", lineNumber : 67, className : "tink.json.Parser3", methodName : "tryParse"});
	}
	,__class__: tink_json_Parser3
});
var tink_json_Parser4 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser4.__name__ = true;
tink_json_Parser4.__super__ = tink_json_BasicParser;
tink_json_Parser4.prototype = $extend(tink_json_BasicParser.prototype,{
	parse0: function() {
		var _gthis = this;
		var v_spreadsheetId = null;
		var v_updatedCells = null;
		var v_updatedColumns = null;
		var v_updatedData = null;
		var v_updatedRange = null;
		var v_updatedRows = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("updatedRows".length == __name__.max - __name__.min && __name__.source.startsWith("updatedRows",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updatedRows1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updatedRows1 = true;
					} else {
						v_updatedRows1 = false;
					}
					if(v_updatedRows1) {
						v_updatedRows = null;
					} else {
						var this1 = this.parseNumber();
						v_updatedRows = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("updatedRange".length == __name__.max - __name__.min && __name__.source.startsWith("updatedRange",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updatedRange1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updatedRange1 = true;
					} else {
						v_updatedRange1 = false;
					}
					if(v_updatedRange1) {
						v_updatedRange = null;
					} else {
						v_updatedRange = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("updatedData".length == __name__.max - __name__.min && __name__.source.startsWith("updatedData",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updatedData1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updatedData1 = true;
					} else {
						v_updatedData1 = false;
					}
					if(v_updatedData1) {
						v_updatedData = null;
					} else {
						v_updatedData = this.parse1();
					}
				} else if("updatedColumns".length == __name__.max - __name__.min && __name__.source.startsWith("updatedColumns",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updatedColumns1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updatedColumns1 = true;
					} else {
						v_updatedColumns1 = false;
					}
					if(v_updatedColumns1) {
						v_updatedColumns = null;
					} else {
						var this2 = this.parseNumber();
						v_updatedColumns = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("updatedCells".length == __name__.max - __name__.min && __name__.source.startsWith("updatedCells",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updatedCells1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updatedCells1 = true;
					} else {
						v_updatedCells1 = false;
					}
					if(v_updatedCells1) {
						v_updatedCells = null;
					} else {
						var this3 = this.parseNumber();
						v_updatedCells = Std.parseInt(this3.source.substring(this3.min,this3.max));
					}
				} else if("spreadsheetId".length == __name__.max - __name__.min && __name__.source.startsWith("spreadsheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_spreadsheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_spreadsheetId1 = true;
					} else {
						v_spreadsheetId1 = false;
					}
					if(v_spreadsheetId1) {
						v_spreadsheetId = null;
					} else {
						v_spreadsheetId = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { spreadsheetId : v_spreadsheetId, updatedCells : v_updatedCells, updatedColumns : v_updatedColumns, updatedData : v_updatedData, updatedRange : v_updatedRange, updatedRows : v_updatedRows};
	}
	,parse1: function() {
		var _gthis = this;
		var v_majorDimension = null;
		var v_range = null;
		var v_values = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("values".length == __name__.max - __name__.min && __name__.source.startsWith("values",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_values1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_values1 = true;
					} else {
						v_values1 = false;
					}
					if(v_values1) {
						v_values = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values2 = true;
						} else {
							v_values2 = false;
						}
						if(!v_values2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values3 = true;
						} else {
							v_values3 = false;
						}
						if(!v_values3) {
							while(true) {
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values4 = true;
								} else {
									v_values4 = false;
								}
								if(!v_values4) {
									this.die("Expected [");
								}
								var __ret1 = [];
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values5;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values5 = true;
								} else {
									v_values5 = false;
								}
								if(!v_values5) {
									while(true) {
										__ret1.push(this.parseValue());
										while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
										var v_values6;
										if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
											this.pos += 1;
											while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
											v_values6 = true;
										} else {
											v_values6 = false;
										}
										if(!v_values6) {
											break;
										}
									}
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									var v_values7;
									if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
										this.pos += 1;
										while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
										v_values7 = true;
									} else {
										v_values7 = false;
									}
									if(!v_values7) {
										this.die("Expected ]");
									}
								}
								__ret.push(__ret1);
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values8;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values8 = true;
								} else {
									v_values8 = false;
								}
								if(!v_values8) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_values9;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_values9 = true;
							} else {
								v_values9 = false;
							}
							if(!v_values9) {
								this.die("Expected ]");
							}
						}
						v_values = __ret;
					}
				} else if("range".length == __name__.max - __name__.min && __name__.source.startsWith("range",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_range1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_range1 = true;
					} else {
						v_range1 = false;
					}
					if(v_range1) {
						v_range = null;
					} else {
						v_range = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("majorDimension".length == __name__.max - __name__.min && __name__.source.startsWith("majorDimension",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_majorDimension1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_majorDimension1 = true;
					} else {
						v_majorDimension1 = false;
					}
					if(v_majorDimension1) {
						v_majorDimension = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "COLUMNS":case "DIMENSION_UNSPECIFIED":case "ROWS":
							v_majorDimension = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser4", methodName : "parse1"}));
						}
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { majorDimension : v_majorDimension, range : v_range, values : v_values};
	}
	,parse: function(source) {
		this.init(source);
		return this.parse0();
	}
	,tryParse: function(source) {
		var _gthis = this;
		return tink_core_TypedError.catchExceptions(function() {
			return _gthis.parse(source);
		},null,{ fileName : "Macro.hx", lineNumber : 67, className : "tink.json.Parser4", methodName : "tryParse"});
	}
	,__class__: tink_json_Parser4
});
var tink_json_Parser5 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser5.__name__ = true;
tink_json_Parser5.__super__ = tink_json_BasicParser;
tink_json_Parser5.prototype = $extend(tink_json_BasicParser.prototype,{
	parse0: function() {
		var _gthis = this;
		var v_responses = null;
		var v_spreadsheetId = null;
		var v_totalUpdatedCells = null;
		var v_totalUpdatedColumns = null;
		var v_totalUpdatedRows = null;
		var v_totalUpdatedSheets = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("totalUpdatedSheets".length == __name__.max - __name__.min && __name__.source.startsWith("totalUpdatedSheets",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_totalUpdatedSheets1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_totalUpdatedSheets1 = true;
					} else {
						v_totalUpdatedSheets1 = false;
					}
					if(v_totalUpdatedSheets1) {
						v_totalUpdatedSheets = null;
					} else {
						var this1 = this.parseNumber();
						v_totalUpdatedSheets = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("totalUpdatedRows".length == __name__.max - __name__.min && __name__.source.startsWith("totalUpdatedRows",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_totalUpdatedRows1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_totalUpdatedRows1 = true;
					} else {
						v_totalUpdatedRows1 = false;
					}
					if(v_totalUpdatedRows1) {
						v_totalUpdatedRows = null;
					} else {
						var this2 = this.parseNumber();
						v_totalUpdatedRows = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("totalUpdatedColumns".length == __name__.max - __name__.min && __name__.source.startsWith("totalUpdatedColumns",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_totalUpdatedColumns1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_totalUpdatedColumns1 = true;
					} else {
						v_totalUpdatedColumns1 = false;
					}
					if(v_totalUpdatedColumns1) {
						v_totalUpdatedColumns = null;
					} else {
						var this3 = this.parseNumber();
						v_totalUpdatedColumns = Std.parseInt(this3.source.substring(this3.min,this3.max));
					}
				} else if("totalUpdatedCells".length == __name__.max - __name__.min && __name__.source.startsWith("totalUpdatedCells",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_totalUpdatedCells1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_totalUpdatedCells1 = true;
					} else {
						v_totalUpdatedCells1 = false;
					}
					if(v_totalUpdatedCells1) {
						v_totalUpdatedCells = null;
					} else {
						var this4 = this.parseNumber();
						v_totalUpdatedCells = Std.parseInt(this4.source.substring(this4.min,this4.max));
					}
				} else if("spreadsheetId".length == __name__.max - __name__.min && __name__.source.startsWith("spreadsheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_spreadsheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_spreadsheetId1 = true;
					} else {
						v_spreadsheetId1 = false;
					}
					if(v_spreadsheetId1) {
						v_spreadsheetId = null;
					} else {
						v_spreadsheetId = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("responses".length == __name__.max - __name__.min && __name__.source.startsWith("responses",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_responses1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_responses1 = true;
					} else {
						v_responses1 = false;
					}
					if(v_responses1) {
						v_responses = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_responses2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_responses2 = true;
						} else {
							v_responses2 = false;
						}
						if(!v_responses2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_responses3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_responses3 = true;
						} else {
							v_responses3 = false;
						}
						if(!v_responses3) {
							while(true) {
								__ret.push(this.parse1());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_responses4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_responses4 = true;
								} else {
									v_responses4 = false;
								}
								if(!v_responses4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_responses5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_responses5 = true;
							} else {
								v_responses5 = false;
							}
							if(!v_responses5) {
								this.die("Expected ]");
							}
						}
						v_responses = __ret;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { responses : v_responses, spreadsheetId : v_spreadsheetId, totalUpdatedCells : v_totalUpdatedCells, totalUpdatedColumns : v_totalUpdatedColumns, totalUpdatedRows : v_totalUpdatedRows, totalUpdatedSheets : v_totalUpdatedSheets};
	}
	,parse1: function() {
		var _gthis = this;
		var v_spreadsheetId = null;
		var v_updatedCells = null;
		var v_updatedColumns = null;
		var v_updatedData = null;
		var v_updatedRange = null;
		var v_updatedRows = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("updatedRows".length == __name__.max - __name__.min && __name__.source.startsWith("updatedRows",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updatedRows1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updatedRows1 = true;
					} else {
						v_updatedRows1 = false;
					}
					if(v_updatedRows1) {
						v_updatedRows = null;
					} else {
						var this1 = this.parseNumber();
						v_updatedRows = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("updatedRange".length == __name__.max - __name__.min && __name__.source.startsWith("updatedRange",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updatedRange1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updatedRange1 = true;
					} else {
						v_updatedRange1 = false;
					}
					if(v_updatedRange1) {
						v_updatedRange = null;
					} else {
						v_updatedRange = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("updatedData".length == __name__.max - __name__.min && __name__.source.startsWith("updatedData",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updatedData1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updatedData1 = true;
					} else {
						v_updatedData1 = false;
					}
					if(v_updatedData1) {
						v_updatedData = null;
					} else {
						v_updatedData = this.parse2();
					}
				} else if("updatedColumns".length == __name__.max - __name__.min && __name__.source.startsWith("updatedColumns",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updatedColumns1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updatedColumns1 = true;
					} else {
						v_updatedColumns1 = false;
					}
					if(v_updatedColumns1) {
						v_updatedColumns = null;
					} else {
						var this2 = this.parseNumber();
						v_updatedColumns = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("updatedCells".length == __name__.max - __name__.min && __name__.source.startsWith("updatedCells",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updatedCells1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updatedCells1 = true;
					} else {
						v_updatedCells1 = false;
					}
					if(v_updatedCells1) {
						v_updatedCells = null;
					} else {
						var this3 = this.parseNumber();
						v_updatedCells = Std.parseInt(this3.source.substring(this3.min,this3.max));
					}
				} else if("spreadsheetId".length == __name__.max - __name__.min && __name__.source.startsWith("spreadsheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_spreadsheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_spreadsheetId1 = true;
					} else {
						v_spreadsheetId1 = false;
					}
					if(v_spreadsheetId1) {
						v_spreadsheetId = null;
					} else {
						v_spreadsheetId = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { spreadsheetId : v_spreadsheetId, updatedCells : v_updatedCells, updatedColumns : v_updatedColumns, updatedData : v_updatedData, updatedRange : v_updatedRange, updatedRows : v_updatedRows};
	}
	,parse2: function() {
		var _gthis = this;
		var v_majorDimension = null;
		var v_range = null;
		var v_values = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("values".length == __name__.max - __name__.min && __name__.source.startsWith("values",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_values1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_values1 = true;
					} else {
						v_values1 = false;
					}
					if(v_values1) {
						v_values = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values2 = true;
						} else {
							v_values2 = false;
						}
						if(!v_values2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values3 = true;
						} else {
							v_values3 = false;
						}
						if(!v_values3) {
							while(true) {
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values4 = true;
								} else {
									v_values4 = false;
								}
								if(!v_values4) {
									this.die("Expected [");
								}
								var __ret1 = [];
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values5;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values5 = true;
								} else {
									v_values5 = false;
								}
								if(!v_values5) {
									while(true) {
										__ret1.push(this.parseValue());
										while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
										var v_values6;
										if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
											this.pos += 1;
											while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
											v_values6 = true;
										} else {
											v_values6 = false;
										}
										if(!v_values6) {
											break;
										}
									}
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									var v_values7;
									if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
										this.pos += 1;
										while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
										v_values7 = true;
									} else {
										v_values7 = false;
									}
									if(!v_values7) {
										this.die("Expected ]");
									}
								}
								__ret.push(__ret1);
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values8;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values8 = true;
								} else {
									v_values8 = false;
								}
								if(!v_values8) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_values9;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_values9 = true;
							} else {
								v_values9 = false;
							}
							if(!v_values9) {
								this.die("Expected ]");
							}
						}
						v_values = __ret;
					}
				} else if("range".length == __name__.max - __name__.min && __name__.source.startsWith("range",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_range1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_range1 = true;
					} else {
						v_range1 = false;
					}
					if(v_range1) {
						v_range = null;
					} else {
						v_range = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("majorDimension".length == __name__.max - __name__.min && __name__.source.startsWith("majorDimension",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_majorDimension1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_majorDimension1 = true;
					} else {
						v_majorDimension1 = false;
					}
					if(v_majorDimension1) {
						v_majorDimension = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "COLUMNS":case "DIMENSION_UNSPECIFIED":case "ROWS":
							v_majorDimension = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser5", methodName : "parse2"}));
						}
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { majorDimension : v_majorDimension, range : v_range, values : v_values};
	}
	,parse: function(source) {
		this.init(source);
		return this.parse0();
	}
	,tryParse: function(source) {
		var _gthis = this;
		return tink_core_TypedError.catchExceptions(function() {
			return _gthis.parse(source);
		},null,{ fileName : "Macro.hx", lineNumber : 67, className : "tink.json.Parser5", methodName : "tryParse"});
	}
	,__class__: tink_json_Parser5
});
var tink_json_Parser6 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser6.__name__ = true;
tink_json_Parser6.__super__ = tink_json_BasicParser;
tink_json_Parser6.prototype = $extend(tink_json_BasicParser.prototype,{
	parse0: function() {
		var _gthis = this;
		var v_spreadsheetId = null;
		var v_valueRanges = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("valueRanges".length == __name__.max - __name__.min && __name__.source.startsWith("valueRanges",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_valueRanges1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_valueRanges1 = true;
					} else {
						v_valueRanges1 = false;
					}
					if(v_valueRanges1) {
						v_valueRanges = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_valueRanges2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_valueRanges2 = true;
						} else {
							v_valueRanges2 = false;
						}
						if(!v_valueRanges2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_valueRanges3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_valueRanges3 = true;
						} else {
							v_valueRanges3 = false;
						}
						if(!v_valueRanges3) {
							while(true) {
								__ret.push(this.parse1());
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_valueRanges4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_valueRanges4 = true;
								} else {
									v_valueRanges4 = false;
								}
								if(!v_valueRanges4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_valueRanges5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_valueRanges5 = true;
							} else {
								v_valueRanges5 = false;
							}
							if(!v_valueRanges5) {
								this.die("Expected ]");
							}
						}
						v_valueRanges = __ret;
					}
				} else if("spreadsheetId".length == __name__.max - __name__.min && __name__.source.startsWith("spreadsheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_spreadsheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_spreadsheetId1 = true;
					} else {
						v_spreadsheetId1 = false;
					}
					if(v_spreadsheetId1) {
						v_spreadsheetId = null;
					} else {
						v_spreadsheetId = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { spreadsheetId : v_spreadsheetId, valueRanges : v_valueRanges};
	}
	,parse1: function() {
		var _gthis = this;
		var v_majorDimension = null;
		var v_range = null;
		var v_values = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("values".length == __name__.max - __name__.min && __name__.source.startsWith("values",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_values1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_values1 = true;
					} else {
						v_values1 = false;
					}
					if(v_values1) {
						v_values = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values2 = true;
						} else {
							v_values2 = false;
						}
						if(!v_values2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values3 = true;
						} else {
							v_values3 = false;
						}
						if(!v_values3) {
							while(true) {
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values4 = true;
								} else {
									v_values4 = false;
								}
								if(!v_values4) {
									this.die("Expected [");
								}
								var __ret1 = [];
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values5;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values5 = true;
								} else {
									v_values5 = false;
								}
								if(!v_values5) {
									while(true) {
										__ret1.push(this.parseValue());
										while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
										var v_values6;
										if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
											this.pos += 1;
											while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
											v_values6 = true;
										} else {
											v_values6 = false;
										}
										if(!v_values6) {
											break;
										}
									}
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									var v_values7;
									if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
										this.pos += 1;
										while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
										v_values7 = true;
									} else {
										v_values7 = false;
									}
									if(!v_values7) {
										this.die("Expected ]");
									}
								}
								__ret.push(__ret1);
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values8;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values8 = true;
								} else {
									v_values8 = false;
								}
								if(!v_values8) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_values9;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_values9 = true;
							} else {
								v_values9 = false;
							}
							if(!v_values9) {
								this.die("Expected ]");
							}
						}
						v_values = __ret;
					}
				} else if("range".length == __name__.max - __name__.min && __name__.source.startsWith("range",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_range1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_range1 = true;
					} else {
						v_range1 = false;
					}
					if(v_range1) {
						v_range = null;
					} else {
						v_range = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("majorDimension".length == __name__.max - __name__.min && __name__.source.startsWith("majorDimension",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_majorDimension1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_majorDimension1 = true;
					} else {
						v_majorDimension1 = false;
					}
					if(v_majorDimension1) {
						v_majorDimension = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "COLUMNS":case "DIMENSION_UNSPECIFIED":case "ROWS":
							v_majorDimension = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser6", methodName : "parse1"}));
						}
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { majorDimension : v_majorDimension, range : v_range, values : v_values};
	}
	,parse: function(source) {
		this.init(source);
		return this.parse0();
	}
	,tryParse: function(source) {
		var _gthis = this;
		return tink_core_TypedError.catchExceptions(function() {
			return _gthis.parse(source);
		},null,{ fileName : "Macro.hx", lineNumber : 67, className : "tink.json.Parser6", methodName : "tryParse"});
	}
	,__class__: tink_json_Parser6
});
var tink_json_Parser7 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser7.__name__ = true;
tink_json_Parser7.__super__ = tink_json_BasicParser;
tink_json_Parser7.prototype = $extend(tink_json_BasicParser.prototype,{
	parse0: function() {
		var _gthis = this;
		var v_clearedRange = null;
		var v_spreadsheetId = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("spreadsheetId".length == __name__.max - __name__.min && __name__.source.startsWith("spreadsheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_spreadsheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_spreadsheetId1 = true;
					} else {
						v_spreadsheetId1 = false;
					}
					if(v_spreadsheetId1) {
						v_spreadsheetId = null;
					} else {
						v_spreadsheetId = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("clearedRange".length == __name__.max - __name__.min && __name__.source.startsWith("clearedRange",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_clearedRange1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_clearedRange1 = true;
					} else {
						v_clearedRange1 = false;
					}
					if(v_clearedRange1) {
						v_clearedRange = null;
					} else {
						v_clearedRange = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { clearedRange : v_clearedRange, spreadsheetId : v_spreadsheetId};
	}
	,parse: function(source) {
		this.init(source);
		return this.parse0();
	}
	,tryParse: function(source) {
		var _gthis = this;
		return tink_core_TypedError.catchExceptions(function() {
			return _gthis.parse(source);
		},null,{ fileName : "Macro.hx", lineNumber : 67, className : "tink.json.Parser7", methodName : "tryParse"});
	}
	,__class__: tink_json_Parser7
});
var tink_json_Parser8 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser8.__name__ = true;
tink_json_Parser8.__super__ = tink_json_BasicParser;
tink_json_Parser8.prototype = $extend(tink_json_BasicParser.prototype,{
	parse0: function() {
		var _gthis = this;
		var v_spreadsheetId = null;
		var v_tableRange = null;
		var v_updates = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("updates".length == __name__.max - __name__.min && __name__.source.startsWith("updates",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updates1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updates1 = true;
					} else {
						v_updates1 = false;
					}
					if(v_updates1) {
						v_updates = null;
					} else {
						v_updates = this.parse1();
					}
				} else if("tableRange".length == __name__.max - __name__.min && __name__.source.startsWith("tableRange",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_tableRange1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_tableRange1 = true;
					} else {
						v_tableRange1 = false;
					}
					if(v_tableRange1) {
						v_tableRange = null;
					} else {
						v_tableRange = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("spreadsheetId".length == __name__.max - __name__.min && __name__.source.startsWith("spreadsheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_spreadsheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_spreadsheetId1 = true;
					} else {
						v_spreadsheetId1 = false;
					}
					if(v_spreadsheetId1) {
						v_spreadsheetId = null;
					} else {
						v_spreadsheetId = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { spreadsheetId : v_spreadsheetId, tableRange : v_tableRange, updates : v_updates};
	}
	,parse1: function() {
		var _gthis = this;
		var v_spreadsheetId = null;
		var v_updatedCells = null;
		var v_updatedColumns = null;
		var v_updatedData = null;
		var v_updatedRange = null;
		var v_updatedRows = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("updatedRows".length == __name__.max - __name__.min && __name__.source.startsWith("updatedRows",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updatedRows1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updatedRows1 = true;
					} else {
						v_updatedRows1 = false;
					}
					if(v_updatedRows1) {
						v_updatedRows = null;
					} else {
						var this1 = this.parseNumber();
						v_updatedRows = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("updatedRange".length == __name__.max - __name__.min && __name__.source.startsWith("updatedRange",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updatedRange1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updatedRange1 = true;
					} else {
						v_updatedRange1 = false;
					}
					if(v_updatedRange1) {
						v_updatedRange = null;
					} else {
						v_updatedRange = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("updatedData".length == __name__.max - __name__.min && __name__.source.startsWith("updatedData",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updatedData1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updatedData1 = true;
					} else {
						v_updatedData1 = false;
					}
					if(v_updatedData1) {
						v_updatedData = null;
					} else {
						v_updatedData = this.parse2();
					}
				} else if("updatedColumns".length == __name__.max - __name__.min && __name__.source.startsWith("updatedColumns",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updatedColumns1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updatedColumns1 = true;
					} else {
						v_updatedColumns1 = false;
					}
					if(v_updatedColumns1) {
						v_updatedColumns = null;
					} else {
						var this2 = this.parseNumber();
						v_updatedColumns = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("updatedCells".length == __name__.max - __name__.min && __name__.source.startsWith("updatedCells",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_updatedCells1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_updatedCells1 = true;
					} else {
						v_updatedCells1 = false;
					}
					if(v_updatedCells1) {
						v_updatedCells = null;
					} else {
						var this3 = this.parseNumber();
						v_updatedCells = Std.parseInt(this3.source.substring(this3.min,this3.max));
					}
				} else if("spreadsheetId".length == __name__.max - __name__.min && __name__.source.startsWith("spreadsheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_spreadsheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_spreadsheetId1 = true;
					} else {
						v_spreadsheetId1 = false;
					}
					if(v_spreadsheetId1) {
						v_spreadsheetId = null;
					} else {
						v_spreadsheetId = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { spreadsheetId : v_spreadsheetId, updatedCells : v_updatedCells, updatedColumns : v_updatedColumns, updatedData : v_updatedData, updatedRange : v_updatedRange, updatedRows : v_updatedRows};
	}
	,parse2: function() {
		var _gthis = this;
		var v_majorDimension = null;
		var v_range = null;
		var v_values = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("values".length == __name__.max - __name__.min && __name__.source.startsWith("values",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_values1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_values1 = true;
					} else {
						v_values1 = false;
					}
					if(v_values1) {
						v_values = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values2 = true;
						} else {
							v_values2 = false;
						}
						if(!v_values2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_values3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_values3 = true;
						} else {
							v_values3 = false;
						}
						if(!v_values3) {
							while(true) {
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values4 = true;
								} else {
									v_values4 = false;
								}
								if(!v_values4) {
									this.die("Expected [");
								}
								var __ret1 = [];
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values5;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values5 = true;
								} else {
									v_values5 = false;
								}
								if(!v_values5) {
									while(true) {
										__ret1.push(this.parseValue());
										while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
										var v_values6;
										if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
											this.pos += 1;
											while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
											v_values6 = true;
										} else {
											v_values6 = false;
										}
										if(!v_values6) {
											break;
										}
									}
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									var v_values7;
									if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
										this.pos += 1;
										while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
										v_values7 = true;
									} else {
										v_values7 = false;
									}
									if(!v_values7) {
										this.die("Expected ]");
									}
								}
								__ret.push(__ret1);
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_values8;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_values8 = true;
								} else {
									v_values8 = false;
								}
								if(!v_values8) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_values9;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_values9 = true;
							} else {
								v_values9 = false;
							}
							if(!v_values9) {
								this.die("Expected ]");
							}
						}
						v_values = __ret;
					}
				} else if("range".length == __name__.max - __name__.min && __name__.source.startsWith("range",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_range1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_range1 = true;
					} else {
						v_range1 = false;
					}
					if(v_range1) {
						v_range = null;
					} else {
						v_range = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("majorDimension".length == __name__.max - __name__.min && __name__.source.startsWith("majorDimension",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_majorDimension1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_majorDimension1 = true;
					} else {
						v_majorDimension1 = false;
					}
					if(v_majorDimension1) {
						v_majorDimension = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "COLUMNS":case "DIMENSION_UNSPECIFIED":case "ROWS":
							v_majorDimension = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser8", methodName : "parse2"}));
						}
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { majorDimension : v_majorDimension, range : v_range, values : v_values};
	}
	,parse: function(source) {
		this.init(source);
		return this.parse0();
	}
	,tryParse: function(source) {
		var _gthis = this;
		return tink_core_TypedError.catchExceptions(function() {
			return _gthis.parse(source);
		},null,{ fileName : "Macro.hx", lineNumber : 67, className : "tink.json.Parser8", methodName : "tryParse"});
	}
	,__class__: tink_json_Parser8
});
var tink_json_Parser9 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser9.__name__ = true;
tink_json_Parser9.__super__ = tink_json_BasicParser;
tink_json_Parser9.prototype = $extend(tink_json_BasicParser.prototype,{
	parse0: function() {
		var _gthis = this;
		var v_gridProperties = null;
		var v_hidden = null;
		var v_index = null;
		var v_rightToLeft = null;
		var v_sheetId = null;
		var v_sheetType = null;
		var v_tabColor = null;
		var v_title = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("title".length == __name__.max - __name__.min && __name__.source.startsWith("title",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_title1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_title1 = true;
					} else {
						v_title1 = false;
					}
					if(v_title1) {
						v_title = null;
					} else {
						v_title = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("tabColor".length == __name__.max - __name__.min && __name__.source.startsWith("tabColor",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_tabColor1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_tabColor1 = true;
					} else {
						v_tabColor1 = false;
					}
					if(v_tabColor1) {
						v_tabColor = null;
					} else {
						v_tabColor = this.parse2();
					}
				} else if("sheetType".length == __name__.max - __name__.min && __name__.source.startsWith("sheetType",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sheetType1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sheetType1 = true;
					} else {
						v_sheetType1 = false;
					}
					if(v_sheetType1) {
						v_sheetType = null;
					} else {
						var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
						switch(v) {
						case "GRID":case "OBJECT":case "SHEET_TYPE_UNSPECIFIED":
							v_sheetType = v;
							break;
						default:
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v,{ fileName : "GenReader.hx", lineNumber : 315, className : "tink.json.Parser9", methodName : "parse0"}));
						}
					}
				} else if("sheetId".length == __name__.max - __name__.min && __name__.source.startsWith("sheetId",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_sheetId1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_sheetId1 = true;
					} else {
						v_sheetId1 = false;
					}
					if(v_sheetId1) {
						v_sheetId = null;
					} else {
						var this1 = this.parseNumber();
						v_sheetId = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("rightToLeft".length == __name__.max - __name__.min && __name__.source.startsWith("rightToLeft",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rightToLeft1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rightToLeft1 = true;
					} else {
						v_rightToLeft1 = false;
					}
					if(v_rightToLeft1) {
						v_rightToLeft = null;
					} else {
						v_rightToLeft = this.parseBool();
					}
				} else if("index".length == __name__.max - __name__.min && __name__.source.startsWith("index",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_index1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_index1 = true;
					} else {
						v_index1 = false;
					}
					if(v_index1) {
						v_index = null;
					} else {
						var this2 = this.parseNumber();
						v_index = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("hidden".length == __name__.max - __name__.min && __name__.source.startsWith("hidden",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hidden1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hidden1 = true;
					} else {
						v_hidden1 = false;
					}
					if(v_hidden1) {
						v_hidden = null;
					} else {
						v_hidden = this.parseBool();
					}
				} else if("gridProperties".length == __name__.max - __name__.min && __name__.source.startsWith("gridProperties",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_gridProperties1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_gridProperties1 = true;
					} else {
						v_gridProperties1 = false;
					}
					if(v_gridProperties1) {
						v_gridProperties = null;
					} else {
						v_gridProperties = this.parse1();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { gridProperties : v_gridProperties, hidden : v_hidden, index : v_index, rightToLeft : v_rightToLeft, sheetId : v_sheetId, sheetType : v_sheetType, tabColor : v_tabColor, title : v_title};
	}
	,parse1: function() {
		var _gthis = this;
		var v_columnCount = null;
		var v_frozenColumnCount = null;
		var v_frozenRowCount = null;
		var v_hideGridlines = null;
		var v_rowCount = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("rowCount".length == __name__.max - __name__.min && __name__.source.startsWith("rowCount",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_rowCount1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_rowCount1 = true;
					} else {
						v_rowCount1 = false;
					}
					if(v_rowCount1) {
						v_rowCount = null;
					} else {
						var this1 = this.parseNumber();
						v_rowCount = Std.parseInt(this1.source.substring(this1.min,this1.max));
					}
				} else if("hideGridlines".length == __name__.max - __name__.min && __name__.source.startsWith("hideGridlines",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_hideGridlines1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_hideGridlines1 = true;
					} else {
						v_hideGridlines1 = false;
					}
					if(v_hideGridlines1) {
						v_hideGridlines = null;
					} else {
						v_hideGridlines = this.parseBool();
					}
				} else if("frozenRowCount".length == __name__.max - __name__.min && __name__.source.startsWith("frozenRowCount",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_frozenRowCount1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_frozenRowCount1 = true;
					} else {
						v_frozenRowCount1 = false;
					}
					if(v_frozenRowCount1) {
						v_frozenRowCount = null;
					} else {
						var this2 = this.parseNumber();
						v_frozenRowCount = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("frozenColumnCount".length == __name__.max - __name__.min && __name__.source.startsWith("frozenColumnCount",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_frozenColumnCount1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_frozenColumnCount1 = true;
					} else {
						v_frozenColumnCount1 = false;
					}
					if(v_frozenColumnCount1) {
						v_frozenColumnCount = null;
					} else {
						var this3 = this.parseNumber();
						v_frozenColumnCount = Std.parseInt(this3.source.substring(this3.min,this3.max));
					}
				} else if("columnCount".length == __name__.max - __name__.min && __name__.source.startsWith("columnCount",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_columnCount1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_columnCount1 = true;
					} else {
						v_columnCount1 = false;
					}
					if(v_columnCount1) {
						v_columnCount = null;
					} else {
						var this4 = this.parseNumber();
						v_columnCount = Std.parseInt(this4.source.substring(this4.min,this4.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { columnCount : v_columnCount, frozenColumnCount : v_frozenColumnCount, frozenRowCount : v_frozenRowCount, hideGridlines : v_hideGridlines, rowCount : v_rowCount};
	}
	,parse2: function() {
		var _gthis = this;
		var v_alpha = null;
		var v_blue = null;
		var v_green = null;
		var v_red = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("red".length == __name__.max - __name__.min && __name__.source.startsWith("red",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_red1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_red1 = true;
					} else {
						v_red1 = false;
					}
					if(v_red1) {
						v_red = null;
					} else {
						var this1 = this.parseNumber();
						v_red = parseFloat(this1.source.substring(this1.min,this1.max));
					}
				} else if("green".length == __name__.max - __name__.min && __name__.source.startsWith("green",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_green1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_green1 = true;
					} else {
						v_green1 = false;
					}
					if(v_green1) {
						v_green = null;
					} else {
						var this2 = this.parseNumber();
						v_green = parseFloat(this2.source.substring(this2.min,this2.max));
					}
				} else if("blue".length == __name__.max - __name__.min && __name__.source.startsWith("blue",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_blue1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_blue1 = true;
					} else {
						v_blue1 = false;
					}
					if(v_blue1) {
						v_blue = null;
					} else {
						var this3 = this.parseNumber();
						v_blue = parseFloat(this3.source.substring(this3.min,this3.max));
					}
				} else if("alpha".length == __name__.max - __name__.min && __name__.source.startsWith("alpha",__name__.min)) {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_alpha1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_alpha1 = true;
					} else {
						v_alpha1 = false;
					}
					if(v_alpha1) {
						v_alpha = null;
					} else {
						var this4 = this.parseNumber();
						v_alpha = parseFloat(this4.source.substring(this4.min,this4.max));
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { alpha : v_alpha, blue : v_blue, green : v_green, red : v_red};
	}
	,parse: function(source) {
		this.init(source);
		return this.parse0();
	}
	,tryParse: function(source) {
		var _gthis = this;
		return tink_core_TypedError.catchExceptions(function() {
			return _gthis.parse(source);
		},null,{ fileName : "Macro.hx", lineNumber : 67, className : "tink.json.Parser9", methodName : "tryParse"});
	}
	,__class__: tink_json_Parser9
});
var tink_json_Value = { __ename__ : true, __constructs__ : ["VNumber","VString","VNull","VBool","VArray","VObject"] };
tink_json_Value.VNumber = function(f) { var $x = ["VNumber",0,f]; $x.__enum__ = tink_json_Value; $x.toString = $estr; return $x; };
tink_json_Value.VString = function(s) { var $x = ["VString",1,s]; $x.__enum__ = tink_json_Value; $x.toString = $estr; return $x; };
tink_json_Value.VNull = ["VNull",2];
tink_json_Value.VNull.toString = $estr;
tink_json_Value.VNull.__enum__ = tink_json_Value;
tink_json_Value.VBool = function(b) { var $x = ["VBool",3,b]; $x.__enum__ = tink_json_Value; $x.toString = $estr; return $x; };
tink_json_Value.VArray = function(a) { var $x = ["VArray",4,a]; $x.__enum__ = tink_json_Value; $x.toString = $estr; return $x; };
tink_json_Value.VObject = function(a) { var $x = ["VObject",5,a]; $x.__enum__ = tink_json_Value; $x.toString = $estr; return $x; };
var tink_json_Writer = function() { };
tink_json_Writer.__name__ = true;
var tink_json_BasicWriter = function() {
	this.plugins = new tink_core_Annex(this);
};
tink_json_BasicWriter.__name__ = true;
tink_json_BasicWriter.prototype = {
	init: function() {
		var this1 = "";
		this.buf = this1;
	}
	,output: function(s) {
		this.buf += s;
	}
	,'char': function(c) {
		this.buf += String.fromCharCode(c);
	}
	,writeInt: function(v) {
		this.buf += v == null ? "null" : "" + v;
	}
	,writeFloat: function(v) {
		this.buf += v == null ? "null" : "" + v;
	}
	,writeBool: function(b) {
		this.buf += b ? "true" : "false";
	}
	,writeString: function(s) {
		var s1 = JSON.stringify(s);
		this.buf += s1;
	}
	,writeDynamic: function(value) {
		var s = JSON.stringify(value);
		this.buf += s;
	}
	,writeValue: function(value) {
		var _gthis = this;
		switch(value[1]) {
		case 0:
			var f = value[2];
			this.buf += f == null ? "null" : "" + f;
			break;
		case 1:
			var s = value[2];
			var s1 = JSON.stringify(s);
			this.buf += s1;
			break;
		case 2:
			this.buf += "null";
			break;
		case 3:
			var b = value[2];
			this.buf += b ? "true" : "false";
			break;
		case 4:
			if(value[2].length == 0) {
				this.buf += "[]";
			} else {
				var a = value[2];
				this.buf += "[";
				this.writeValue(a[0]);
				var _g1 = 1;
				var _g = a.length;
				while(_g1 < _g) {
					var i = _g1++;
					this.buf += ",";
					this.writeValue(a[i]);
				}
				this.buf += "]";
			}
			break;
		case 5:
			if(value[2].length == 0) {
				this.buf += "{}";
			} else {
				var a1 = value[2];
				this.buf += "{";
				var p = a1[0];
				var s2 = JSON.stringify(p.name);
				_gthis.buf += s2;
				_gthis.buf += ":";
				_gthis.writeValue(p.value);
				var _g11 = 1;
				var _g2 = a1.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					this.buf += ",";
					var p1 = a1[i1];
					var s3 = JSON.stringify(p1.name);
					_gthis.buf += s3;
					_gthis.buf += ":";
					_gthis.writeValue(p1.value);
				}
				this.buf += "}";
			}
			break;
		}
	}
	,__class__: tink_json_BasicWriter
};
var tink_json__$Writer_StringBuf_$Impl_$ = {};
tink_json__$Writer_StringBuf_$Impl_$.__name__ = true;
tink_json__$Writer_StringBuf_$Impl_$._new = function() {
	var this1 = "";
	return this1;
};
tink_json__$Writer_StringBuf_$Impl_$.addChar = function(this1,c) {
	this1 += String.fromCharCode(c);
};
tink_json__$Writer_StringBuf_$Impl_$.add = function(this1,s) {
	this1 += s;
};
var tink_json_Writer0 = function() {
	tink_json_BasicWriter.call(this);
};
tink_json_Writer0.__name__ = true;
tink_json_Writer0.__super__ = tink_json_BasicWriter;
tink_json_Writer0.prototype = $extend(tink_json_BasicWriter.prototype,{
	parse0: function(value) {
		this.buf += "{\"namedRanges\":";
		var value1 = value.namedRanges;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value1.length) {
				var value2 = value1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse1(value2);
			}
			this.buf += "]";
		}
		this.buf += ",\"properties\":";
		var value3 = value.properties;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse3(value3);
		}
		this.buf += ",\"sheets\":";
		var value4 = value.sheets;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first1 = true;
			var _g1 = 0;
			while(_g1 < value4.length) {
				var value5 = value4[_g1];
				++_g1;
				if(first1) {
					first1 = false;
				} else {
					this.buf += ",";
				}
				this.parse13(value5);
			}
			this.buf += "]";
		}
		this.buf += ",\"spreadsheetId\":";
		var value6 = value.spreadsheetId;
		if(value6 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value6);
			this.buf += s;
		}
		this.buf += ",\"spreadsheetUrl\":";
		var value7 = value.spreadsheetUrl;
		if(value7 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value7);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse1: function(value) {
		this.buf += "{\"name\":";
		var value1 = value.name;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"namedRangeId\":";
		var value2 = value.namedRangeId;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value2);
			this.buf += s1;
		}
		this.buf += ",\"range\":";
		var value3 = value.range;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse2(value3);
		}
		this.buf += "}";
	}
	,parse2: function(value) {
		this.buf += "{\"endColumnIndex\":";
		var value1 = value.endColumnIndex;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"endRowIndex\":";
		var value2 = value.endRowIndex;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += ",\"sheetId\":";
		var value3 = value.sheetId;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"startColumnIndex\":";
		var value4 = value.startColumnIndex;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += ",\"startRowIndex\":";
		var value5 = value.startRowIndex;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += value5 == null ? "null" : "" + value5;
		}
		this.buf += "}";
	}
	,parse3: function(value) {
		this.buf += "{\"autoRecalc\":";
		var value1 = value.autoRecalc;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var value2 = value1;
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"defaultFormat\":";
		var value3 = value.defaultFormat;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse4(value3);
		}
		this.buf += ",\"iterativeCalculationSettings\":";
		var value4 = value.iterativeCalculationSettings;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.parse12(value4);
		}
		this.buf += ",\"locale\":";
		var value5 = value.locale;
		if(value5 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value5);
			this.buf += s1;
		}
		this.buf += ",\"timeZone\":";
		var value6 = value.timeZone;
		if(value6 == null) {
			this.buf += "null";
		} else {
			var s2 = JSON.stringify(value6);
			this.buf += s2;
		}
		this.buf += ",\"title\":";
		var value7 = value.title;
		if(value7 == null) {
			this.buf += "null";
		} else {
			var s3 = JSON.stringify(value7);
			this.buf += s3;
		}
		this.buf += "}";
	}
	,parse4: function(value) {
		this.buf += "{\"backgroundColor\":";
		var value1 = value.backgroundColor;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse5(value1);
		}
		this.buf += ",\"borders\":";
		var value2 = value.borders;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse6(value2);
		}
		this.buf += ",\"horizontalAlignment\":";
		var value3 = value.horizontalAlignment;
		if(value3 == null) {
			this.buf += "null";
		} else {
			var value4 = value3;
			var s = JSON.stringify(value4);
			this.buf += s;
		}
		this.buf += ",\"hyperlinkDisplayType\":";
		var value5 = value.hyperlinkDisplayType;
		if(value5 == null) {
			this.buf += "null";
		} else {
			var value6 = value5;
			var s1 = JSON.stringify(value6);
			this.buf += s1;
		}
		this.buf += ",\"numberFormat\":";
		var value7 = value.numberFormat;
		if(value7 == null) {
			this.buf += "null";
		} else {
			this.parse8(value7);
		}
		this.buf += ",\"padding\":";
		var value8 = value.padding;
		if(value8 == null) {
			this.buf += "null";
		} else {
			this.parse9(value8);
		}
		this.buf += ",\"textDirection\":";
		var value9 = value.textDirection;
		if(value9 == null) {
			this.buf += "null";
		} else {
			var value10 = value9;
			var s2 = JSON.stringify(value10);
			this.buf += s2;
		}
		this.buf += ",\"textFormat\":";
		var value11 = value.textFormat;
		if(value11 == null) {
			this.buf += "null";
		} else {
			this.parse10(value11);
		}
		this.buf += ",\"textRotation\":";
		var value12 = value.textRotation;
		if(value12 == null) {
			this.buf += "null";
		} else {
			this.parse11(value12);
		}
		this.buf += ",\"verticalAlignment\":";
		var value13 = value.verticalAlignment;
		if(value13 == null) {
			this.buf += "null";
		} else {
			var value14 = value13;
			var s3 = JSON.stringify(value14);
			this.buf += s3;
		}
		this.buf += ",\"wrapStrategy\":";
		var value15 = value.wrapStrategy;
		if(value15 == null) {
			this.buf += "null";
		} else {
			var value16 = value15;
			var s4 = JSON.stringify(value16);
			this.buf += s4;
		}
		this.buf += "}";
	}
	,parse5: function(value) {
		this.buf += "{\"alpha\":";
		var value1 = value.alpha;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"blue\":";
		var value2 = value.blue;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += ",\"green\":";
		var value3 = value.green;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"red\":";
		var value4 = value.red;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += "}";
	}
	,parse6: function(value) {
		this.buf += "{\"bottom\":";
		var value1 = value.bottom;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse7(value1);
		}
		this.buf += ",\"left\":";
		var value2 = value.left;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse7(value2);
		}
		this.buf += ",\"right\":";
		var value3 = value.right;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse7(value3);
		}
		this.buf += ",\"top\":";
		var value4 = value.top;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.parse7(value4);
		}
		this.buf += "}";
	}
	,parse7: function(value) {
		this.buf += "{\"color\":";
		var value1 = value.color;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse5(value1);
		}
		this.buf += ",\"style\":";
		var value2 = value.style;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"width\":";
		var value4 = value.width;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += "}";
	}
	,parse8: function(value) {
		this.buf += "{\"pattern\":";
		var value1 = value.pattern;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"type\":";
		var value2 = value.type;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s1 = JSON.stringify(value3);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse9: function(value) {
		this.buf += "{\"bottom\":";
		var value1 = value.bottom;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"left\":";
		var value2 = value.left;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += ",\"right\":";
		var value3 = value.right;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"top\":";
		var value4 = value.top;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += "}";
	}
	,parse10: function(value) {
		this.buf += "{\"bold\":";
		var value1 = value.bold;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 ? "true" : "false";
		}
		this.buf += ",\"fontFamily\":";
		var value2 = value.fontFamily;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"fontSize\":";
		var value3 = value.fontSize;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"foregroundColor\":";
		var value4 = value.foregroundColor;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.parse5(value4);
		}
		this.buf += ",\"italic\":";
		var value5 = value.italic;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += value5 ? "true" : "false";
		}
		this.buf += ",\"strikethrough\":";
		var value6 = value.strikethrough;
		if(value6 == null) {
			this.buf += "null";
		} else {
			this.buf += value6 ? "true" : "false";
		}
		this.buf += ",\"underline\":";
		var value7 = value.underline;
		if(value7 == null) {
			this.buf += "null";
		} else {
			this.buf += value7 ? "true" : "false";
		}
		this.buf += "}";
	}
	,parse11: function(value) {
		this.buf += "{\"angle\":";
		var value1 = value.angle;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"vertical\":";
		var value2 = value.vertical;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 ? "true" : "false";
		}
		this.buf += "}";
	}
	,parse12: function(value) {
		this.buf += "{\"convergenceThreshold\":";
		var value1 = value.convergenceThreshold;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"maxIterations\":";
		var value2 = value.maxIterations;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += "}";
	}
	,parse13: function(value) {
		this.buf += "{\"bandedRanges\":";
		var value1 = value.bandedRanges;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value1.length) {
				var value2 = value1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse14(value2);
			}
			this.buf += "]";
		}
		this.buf += ",\"basicFilter\":";
		var value3 = value.basicFilter;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse16(value3);
		}
		this.buf += ",\"charts\":";
		var value4 = value.charts;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first1 = true;
			var _g1 = 0;
			while(_g1 < value4.length) {
				var value5 = value4[_g1];
				++_g1;
				if(first1) {
					first1 = false;
				} else {
					this.buf += ",";
				}
				this.parse21(value5);
			}
			this.buf += "]";
		}
		this.buf += ",\"conditionalFormats\":";
		var value6 = value.conditionalFormats;
		if(value6 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first2 = true;
			var _g2 = 0;
			while(_g2 < value6.length) {
				var value7 = value6[_g2];
				++_g2;
				if(first2) {
					first2 = false;
				} else {
					this.buf += ",";
				}
				this.parse33(value7);
			}
			this.buf += "]";
		}
		this.buf += ",\"data\":";
		var value8 = value.data;
		if(value8 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first3 = true;
			var _g3 = 0;
			while(_g3 < value8.length) {
				var value9 = value8[_g3];
				++_g3;
				if(first3) {
					first3 = false;
				} else {
					this.buf += ",";
				}
				this.parse37(value9);
			}
			this.buf += "]";
		}
		this.buf += ",\"filterViews\":";
		var value10 = value.filterViews;
		if(value10 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first4 = true;
			var _g4 = 0;
			while(_g4 < value10.length) {
				var value11 = value10[_g4];
				++_g4;
				if(first4) {
					first4 = false;
				} else {
					this.buf += ",";
				}
				this.parse51(value11);
			}
			this.buf += "]";
		}
		this.buf += ",\"merges\":";
		var value12 = value.merges;
		if(value12 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first5 = true;
			var _g5 = 0;
			while(_g5 < value12.length) {
				var value13 = value12[_g5];
				++_g5;
				if(first5) {
					first5 = false;
				} else {
					this.buf += ",";
				}
				this.parse2(value13);
			}
			this.buf += "]";
		}
		this.buf += ",\"properties\":";
		var value14 = value.properties;
		if(value14 == null) {
			this.buf += "null";
		} else {
			this.parse52(value14);
		}
		this.buf += ",\"protectedRanges\":";
		var value15 = value.protectedRanges;
		if(value15 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first6 = true;
			var _g6 = 0;
			while(_g6 < value15.length) {
				var value16 = value15[_g6];
				++_g6;
				if(first6) {
					first6 = false;
				} else {
					this.buf += ",";
				}
				this.parse54(value16);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse14: function(value) {
		this.buf += "{\"bandedRangeId\":";
		var value1 = value.bandedRangeId;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"columnProperties\":";
		var value2 = value.columnProperties;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse15(value2);
		}
		this.buf += ",\"range\":";
		var value3 = value.range;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse2(value3);
		}
		this.buf += ",\"rowProperties\":";
		var value4 = value.rowProperties;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.parse15(value4);
		}
		this.buf += "}";
	}
	,parse15: function(value) {
		this.buf += "{\"firstBandColor\":";
		var value1 = value.firstBandColor;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse5(value1);
		}
		this.buf += ",\"footerColor\":";
		var value2 = value.footerColor;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse5(value2);
		}
		this.buf += ",\"headerColor\":";
		var value3 = value.headerColor;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse5(value3);
		}
		this.buf += ",\"secondBandColor\":";
		var value4 = value.secondBandColor;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.parse5(value4);
		}
		this.buf += "}";
	}
	,parse16: function(value) {
		this.buf += "{\"criteria\":";
		var value1 = value.criteria;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var first = true;
			this.buf += "{";
			var _g = 0;
			var _g1 = Reflect.fields(value1);
			while(_g < _g1.length) {
				var k = _g1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				var s = JSON.stringify(k);
				this.buf += s;
				this.buf += ":";
				var value2 = value1[k];
				this.parse17(value2);
			}
			this.buf += "}";
		}
		this.buf += ",\"range\":";
		var value3 = value.range;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse2(value3);
		}
		this.buf += ",\"sortSpecs\":";
		var value4 = value.sortSpecs;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first1 = true;
			var _g2 = 0;
			while(_g2 < value4.length) {
				var value5 = value4[_g2];
				++_g2;
				if(first1) {
					first1 = false;
				} else {
					this.buf += ",";
				}
				this.parse20(value5);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse17: function(value) {
		this.buf += "{\"condition\":";
		var value1 = value.condition;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse18(value1);
		}
		this.buf += ",\"hiddenValues\":";
		var value2 = value.hiddenValues;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value2.length) {
				var value3 = value2[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				var s = JSON.stringify(value3);
				this.buf += s;
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse18: function(value) {
		this.buf += "{\"type\":";
		var value1 = value.type;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var value2 = value1;
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"values\":";
		var value3 = value.values;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value3.length) {
				var value4 = value3[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse19(value4);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse19: function(value) {
		this.buf += "{\"relativeDate\":";
		var value1 = value.relativeDate;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var value2 = value1;
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"userEnteredValue\":";
		var value3 = value.userEnteredValue;
		if(value3 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value3);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse20: function(value) {
		this.buf += "{\"dimensionIndex\":";
		var value1 = value.dimensionIndex;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"sortOrder\":";
		var value2 = value.sortOrder;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += "}";
	}
	,parse21: function(value) {
		this.buf += "{\"chartId\":";
		var value1 = value.chartId;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"position\":";
		var value2 = value.position;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse22(value2);
		}
		this.buf += ",\"spec\":";
		var value3 = value.spec;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse25(value3);
		}
		this.buf += "}";
	}
	,parse22: function(value) {
		this.buf += "{\"newSheet\":";
		var value1 = value.newSheet;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 ? "true" : "false";
		}
		this.buf += ",\"overlayPosition\":";
		var value2 = value.overlayPosition;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse23(value2);
		}
		this.buf += ",\"sheetId\":";
		var value3 = value.sheetId;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += "}";
	}
	,parse23: function(value) {
		this.buf += "{\"anchorCell\":";
		var value1 = value.anchorCell;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse24(value1);
		}
		this.buf += ",\"heightPixels\":";
		var value2 = value.heightPixels;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += ",\"offsetXPixels\":";
		var value3 = value.offsetXPixels;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"offsetYPixels\":";
		var value4 = value.offsetYPixels;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += ",\"widthPixels\":";
		var value5 = value.widthPixels;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += value5 == null ? "null" : "" + value5;
		}
		this.buf += "}";
	}
	,parse24: function(value) {
		this.buf += "{\"columnIndex\":";
		var value1 = value.columnIndex;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"rowIndex\":";
		var value2 = value.rowIndex;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += ",\"sheetId\":";
		var value3 = value.sheetId;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += "}";
	}
	,parse25: function(value) {
		this.buf += "{\"basicChart\":";
		var value1 = value.basicChart;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse26(value1);
		}
		this.buf += ",\"hiddenDimensionStrategy\":";
		var value2 = value.hiddenDimensionStrategy;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"pieChart\":";
		var value4 = value.pieChart;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.parse32(value4);
		}
		this.buf += ",\"title\":";
		var value5 = value.title;
		if(value5 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value5);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse26: function(value) {
		this.buf += "{\"axis\":";
		var value1 = value.axis;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value1.length) {
				var value2 = value1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse27(value2);
			}
			this.buf += "]";
		}
		this.buf += ",\"chartType\":";
		var value3 = value.chartType;
		if(value3 == null) {
			this.buf += "null";
		} else {
			var value4 = value3;
			var s = JSON.stringify(value4);
			this.buf += s;
		}
		this.buf += ",\"domains\":";
		var value5 = value.domains;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first1 = true;
			var _g1 = 0;
			while(_g1 < value5.length) {
				var value6 = value5[_g1];
				++_g1;
				if(first1) {
					first1 = false;
				} else {
					this.buf += ",";
				}
				this.parse28(value6);
			}
			this.buf += "]";
		}
		this.buf += ",\"headerCount\":";
		var value7 = value.headerCount;
		if(value7 == null) {
			this.buf += "null";
		} else {
			this.buf += value7 == null ? "null" : "" + value7;
		}
		this.buf += ",\"legendPosition\":";
		var value8 = value.legendPosition;
		if(value8 == null) {
			this.buf += "null";
		} else {
			var value9 = value8;
			var s1 = JSON.stringify(value9);
			this.buf += s1;
		}
		this.buf += ",\"series\":";
		var value10 = value.series;
		if(value10 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first2 = true;
			var _g2 = 0;
			while(_g2 < value10.length) {
				var value11 = value10[_g2];
				++_g2;
				if(first2) {
					first2 = false;
				} else {
					this.buf += ",";
				}
				this.parse31(value11);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse27: function(value) {
		this.buf += "{\"format\":";
		var value1 = value.format;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse10(value1);
		}
		this.buf += ",\"position\":";
		var value2 = value.position;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"title\":";
		var value4 = value.title;
		if(value4 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value4);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse28: function(value) {
		this.buf += "{\"domain\":";
		var value1 = value.domain;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse29(value1);
		}
		this.buf += "}";
	}
	,parse29: function(value) {
		this.buf += "{\"sourceRange\":";
		var value1 = value.sourceRange;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse30(value1);
		}
		this.buf += "}";
	}
	,parse30: function(value) {
		this.buf += "{\"sources\":";
		var value1 = value.sources;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value1.length) {
				var value2 = value1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse2(value2);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse31: function(value) {
		this.buf += "{\"series\":";
		var value1 = value.series;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse29(value1);
		}
		this.buf += ",\"targetAxis\":";
		var value2 = value.targetAxis;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"type\":";
		var value4 = value.type;
		if(value4 == null) {
			this.buf += "null";
		} else {
			var value5 = value4;
			var s1 = JSON.stringify(value5);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse32: function(value) {
		this.buf += "{\"domain\":";
		var value1 = value.domain;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse29(value1);
		}
		this.buf += ",\"legendPosition\":";
		var value2 = value.legendPosition;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"pieHole\":";
		var value4 = value.pieHole;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += ",\"series\":";
		var value5 = value.series;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.parse29(value5);
		}
		this.buf += ",\"threeDimensional\":";
		var value6 = value.threeDimensional;
		if(value6 == null) {
			this.buf += "null";
		} else {
			this.buf += value6 ? "true" : "false";
		}
		this.buf += "}";
	}
	,parse33: function(value) {
		this.buf += "{\"booleanRule\":";
		var value1 = value.booleanRule;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse34(value1);
		}
		this.buf += ",\"gradientRule\":";
		var value2 = value.gradientRule;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse35(value2);
		}
		this.buf += ",\"ranges\":";
		var value3 = value.ranges;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value3.length) {
				var value4 = value3[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse2(value4);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse34: function(value) {
		this.buf += "{\"condition\":";
		var value1 = value.condition;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse18(value1);
		}
		this.buf += ",\"format\":";
		var value2 = value.format;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse4(value2);
		}
		this.buf += "}";
	}
	,parse35: function(value) {
		this.buf += "{\"maxpoint\":";
		var value1 = value.maxpoint;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse36(value1);
		}
		this.buf += ",\"midpoint\":";
		var value2 = value.midpoint;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse36(value2);
		}
		this.buf += ",\"minpoint\":";
		var value3 = value.minpoint;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse36(value3);
		}
		this.buf += "}";
	}
	,parse36: function(value) {
		this.buf += "{\"color\":";
		var value1 = value.color;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse5(value1);
		}
		this.buf += ",\"type\":";
		var value2 = value.type;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"value\":";
		var value4 = value.value;
		if(value4 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value4);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse37: function(value) {
		this.buf += "{\"columnMetadata\":";
		var value1 = value.columnMetadata;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value1.length) {
				var value2 = value1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse38(value2);
			}
			this.buf += "]";
		}
		this.buf += ",\"rowData\":";
		var value3 = value.rowData;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first1 = true;
			var _g1 = 0;
			while(_g1 < value3.length) {
				var value4 = value3[_g1];
				++_g1;
				if(first1) {
					first1 = false;
				} else {
					this.buf += ",";
				}
				this.parse39(value4);
			}
			this.buf += "]";
		}
		this.buf += ",\"rowMetadata\":";
		var value5 = value.rowMetadata;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first2 = true;
			var _g2 = 0;
			while(_g2 < value5.length) {
				var value6 = value5[_g2];
				++_g2;
				if(first2) {
					first2 = false;
				} else {
					this.buf += ",";
				}
				this.parse38(value6);
			}
			this.buf += "]";
		}
		this.buf += ",\"startColumn\":";
		var value7 = value.startColumn;
		if(value7 == null) {
			this.buf += "null";
		} else {
			this.buf += value7 == null ? "null" : "" + value7;
		}
		this.buf += ",\"startRow\":";
		var value8 = value.startRow;
		if(value8 == null) {
			this.buf += "null";
		} else {
			this.buf += value8 == null ? "null" : "" + value8;
		}
		this.buf += "}";
	}
	,parse38: function(value) {
		this.buf += "{\"hiddenByFilter\":";
		var value1 = value.hiddenByFilter;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 ? "true" : "false";
		}
		this.buf += ",\"hiddenByUser\":";
		var value2 = value.hiddenByUser;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 ? "true" : "false";
		}
		this.buf += ",\"pixelSize\":";
		var value3 = value.pixelSize;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += "}";
	}
	,parse39: function(value) {
		this.buf += "{\"values\":";
		var value1 = value.values;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value1.length) {
				var value2 = value1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse40(value2);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse40: function(value) {
		this.buf += "{\"dataValidation\":";
		var value1 = value.dataValidation;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse41(value1);
		}
		this.buf += ",\"effectiveFormat\":";
		var value2 = value.effectiveFormat;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse4(value2);
		}
		this.buf += ",\"effectiveValue\":";
		var value3 = value.effectiveValue;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse42(value3);
		}
		this.buf += ",\"formattedValue\":";
		var value4 = value.formattedValue;
		if(value4 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value4);
			this.buf += s;
		}
		this.buf += ",\"hyperlink\":";
		var value5 = value.hyperlink;
		if(value5 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value5);
			this.buf += s1;
		}
		this.buf += ",\"note\":";
		var value6 = value.note;
		if(value6 == null) {
			this.buf += "null";
		} else {
			var s2 = JSON.stringify(value6);
			this.buf += s2;
		}
		this.buf += ",\"pivotTable\":";
		var value7 = value.pivotTable;
		if(value7 == null) {
			this.buf += "null";
		} else {
			this.parse44(value7);
		}
		this.buf += ",\"textFormatRuns\":";
		var value8 = value.textFormatRuns;
		if(value8 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value8.length) {
				var value9 = value8[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse50(value9);
			}
			this.buf += "]";
		}
		this.buf += ",\"userEnteredFormat\":";
		var value10 = value.userEnteredFormat;
		if(value10 == null) {
			this.buf += "null";
		} else {
			this.parse4(value10);
		}
		this.buf += ",\"userEnteredValue\":";
		var value11 = value.userEnteredValue;
		if(value11 == null) {
			this.buf += "null";
		} else {
			this.parse42(value11);
		}
		this.buf += "}";
	}
	,parse41: function(value) {
		this.buf += "{\"condition\":";
		var value1 = value.condition;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse18(value1);
		}
		this.buf += ",\"inputMessage\":";
		var value2 = value.inputMessage;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"showCustomUi\":";
		var value3 = value.showCustomUi;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 ? "true" : "false";
		}
		this.buf += ",\"strict\":";
		var value4 = value.strict;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 ? "true" : "false";
		}
		this.buf += "}";
	}
	,parse42: function(value) {
		this.buf += "{\"boolValue\":";
		var value1 = value.boolValue;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 ? "true" : "false";
		}
		this.buf += ",\"errorValue\":";
		var value2 = value.errorValue;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse43(value2);
		}
		this.buf += ",\"formulaValue\":";
		var value3 = value.formulaValue;
		if(value3 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"numberValue\":";
		var value4 = value.numberValue;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += ",\"stringValue\":";
		var value5 = value.stringValue;
		if(value5 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value5);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse43: function(value) {
		this.buf += "{\"message\":";
		var value1 = value.message;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"type\":";
		var value2 = value.type;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s1 = JSON.stringify(value3);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse44: function(value) {
		this.buf += "{\"columns\":";
		var value1 = value.columns;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value1.length) {
				var value2 = value1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse45(value2);
			}
			this.buf += "]";
		}
		this.buf += ",\"criteria\":";
		var value3 = value.criteria;
		if(value3 == null) {
			this.buf += "null";
		} else {
			var first1 = true;
			this.buf += "{";
			var _g1 = 0;
			var _g11 = Reflect.fields(value3);
			while(_g1 < _g11.length) {
				var k = _g11[_g1];
				++_g1;
				if(first1) {
					first1 = false;
				} else {
					this.buf += ",";
				}
				var s = JSON.stringify(k);
				this.buf += s;
				this.buf += ":";
				var value4 = value3[k];
				this.parse48(value4);
			}
			this.buf += "}";
		}
		this.buf += ",\"rows\":";
		var value5 = value.rows;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first2 = true;
			var _g2 = 0;
			while(_g2 < value5.length) {
				var value6 = value5[_g2];
				++_g2;
				if(first2) {
					first2 = false;
				} else {
					this.buf += ",";
				}
				this.parse45(value6);
			}
			this.buf += "]";
		}
		this.buf += ",\"source\":";
		var value7 = value.source;
		if(value7 == null) {
			this.buf += "null";
		} else {
			this.parse2(value7);
		}
		this.buf += ",\"valueLayout\":";
		var value8 = value.valueLayout;
		if(value8 == null) {
			this.buf += "null";
		} else {
			var value9 = value8;
			var s1 = JSON.stringify(value9);
			this.buf += s1;
		}
		this.buf += ",\"values\":";
		var value10 = value.values;
		if(value10 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first3 = true;
			var _g3 = 0;
			while(_g3 < value10.length) {
				var value11 = value10[_g3];
				++_g3;
				if(first3) {
					first3 = false;
				} else {
					this.buf += ",";
				}
				this.parse49(value11);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse45: function(value) {
		this.buf += "{\"showTotals\":";
		var value1 = value.showTotals;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 ? "true" : "false";
		}
		this.buf += ",\"sortOrder\":";
		var value2 = value.sortOrder;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"sourceColumnOffset\":";
		var value4 = value.sourceColumnOffset;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += ",\"valueBucket\":";
		var value5 = value.valueBucket;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.parse46(value5);
		}
		this.buf += ",\"valueMetadata\":";
		var value6 = value.valueMetadata;
		if(value6 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value6.length) {
				var value7 = value6[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse47(value7);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse46: function(value) {
		this.buf += "{\"buckets\":";
		var value1 = value.buckets;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value1.length) {
				var value2 = value1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse42(value2);
			}
			this.buf += "]";
		}
		this.buf += ",\"valuesIndex\":";
		var value3 = value.valuesIndex;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += "}";
	}
	,parse47: function(value) {
		this.buf += "{\"collapsed\":";
		var value1 = value.collapsed;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 ? "true" : "false";
		}
		this.buf += ",\"value\":";
		var value2 = value.value;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse42(value2);
		}
		this.buf += "}";
	}
	,parse48: function(value) {
		this.buf += "{\"visibleValues\":";
		var value1 = value.visibleValues;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value1.length) {
				var value2 = value1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				var s = JSON.stringify(value2);
				this.buf += s;
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse49: function(value) {
		this.buf += "{\"formula\":";
		var value1 = value.formula;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"name\":";
		var value2 = value.name;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value2);
			this.buf += s1;
		}
		this.buf += ",\"sourceColumnOffset\":";
		var value3 = value.sourceColumnOffset;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"summarizeFunction\":";
		var value4 = value.summarizeFunction;
		if(value4 == null) {
			this.buf += "null";
		} else {
			var value5 = value4;
			var s2 = JSON.stringify(value5);
			this.buf += s2;
		}
		this.buf += "}";
	}
	,parse50: function(value) {
		this.buf += "{\"format\":";
		var value1 = value.format;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse10(value1);
		}
		this.buf += ",\"startIndex\":";
		var value2 = value.startIndex;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += "}";
	}
	,parse51: function(value) {
		this.buf += "{\"criteria\":";
		var value1 = value.criteria;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var first = true;
			this.buf += "{";
			var _g = 0;
			var _g1 = Reflect.fields(value1);
			while(_g < _g1.length) {
				var k = _g1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				var s = JSON.stringify(k);
				this.buf += s;
				this.buf += ":";
				var value2 = value1[k];
				this.parse17(value2);
			}
			this.buf += "}";
		}
		this.buf += ",\"filterViewId\":";
		var value3 = value.filterViewId;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"namedRangeId\":";
		var value4 = value.namedRangeId;
		if(value4 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value4);
			this.buf += s1;
		}
		this.buf += ",\"range\":";
		var value5 = value.range;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.parse2(value5);
		}
		this.buf += ",\"sortSpecs\":";
		var value6 = value.sortSpecs;
		if(value6 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first1 = true;
			var _g2 = 0;
			while(_g2 < value6.length) {
				var value7 = value6[_g2];
				++_g2;
				if(first1) {
					first1 = false;
				} else {
					this.buf += ",";
				}
				this.parse20(value7);
			}
			this.buf += "]";
		}
		this.buf += ",\"title\":";
		var value8 = value.title;
		if(value8 == null) {
			this.buf += "null";
		} else {
			var s2 = JSON.stringify(value8);
			this.buf += s2;
		}
		this.buf += "}";
	}
	,parse52: function(value) {
		this.buf += "{\"gridProperties\":";
		var value1 = value.gridProperties;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse53(value1);
		}
		this.buf += ",\"hidden\":";
		var value2 = value.hidden;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 ? "true" : "false";
		}
		this.buf += ",\"index\":";
		var value3 = value.index;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"rightToLeft\":";
		var value4 = value.rightToLeft;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 ? "true" : "false";
		}
		this.buf += ",\"sheetId\":";
		var value5 = value.sheetId;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += value5 == null ? "null" : "" + value5;
		}
		this.buf += ",\"sheetType\":";
		var value6 = value.sheetType;
		if(value6 == null) {
			this.buf += "null";
		} else {
			var value7 = value6;
			var s = JSON.stringify(value7);
			this.buf += s;
		}
		this.buf += ",\"tabColor\":";
		var value8 = value.tabColor;
		if(value8 == null) {
			this.buf += "null";
		} else {
			this.parse5(value8);
		}
		this.buf += ",\"title\":";
		var value9 = value.title;
		if(value9 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value9);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse53: function(value) {
		this.buf += "{\"columnCount\":";
		var value1 = value.columnCount;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"frozenColumnCount\":";
		var value2 = value.frozenColumnCount;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += ",\"frozenRowCount\":";
		var value3 = value.frozenRowCount;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"hideGridlines\":";
		var value4 = value.hideGridlines;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 ? "true" : "false";
		}
		this.buf += ",\"rowCount\":";
		var value5 = value.rowCount;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += value5 == null ? "null" : "" + value5;
		}
		this.buf += "}";
	}
	,parse54: function(value) {
		this.buf += "{\"description\":";
		var value1 = value.description;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"editors\":";
		var value2 = value.editors;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse55(value2);
		}
		this.buf += ",\"namedRangeId\":";
		var value3 = value.namedRangeId;
		if(value3 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value3);
			this.buf += s1;
		}
		this.buf += ",\"protectedRangeId\":";
		var value4 = value.protectedRangeId;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += ",\"range\":";
		var value5 = value.range;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.parse2(value5);
		}
		this.buf += ",\"requestingUserCanEdit\":";
		var value6 = value.requestingUserCanEdit;
		if(value6 == null) {
			this.buf += "null";
		} else {
			this.buf += value6 ? "true" : "false";
		}
		this.buf += ",\"unprotectedRanges\":";
		var value7 = value.unprotectedRanges;
		if(value7 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value7.length) {
				var value8 = value7[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse2(value8);
			}
			this.buf += "]";
		}
		this.buf += ",\"warningOnly\":";
		var value9 = value.warningOnly;
		if(value9 == null) {
			this.buf += "null";
		} else {
			this.buf += value9 ? "true" : "false";
		}
		this.buf += "}";
	}
	,parse55: function(value) {
		this.buf += "{\"domainUsersCanEdit\":";
		var value1 = value.domainUsersCanEdit;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 ? "true" : "false";
		}
		this.buf += ",\"groups\":";
		var value2 = value.groups;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value2.length) {
				var value3 = value2[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				var s = JSON.stringify(value3);
				this.buf += s;
			}
			this.buf += "]";
		}
		this.buf += ",\"users\":";
		var value4 = value.users;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first1 = true;
			var _g1 = 0;
			while(_g1 < value4.length) {
				var value5 = value4[_g1];
				++_g1;
				if(first1) {
					first1 = false;
				} else {
					this.buf += ",";
				}
				var s1 = JSON.stringify(value5);
				this.buf += s1;
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,write: function(value) {
		this.init();
		this.parse0(value);
		return this.buf.toString();
	}
	,__class__: tink_json_Writer0
});
var tink_json_Writer1 = function() {
	tink_json_BasicWriter.call(this);
};
tink_json_Writer1.__name__ = true;
tink_json_Writer1.__super__ = tink_json_BasicWriter;
tink_json_Writer1.prototype = $extend(tink_json_BasicWriter.prototype,{
	parse0: function(value) {
		this.buf += "{\"includeSpreadsheetInResponse\":";
		var value1 = value.includeSpreadsheetInResponse;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 ? "true" : "false";
		}
		this.buf += ",\"requests\":";
		var value2 = value.requests;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value2.length) {
				var value3 = value2[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse1(value3);
			}
			this.buf += "]";
		}
		this.buf += ",\"responseIncludeGridData\":";
		var value4 = value.responseIncludeGridData;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 ? "true" : "false";
		}
		this.buf += ",\"responseRanges\":";
		var value5 = value.responseRanges;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first1 = true;
			var _g1 = 0;
			while(_g1 < value5.length) {
				var value6 = value5[_g1];
				++_g1;
				if(first1) {
					first1 = false;
				} else {
					this.buf += ",";
				}
				var s = JSON.stringify(value6);
				this.buf += s;
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse1: function(value) {
		this.buf += "{\"addBanding\":";
		var value1 = value.addBanding;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse2(value1);
		}
		this.buf += ",\"addChart\":";
		var value2 = value.addChart;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse7(value2);
		}
		this.buf += ",\"addConditionalFormatRule\":";
		var value3 = value.addConditionalFormatRule;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse21(value3);
		}
		this.buf += ",\"addFilterView\":";
		var value4 = value.addFilterView;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.parse34(value4);
		}
		this.buf += ",\"addNamedRange\":";
		var value5 = value.addNamedRange;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.parse38(value5);
		}
		this.buf += ",\"addProtectedRange\":";
		var value6 = value.addProtectedRange;
		if(value6 == null) {
			this.buf += "null";
		} else {
			this.parse40(value6);
		}
		this.buf += ",\"addSheet\":";
		var value7 = value.addSheet;
		if(value7 == null) {
			this.buf += "null";
		} else {
			this.parse43(value7);
		}
		this.buf += ",\"appendCells\":";
		var value8 = value.appendCells;
		if(value8 == null) {
			this.buf += "null";
		} else {
			this.parse46(value8);
		}
		this.buf += ",\"appendDimension\":";
		var value9 = value.appendDimension;
		if(value9 == null) {
			this.buf += "null";
		} else {
			this.parse59(value9);
		}
		this.buf += ",\"autoFill\":";
		var value10 = value.autoFill;
		if(value10 == null) {
			this.buf += "null";
		} else {
			this.parse60(value10);
		}
		this.buf += ",\"autoResizeDimensions\":";
		var value11 = value.autoResizeDimensions;
		if(value11 == null) {
			this.buf += "null";
		} else {
			this.parse62(value11);
		}
		this.buf += ",\"clearBasicFilter\":";
		var value12 = value.clearBasicFilter;
		if(value12 == null) {
			this.buf += "null";
		} else {
			this.parse64(value12);
		}
		this.buf += ",\"copyPaste\":";
		var value13 = value.copyPaste;
		if(value13 == null) {
			this.buf += "null";
		} else {
			this.parse65(value13);
		}
		this.buf += ",\"cutPaste\":";
		var value14 = value.cutPaste;
		if(value14 == null) {
			this.buf += "null";
		} else {
			this.parse66(value14);
		}
		this.buf += ",\"deleteBanding\":";
		var value15 = value.deleteBanding;
		if(value15 == null) {
			this.buf += "null";
		} else {
			this.parse67(value15);
		}
		this.buf += ",\"deleteConditionalFormatRule\":";
		var value16 = value.deleteConditionalFormatRule;
		if(value16 == null) {
			this.buf += "null";
		} else {
			this.parse68(value16);
		}
		this.buf += ",\"deleteDimension\":";
		var value17 = value.deleteDimension;
		if(value17 == null) {
			this.buf += "null";
		} else {
			this.parse69(value17);
		}
		this.buf += ",\"deleteEmbeddedObject\":";
		var value18 = value.deleteEmbeddedObject;
		if(value18 == null) {
			this.buf += "null";
		} else {
			this.parse70(value18);
		}
		this.buf += ",\"deleteFilterView\":";
		var value19 = value.deleteFilterView;
		if(value19 == null) {
			this.buf += "null";
		} else {
			this.parse71(value19);
		}
		this.buf += ",\"deleteNamedRange\":";
		var value20 = value.deleteNamedRange;
		if(value20 == null) {
			this.buf += "null";
		} else {
			this.parse72(value20);
		}
		this.buf += ",\"deleteProtectedRange\":";
		var value21 = value.deleteProtectedRange;
		if(value21 == null) {
			this.buf += "null";
		} else {
			this.parse73(value21);
		}
		this.buf += ",\"deleteRange\":";
		var value22 = value.deleteRange;
		if(value22 == null) {
			this.buf += "null";
		} else {
			this.parse74(value22);
		}
		this.buf += ",\"deleteSheet\":";
		var value23 = value.deleteSheet;
		if(value23 == null) {
			this.buf += "null";
		} else {
			this.parse64(value23);
		}
		this.buf += ",\"duplicateFilterView\":";
		var value24 = value.duplicateFilterView;
		if(value24 == null) {
			this.buf += "null";
		} else {
			this.parse71(value24);
		}
		this.buf += ",\"duplicateSheet\":";
		var value25 = value.duplicateSheet;
		if(value25 == null) {
			this.buf += "null";
		} else {
			this.parse75(value25);
		}
		this.buf += ",\"findReplace\":";
		var value26 = value.findReplace;
		if(value26 == null) {
			this.buf += "null";
		} else {
			this.parse76(value26);
		}
		this.buf += ",\"insertDimension\":";
		var value27 = value.insertDimension;
		if(value27 == null) {
			this.buf += "null";
		} else {
			this.parse77(value27);
		}
		this.buf += ",\"insertRange\":";
		var value28 = value.insertRange;
		if(value28 == null) {
			this.buf += "null";
		} else {
			this.parse78(value28);
		}
		this.buf += ",\"mergeCells\":";
		var value29 = value.mergeCells;
		if(value29 == null) {
			this.buf += "null";
		} else {
			this.parse79(value29);
		}
		this.buf += ",\"moveDimension\":";
		var value30 = value.moveDimension;
		if(value30 == null) {
			this.buf += "null";
		} else {
			this.parse80(value30);
		}
		this.buf += ",\"pasteData\":";
		var value31 = value.pasteData;
		if(value31 == null) {
			this.buf += "null";
		} else {
			this.parse81(value31);
		}
		this.buf += ",\"repeatCell\":";
		var value32 = value.repeatCell;
		if(value32 == null) {
			this.buf += "null";
		} else {
			this.parse82(value32);
		}
		this.buf += ",\"setBasicFilter\":";
		var value33 = value.setBasicFilter;
		if(value33 == null) {
			this.buf += "null";
		} else {
			this.parse83(value33);
		}
		this.buf += ",\"setDataValidation\":";
		var value34 = value.setDataValidation;
		if(value34 == null) {
			this.buf += "null";
		} else {
			this.parse85(value34);
		}
		this.buf += ",\"sortRange\":";
		var value35 = value.sortRange;
		if(value35 == null) {
			this.buf += "null";
		} else {
			this.parse86(value35);
		}
		this.buf += ",\"textToColumns\":";
		var value36 = value.textToColumns;
		if(value36 == null) {
			this.buf += "null";
		} else {
			this.parse87(value36);
		}
		this.buf += ",\"unmergeCells\":";
		var value37 = value.unmergeCells;
		if(value37 == null) {
			this.buf += "null";
		} else {
			this.parse88(value37);
		}
		this.buf += ",\"updateBanding\":";
		var value38 = value.updateBanding;
		if(value38 == null) {
			this.buf += "null";
		} else {
			this.parse89(value38);
		}
		this.buf += ",\"updateBorders\":";
		var value39 = value.updateBorders;
		if(value39 == null) {
			this.buf += "null";
		} else {
			this.parse90(value39);
		}
		this.buf += ",\"updateCells\":";
		var value40 = value.updateCells;
		if(value40 == null) {
			this.buf += "null";
		} else {
			this.parse91(value40);
		}
		this.buf += ",\"updateChartSpec\":";
		var value41 = value.updateChartSpec;
		if(value41 == null) {
			this.buf += "null";
		} else {
			this.parse92(value41);
		}
		this.buf += ",\"updateConditionalFormatRule\":";
		var value42 = value.updateConditionalFormatRule;
		if(value42 == null) {
			this.buf += "null";
		} else {
			this.parse93(value42);
		}
		this.buf += ",\"updateDimensionProperties\":";
		var value43 = value.updateDimensionProperties;
		if(value43 == null) {
			this.buf += "null";
		} else {
			this.parse94(value43);
		}
		this.buf += ",\"updateEmbeddedObjectPosition\":";
		var value44 = value.updateEmbeddedObjectPosition;
		if(value44 == null) {
			this.buf += "null";
		} else {
			this.parse96(value44);
		}
		this.buf += ",\"updateFilterView\":";
		var value45 = value.updateFilterView;
		if(value45 == null) {
			this.buf += "null";
		} else {
			this.parse97(value45);
		}
		this.buf += ",\"updateNamedRange\":";
		var value46 = value.updateNamedRange;
		if(value46 == null) {
			this.buf += "null";
		} else {
			this.parse98(value46);
		}
		this.buf += ",\"updateProtectedRange\":";
		var value47 = value.updateProtectedRange;
		if(value47 == null) {
			this.buf += "null";
		} else {
			this.parse99(value47);
		}
		this.buf += ",\"updateSheetProperties\":";
		var value48 = value.updateSheetProperties;
		if(value48 == null) {
			this.buf += "null";
		} else {
			this.parse100(value48);
		}
		this.buf += ",\"updateSpreadsheetProperties\":";
		var value49 = value.updateSpreadsheetProperties;
		if(value49 == null) {
			this.buf += "null";
		} else {
			this.parse101(value49);
		}
		this.buf += "}";
	}
	,parse2: function(value) {
		this.buf += "{\"bandedRange\":";
		var value1 = value.bandedRange;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse3(value1);
		}
		this.buf += "}";
	}
	,parse3: function(value) {
		this.buf += "{\"bandedRangeId\":";
		var value1 = value.bandedRangeId;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"columnProperties\":";
		var value2 = value.columnProperties;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse4(value2);
		}
		this.buf += ",\"range\":";
		var value3 = value.range;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse6(value3);
		}
		this.buf += ",\"rowProperties\":";
		var value4 = value.rowProperties;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.parse4(value4);
		}
		this.buf += "}";
	}
	,parse4: function(value) {
		this.buf += "{\"firstBandColor\":";
		var value1 = value.firstBandColor;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse5(value1);
		}
		this.buf += ",\"footerColor\":";
		var value2 = value.footerColor;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse5(value2);
		}
		this.buf += ",\"headerColor\":";
		var value3 = value.headerColor;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse5(value3);
		}
		this.buf += ",\"secondBandColor\":";
		var value4 = value.secondBandColor;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.parse5(value4);
		}
		this.buf += "}";
	}
	,parse5: function(value) {
		this.buf += "{\"alpha\":";
		var value1 = value.alpha;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"blue\":";
		var value2 = value.blue;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += ",\"green\":";
		var value3 = value.green;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"red\":";
		var value4 = value.red;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += "}";
	}
	,parse6: function(value) {
		this.buf += "{\"endColumnIndex\":";
		var value1 = value.endColumnIndex;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"endRowIndex\":";
		var value2 = value.endRowIndex;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += ",\"sheetId\":";
		var value3 = value.sheetId;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"startColumnIndex\":";
		var value4 = value.startColumnIndex;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += ",\"startRowIndex\":";
		var value5 = value.startRowIndex;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += value5 == null ? "null" : "" + value5;
		}
		this.buf += "}";
	}
	,parse7: function(value) {
		this.buf += "{\"chart\":";
		var value1 = value.chart;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse8(value1);
		}
		this.buf += "}";
	}
	,parse8: function(value) {
		this.buf += "{\"chartId\":";
		var value1 = value.chartId;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"position\":";
		var value2 = value.position;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse9(value2);
		}
		this.buf += ",\"spec\":";
		var value3 = value.spec;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse12(value3);
		}
		this.buf += "}";
	}
	,parse9: function(value) {
		this.buf += "{\"newSheet\":";
		var value1 = value.newSheet;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 ? "true" : "false";
		}
		this.buf += ",\"overlayPosition\":";
		var value2 = value.overlayPosition;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse10(value2);
		}
		this.buf += ",\"sheetId\":";
		var value3 = value.sheetId;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += "}";
	}
	,parse10: function(value) {
		this.buf += "{\"anchorCell\":";
		var value1 = value.anchorCell;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse11(value1);
		}
		this.buf += ",\"heightPixels\":";
		var value2 = value.heightPixels;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += ",\"offsetXPixels\":";
		var value3 = value.offsetXPixels;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"offsetYPixels\":";
		var value4 = value.offsetYPixels;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += ",\"widthPixels\":";
		var value5 = value.widthPixels;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += value5 == null ? "null" : "" + value5;
		}
		this.buf += "}";
	}
	,parse11: function(value) {
		this.buf += "{\"columnIndex\":";
		var value1 = value.columnIndex;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"rowIndex\":";
		var value2 = value.rowIndex;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += ",\"sheetId\":";
		var value3 = value.sheetId;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += "}";
	}
	,parse12: function(value) {
		this.buf += "{\"basicChart\":";
		var value1 = value.basicChart;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse13(value1);
		}
		this.buf += ",\"hiddenDimensionStrategy\":";
		var value2 = value.hiddenDimensionStrategy;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"pieChart\":";
		var value4 = value.pieChart;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.parse20(value4);
		}
		this.buf += ",\"title\":";
		var value5 = value.title;
		if(value5 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value5);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse13: function(value) {
		this.buf += "{\"axis\":";
		var value1 = value.axis;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value1.length) {
				var value2 = value1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse14(value2);
			}
			this.buf += "]";
		}
		this.buf += ",\"chartType\":";
		var value3 = value.chartType;
		if(value3 == null) {
			this.buf += "null";
		} else {
			var value4 = value3;
			var s = JSON.stringify(value4);
			this.buf += s;
		}
		this.buf += ",\"domains\":";
		var value5 = value.domains;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first1 = true;
			var _g1 = 0;
			while(_g1 < value5.length) {
				var value6 = value5[_g1];
				++_g1;
				if(first1) {
					first1 = false;
				} else {
					this.buf += ",";
				}
				this.parse16(value6);
			}
			this.buf += "]";
		}
		this.buf += ",\"headerCount\":";
		var value7 = value.headerCount;
		if(value7 == null) {
			this.buf += "null";
		} else {
			this.buf += value7 == null ? "null" : "" + value7;
		}
		this.buf += ",\"legendPosition\":";
		var value8 = value.legendPosition;
		if(value8 == null) {
			this.buf += "null";
		} else {
			var value9 = value8;
			var s1 = JSON.stringify(value9);
			this.buf += s1;
		}
		this.buf += ",\"series\":";
		var value10 = value.series;
		if(value10 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first2 = true;
			var _g2 = 0;
			while(_g2 < value10.length) {
				var value11 = value10[_g2];
				++_g2;
				if(first2) {
					first2 = false;
				} else {
					this.buf += ",";
				}
				this.parse19(value11);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse14: function(value) {
		this.buf += "{\"format\":";
		var value1 = value.format;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse15(value1);
		}
		this.buf += ",\"position\":";
		var value2 = value.position;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"title\":";
		var value4 = value.title;
		if(value4 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value4);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse15: function(value) {
		this.buf += "{\"bold\":";
		var value1 = value.bold;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 ? "true" : "false";
		}
		this.buf += ",\"fontFamily\":";
		var value2 = value.fontFamily;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"fontSize\":";
		var value3 = value.fontSize;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"foregroundColor\":";
		var value4 = value.foregroundColor;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.parse5(value4);
		}
		this.buf += ",\"italic\":";
		var value5 = value.italic;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += value5 ? "true" : "false";
		}
		this.buf += ",\"strikethrough\":";
		var value6 = value.strikethrough;
		if(value6 == null) {
			this.buf += "null";
		} else {
			this.buf += value6 ? "true" : "false";
		}
		this.buf += ",\"underline\":";
		var value7 = value.underline;
		if(value7 == null) {
			this.buf += "null";
		} else {
			this.buf += value7 ? "true" : "false";
		}
		this.buf += "}";
	}
	,parse16: function(value) {
		this.buf += "{\"domain\":";
		var value1 = value.domain;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse17(value1);
		}
		this.buf += "}";
	}
	,parse17: function(value) {
		this.buf += "{\"sourceRange\":";
		var value1 = value.sourceRange;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse18(value1);
		}
		this.buf += "}";
	}
	,parse18: function(value) {
		this.buf += "{\"sources\":";
		var value1 = value.sources;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value1.length) {
				var value2 = value1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse6(value2);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse19: function(value) {
		this.buf += "{\"series\":";
		var value1 = value.series;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse17(value1);
		}
		this.buf += ",\"targetAxis\":";
		var value2 = value.targetAxis;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"type\":";
		var value4 = value.type;
		if(value4 == null) {
			this.buf += "null";
		} else {
			var value5 = value4;
			var s1 = JSON.stringify(value5);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse20: function(value) {
		this.buf += "{\"domain\":";
		var value1 = value.domain;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse17(value1);
		}
		this.buf += ",\"legendPosition\":";
		var value2 = value.legendPosition;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"pieHole\":";
		var value4 = value.pieHole;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += ",\"series\":";
		var value5 = value.series;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.parse17(value5);
		}
		this.buf += ",\"threeDimensional\":";
		var value6 = value.threeDimensional;
		if(value6 == null) {
			this.buf += "null";
		} else {
			this.buf += value6 ? "true" : "false";
		}
		this.buf += "}";
	}
	,parse21: function(value) {
		this.buf += "{\"index\":";
		var value1 = value.index;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"rule\":";
		var value2 = value.rule;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse22(value2);
		}
		this.buf += "}";
	}
	,parse22: function(value) {
		this.buf += "{\"booleanRule\":";
		var value1 = value.booleanRule;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse23(value1);
		}
		this.buf += ",\"gradientRule\":";
		var value2 = value.gradientRule;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse32(value2);
		}
		this.buf += ",\"ranges\":";
		var value3 = value.ranges;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value3.length) {
				var value4 = value3[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse6(value4);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse23: function(value) {
		this.buf += "{\"condition\":";
		var value1 = value.condition;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse24(value1);
		}
		this.buf += ",\"format\":";
		var value2 = value.format;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse26(value2);
		}
		this.buf += "}";
	}
	,parse24: function(value) {
		this.buf += "{\"type\":";
		var value1 = value.type;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var value2 = value1;
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"values\":";
		var value3 = value.values;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value3.length) {
				var value4 = value3[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse25(value4);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse25: function(value) {
		this.buf += "{\"relativeDate\":";
		var value1 = value.relativeDate;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var value2 = value1;
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"userEnteredValue\":";
		var value3 = value.userEnteredValue;
		if(value3 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value3);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse26: function(value) {
		this.buf += "{\"backgroundColor\":";
		var value1 = value.backgroundColor;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse5(value1);
		}
		this.buf += ",\"borders\":";
		var value2 = value.borders;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse27(value2);
		}
		this.buf += ",\"horizontalAlignment\":";
		var value3 = value.horizontalAlignment;
		if(value3 == null) {
			this.buf += "null";
		} else {
			var value4 = value3;
			var s = JSON.stringify(value4);
			this.buf += s;
		}
		this.buf += ",\"hyperlinkDisplayType\":";
		var value5 = value.hyperlinkDisplayType;
		if(value5 == null) {
			this.buf += "null";
		} else {
			var value6 = value5;
			var s1 = JSON.stringify(value6);
			this.buf += s1;
		}
		this.buf += ",\"numberFormat\":";
		var value7 = value.numberFormat;
		if(value7 == null) {
			this.buf += "null";
		} else {
			this.parse29(value7);
		}
		this.buf += ",\"padding\":";
		var value8 = value.padding;
		if(value8 == null) {
			this.buf += "null";
		} else {
			this.parse30(value8);
		}
		this.buf += ",\"textDirection\":";
		var value9 = value.textDirection;
		if(value9 == null) {
			this.buf += "null";
		} else {
			var value10 = value9;
			var s2 = JSON.stringify(value10);
			this.buf += s2;
		}
		this.buf += ",\"textFormat\":";
		var value11 = value.textFormat;
		if(value11 == null) {
			this.buf += "null";
		} else {
			this.parse15(value11);
		}
		this.buf += ",\"textRotation\":";
		var value12 = value.textRotation;
		if(value12 == null) {
			this.buf += "null";
		} else {
			this.parse31(value12);
		}
		this.buf += ",\"verticalAlignment\":";
		var value13 = value.verticalAlignment;
		if(value13 == null) {
			this.buf += "null";
		} else {
			var value14 = value13;
			var s3 = JSON.stringify(value14);
			this.buf += s3;
		}
		this.buf += ",\"wrapStrategy\":";
		var value15 = value.wrapStrategy;
		if(value15 == null) {
			this.buf += "null";
		} else {
			var value16 = value15;
			var s4 = JSON.stringify(value16);
			this.buf += s4;
		}
		this.buf += "}";
	}
	,parse27: function(value) {
		this.buf += "{\"bottom\":";
		var value1 = value.bottom;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse28(value1);
		}
		this.buf += ",\"left\":";
		var value2 = value.left;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse28(value2);
		}
		this.buf += ",\"right\":";
		var value3 = value.right;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse28(value3);
		}
		this.buf += ",\"top\":";
		var value4 = value.top;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.parse28(value4);
		}
		this.buf += "}";
	}
	,parse28: function(value) {
		this.buf += "{\"color\":";
		var value1 = value.color;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse5(value1);
		}
		this.buf += ",\"style\":";
		var value2 = value.style;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"width\":";
		var value4 = value.width;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += "}";
	}
	,parse29: function(value) {
		this.buf += "{\"pattern\":";
		var value1 = value.pattern;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"type\":";
		var value2 = value.type;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s1 = JSON.stringify(value3);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse30: function(value) {
		this.buf += "{\"bottom\":";
		var value1 = value.bottom;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"left\":";
		var value2 = value.left;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += ",\"right\":";
		var value3 = value.right;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"top\":";
		var value4 = value.top;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += "}";
	}
	,parse31: function(value) {
		this.buf += "{\"angle\":";
		var value1 = value.angle;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"vertical\":";
		var value2 = value.vertical;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 ? "true" : "false";
		}
		this.buf += "}";
	}
	,parse32: function(value) {
		this.buf += "{\"maxpoint\":";
		var value1 = value.maxpoint;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse33(value1);
		}
		this.buf += ",\"midpoint\":";
		var value2 = value.midpoint;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse33(value2);
		}
		this.buf += ",\"minpoint\":";
		var value3 = value.minpoint;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse33(value3);
		}
		this.buf += "}";
	}
	,parse33: function(value) {
		this.buf += "{\"color\":";
		var value1 = value.color;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse5(value1);
		}
		this.buf += ",\"type\":";
		var value2 = value.type;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"value\":";
		var value4 = value.value;
		if(value4 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value4);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse34: function(value) {
		this.buf += "{\"filter\":";
		var value1 = value.filter;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse35(value1);
		}
		this.buf += "}";
	}
	,parse35: function(value) {
		this.buf += "{\"criteria\":";
		var value1 = value.criteria;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var first = true;
			this.buf += "{";
			var _g = 0;
			var _g1 = Reflect.fields(value1);
			while(_g < _g1.length) {
				var k = _g1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				var s = JSON.stringify(k);
				this.buf += s;
				this.buf += ":";
				var value2 = value1[k];
				this.parse36(value2);
			}
			this.buf += "}";
		}
		this.buf += ",\"filterViewId\":";
		var value3 = value.filterViewId;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"namedRangeId\":";
		var value4 = value.namedRangeId;
		if(value4 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value4);
			this.buf += s1;
		}
		this.buf += ",\"range\":";
		var value5 = value.range;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.parse6(value5);
		}
		this.buf += ",\"sortSpecs\":";
		var value6 = value.sortSpecs;
		if(value6 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first1 = true;
			var _g2 = 0;
			while(_g2 < value6.length) {
				var value7 = value6[_g2];
				++_g2;
				if(first1) {
					first1 = false;
				} else {
					this.buf += ",";
				}
				this.parse37(value7);
			}
			this.buf += "]";
		}
		this.buf += ",\"title\":";
		var value8 = value.title;
		if(value8 == null) {
			this.buf += "null";
		} else {
			var s2 = JSON.stringify(value8);
			this.buf += s2;
		}
		this.buf += "}";
	}
	,parse36: function(value) {
		this.buf += "{\"condition\":";
		var value1 = value.condition;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse24(value1);
		}
		this.buf += ",\"hiddenValues\":";
		var value2 = value.hiddenValues;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value2.length) {
				var value3 = value2[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				var s = JSON.stringify(value3);
				this.buf += s;
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse37: function(value) {
		this.buf += "{\"dimensionIndex\":";
		var value1 = value.dimensionIndex;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"sortOrder\":";
		var value2 = value.sortOrder;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += "}";
	}
	,parse38: function(value) {
		this.buf += "{\"namedRange\":";
		var value1 = value.namedRange;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse39(value1);
		}
		this.buf += "}";
	}
	,parse39: function(value) {
		this.buf += "{\"name\":";
		var value1 = value.name;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"namedRangeId\":";
		var value2 = value.namedRangeId;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value2);
			this.buf += s1;
		}
		this.buf += ",\"range\":";
		var value3 = value.range;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse6(value3);
		}
		this.buf += "}";
	}
	,parse40: function(value) {
		this.buf += "{\"protectedRange\":";
		var value1 = value.protectedRange;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse41(value1);
		}
		this.buf += "}";
	}
	,parse41: function(value) {
		this.buf += "{\"description\":";
		var value1 = value.description;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"editors\":";
		var value2 = value.editors;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse42(value2);
		}
		this.buf += ",\"namedRangeId\":";
		var value3 = value.namedRangeId;
		if(value3 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value3);
			this.buf += s1;
		}
		this.buf += ",\"protectedRangeId\":";
		var value4 = value.protectedRangeId;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += ",\"range\":";
		var value5 = value.range;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.parse6(value5);
		}
		this.buf += ",\"requestingUserCanEdit\":";
		var value6 = value.requestingUserCanEdit;
		if(value6 == null) {
			this.buf += "null";
		} else {
			this.buf += value6 ? "true" : "false";
		}
		this.buf += ",\"unprotectedRanges\":";
		var value7 = value.unprotectedRanges;
		if(value7 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value7.length) {
				var value8 = value7[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse6(value8);
			}
			this.buf += "]";
		}
		this.buf += ",\"warningOnly\":";
		var value9 = value.warningOnly;
		if(value9 == null) {
			this.buf += "null";
		} else {
			this.buf += value9 ? "true" : "false";
		}
		this.buf += "}";
	}
	,parse42: function(value) {
		this.buf += "{\"domainUsersCanEdit\":";
		var value1 = value.domainUsersCanEdit;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 ? "true" : "false";
		}
		this.buf += ",\"groups\":";
		var value2 = value.groups;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value2.length) {
				var value3 = value2[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				var s = JSON.stringify(value3);
				this.buf += s;
			}
			this.buf += "]";
		}
		this.buf += ",\"users\":";
		var value4 = value.users;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first1 = true;
			var _g1 = 0;
			while(_g1 < value4.length) {
				var value5 = value4[_g1];
				++_g1;
				if(first1) {
					first1 = false;
				} else {
					this.buf += ",";
				}
				var s1 = JSON.stringify(value5);
				this.buf += s1;
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse43: function(value) {
		this.buf += "{\"properties\":";
		var value1 = value.properties;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse44(value1);
		}
		this.buf += "}";
	}
	,parse44: function(value) {
		this.buf += "{\"gridProperties\":";
		var value1 = value.gridProperties;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse45(value1);
		}
		this.buf += ",\"hidden\":";
		var value2 = value.hidden;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 ? "true" : "false";
		}
		this.buf += ",\"index\":";
		var value3 = value.index;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"rightToLeft\":";
		var value4 = value.rightToLeft;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 ? "true" : "false";
		}
		this.buf += ",\"sheetId\":";
		var value5 = value.sheetId;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += value5 == null ? "null" : "" + value5;
		}
		this.buf += ",\"sheetType\":";
		var value6 = value.sheetType;
		if(value6 == null) {
			this.buf += "null";
		} else {
			var value7 = value6;
			var s = JSON.stringify(value7);
			this.buf += s;
		}
		this.buf += ",\"tabColor\":";
		var value8 = value.tabColor;
		if(value8 == null) {
			this.buf += "null";
		} else {
			this.parse5(value8);
		}
		this.buf += ",\"title\":";
		var value9 = value.title;
		if(value9 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value9);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse45: function(value) {
		this.buf += "{\"columnCount\":";
		var value1 = value.columnCount;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"frozenColumnCount\":";
		var value2 = value.frozenColumnCount;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += ",\"frozenRowCount\":";
		var value3 = value.frozenRowCount;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"hideGridlines\":";
		var value4 = value.hideGridlines;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 ? "true" : "false";
		}
		this.buf += ",\"rowCount\":";
		var value5 = value.rowCount;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += value5 == null ? "null" : "" + value5;
		}
		this.buf += "}";
	}
	,parse46: function(value) {
		this.buf += "{\"fields\":";
		var value1 = value.fields;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"rows\":";
		var value2 = value.rows;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value2.length) {
				var value3 = value2[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse47(value3);
			}
			this.buf += "]";
		}
		this.buf += ",\"sheetId\":";
		var value4 = value.sheetId;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += "}";
	}
	,parse47: function(value) {
		this.buf += "{\"values\":";
		var value1 = value.values;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value1.length) {
				var value2 = value1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse48(value2);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse48: function(value) {
		this.buf += "{\"dataValidation\":";
		var value1 = value.dataValidation;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse49(value1);
		}
		this.buf += ",\"effectiveFormat\":";
		var value2 = value.effectiveFormat;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse26(value2);
		}
		this.buf += ",\"effectiveValue\":";
		var value3 = value.effectiveValue;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse50(value3);
		}
		this.buf += ",\"formattedValue\":";
		var value4 = value.formattedValue;
		if(value4 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value4);
			this.buf += s;
		}
		this.buf += ",\"hyperlink\":";
		var value5 = value.hyperlink;
		if(value5 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value5);
			this.buf += s1;
		}
		this.buf += ",\"note\":";
		var value6 = value.note;
		if(value6 == null) {
			this.buf += "null";
		} else {
			var s2 = JSON.stringify(value6);
			this.buf += s2;
		}
		this.buf += ",\"pivotTable\":";
		var value7 = value.pivotTable;
		if(value7 == null) {
			this.buf += "null";
		} else {
			this.parse52(value7);
		}
		this.buf += ",\"textFormatRuns\":";
		var value8 = value.textFormatRuns;
		if(value8 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value8.length) {
				var value9 = value8[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse58(value9);
			}
			this.buf += "]";
		}
		this.buf += ",\"userEnteredFormat\":";
		var value10 = value.userEnteredFormat;
		if(value10 == null) {
			this.buf += "null";
		} else {
			this.parse26(value10);
		}
		this.buf += ",\"userEnteredValue\":";
		var value11 = value.userEnteredValue;
		if(value11 == null) {
			this.buf += "null";
		} else {
			this.parse50(value11);
		}
		this.buf += "}";
	}
	,parse49: function(value) {
		this.buf += "{\"condition\":";
		var value1 = value.condition;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse24(value1);
		}
		this.buf += ",\"inputMessage\":";
		var value2 = value.inputMessage;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"showCustomUi\":";
		var value3 = value.showCustomUi;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 ? "true" : "false";
		}
		this.buf += ",\"strict\":";
		var value4 = value.strict;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 ? "true" : "false";
		}
		this.buf += "}";
	}
	,parse50: function(value) {
		this.buf += "{\"boolValue\":";
		var value1 = value.boolValue;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 ? "true" : "false";
		}
		this.buf += ",\"errorValue\":";
		var value2 = value.errorValue;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse51(value2);
		}
		this.buf += ",\"formulaValue\":";
		var value3 = value.formulaValue;
		if(value3 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"numberValue\":";
		var value4 = value.numberValue;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += ",\"stringValue\":";
		var value5 = value.stringValue;
		if(value5 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value5);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse51: function(value) {
		this.buf += "{\"message\":";
		var value1 = value.message;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"type\":";
		var value2 = value.type;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s1 = JSON.stringify(value3);
			this.buf += s1;
		}
		this.buf += "}";
	}
	,parse52: function(value) {
		this.buf += "{\"columns\":";
		var value1 = value.columns;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value1.length) {
				var value2 = value1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse53(value2);
			}
			this.buf += "]";
		}
		this.buf += ",\"criteria\":";
		var value3 = value.criteria;
		if(value3 == null) {
			this.buf += "null";
		} else {
			var first1 = true;
			this.buf += "{";
			var _g1 = 0;
			var _g11 = Reflect.fields(value3);
			while(_g1 < _g11.length) {
				var k = _g11[_g1];
				++_g1;
				if(first1) {
					first1 = false;
				} else {
					this.buf += ",";
				}
				var s = JSON.stringify(k);
				this.buf += s;
				this.buf += ":";
				var value4 = value3[k];
				this.parse56(value4);
			}
			this.buf += "}";
		}
		this.buf += ",\"rows\":";
		var value5 = value.rows;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first2 = true;
			var _g2 = 0;
			while(_g2 < value5.length) {
				var value6 = value5[_g2];
				++_g2;
				if(first2) {
					first2 = false;
				} else {
					this.buf += ",";
				}
				this.parse53(value6);
			}
			this.buf += "]";
		}
		this.buf += ",\"source\":";
		var value7 = value.source;
		if(value7 == null) {
			this.buf += "null";
		} else {
			this.parse6(value7);
		}
		this.buf += ",\"valueLayout\":";
		var value8 = value.valueLayout;
		if(value8 == null) {
			this.buf += "null";
		} else {
			var value9 = value8;
			var s1 = JSON.stringify(value9);
			this.buf += s1;
		}
		this.buf += ",\"values\":";
		var value10 = value.values;
		if(value10 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first3 = true;
			var _g3 = 0;
			while(_g3 < value10.length) {
				var value11 = value10[_g3];
				++_g3;
				if(first3) {
					first3 = false;
				} else {
					this.buf += ",";
				}
				this.parse57(value11);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse53: function(value) {
		this.buf += "{\"showTotals\":";
		var value1 = value.showTotals;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 ? "true" : "false";
		}
		this.buf += ",\"sortOrder\":";
		var value2 = value.sortOrder;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"sourceColumnOffset\":";
		var value4 = value.sourceColumnOffset;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += ",\"valueBucket\":";
		var value5 = value.valueBucket;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.parse54(value5);
		}
		this.buf += ",\"valueMetadata\":";
		var value6 = value.valueMetadata;
		if(value6 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value6.length) {
				var value7 = value6[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse55(value7);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse54: function(value) {
		this.buf += "{\"buckets\":";
		var value1 = value.buckets;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value1.length) {
				var value2 = value1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse50(value2);
			}
			this.buf += "]";
		}
		this.buf += ",\"valuesIndex\":";
		var value3 = value.valuesIndex;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += "}";
	}
	,parse55: function(value) {
		this.buf += "{\"collapsed\":";
		var value1 = value.collapsed;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 ? "true" : "false";
		}
		this.buf += ",\"value\":";
		var value2 = value.value;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse50(value2);
		}
		this.buf += "}";
	}
	,parse56: function(value) {
		this.buf += "{\"visibleValues\":";
		var value1 = value.visibleValues;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value1.length) {
				var value2 = value1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				var s = JSON.stringify(value2);
				this.buf += s;
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse57: function(value) {
		this.buf += "{\"formula\":";
		var value1 = value.formula;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"name\":";
		var value2 = value.name;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value2);
			this.buf += s1;
		}
		this.buf += ",\"sourceColumnOffset\":";
		var value3 = value.sourceColumnOffset;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"summarizeFunction\":";
		var value4 = value.summarizeFunction;
		if(value4 == null) {
			this.buf += "null";
		} else {
			var value5 = value4;
			var s2 = JSON.stringify(value5);
			this.buf += s2;
		}
		this.buf += "}";
	}
	,parse58: function(value) {
		this.buf += "{\"format\":";
		var value1 = value.format;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse15(value1);
		}
		this.buf += ",\"startIndex\":";
		var value2 = value.startIndex;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += "}";
	}
	,parse59: function(value) {
		this.buf += "{\"dimension\":";
		var value1 = value.dimension;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var value2 = value1;
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"length\":";
		var value3 = value.length;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"sheetId\":";
		var value4 = value.sheetId;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += "}";
	}
	,parse60: function(value) {
		this.buf += "{\"range\":";
		var value1 = value.range;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse6(value1);
		}
		this.buf += ",\"sourceAndDestination\":";
		var value2 = value.sourceAndDestination;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse61(value2);
		}
		this.buf += ",\"useAlternateSeries\":";
		var value3 = value.useAlternateSeries;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 ? "true" : "false";
		}
		this.buf += "}";
	}
	,parse61: function(value) {
		this.buf += "{\"dimension\":";
		var value1 = value.dimension;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var value2 = value1;
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"fillLength\":";
		var value3 = value.fillLength;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"source\":";
		var value4 = value.source;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.parse6(value4);
		}
		this.buf += "}";
	}
	,parse62: function(value) {
		this.buf += "{\"dimensions\":";
		var value1 = value.dimensions;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse63(value1);
		}
		this.buf += "}";
	}
	,parse63: function(value) {
		this.buf += "{\"dimension\":";
		var value1 = value.dimension;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var value2 = value1;
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"endIndex\":";
		var value3 = value.endIndex;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += ",\"sheetId\":";
		var value4 = value.sheetId;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += ",\"startIndex\":";
		var value5 = value.startIndex;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += value5 == null ? "null" : "" + value5;
		}
		this.buf += "}";
	}
	,parse64: function(value) {
		this.buf += "{\"sheetId\":";
		var value1 = value.sheetId;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += "}";
	}
	,parse65: function(value) {
		this.buf += "{\"destination\":";
		var value1 = value.destination;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse6(value1);
		}
		this.buf += ",\"pasteOrientation\":";
		var value2 = value.pasteOrientation;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"pasteType\":";
		var value4 = value.pasteType;
		if(value4 == null) {
			this.buf += "null";
		} else {
			var value5 = value4;
			var s1 = JSON.stringify(value5);
			this.buf += s1;
		}
		this.buf += ",\"source\":";
		var value6 = value.source;
		if(value6 == null) {
			this.buf += "null";
		} else {
			this.parse6(value6);
		}
		this.buf += "}";
	}
	,parse66: function(value) {
		this.buf += "{\"destination\":";
		var value1 = value.destination;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse11(value1);
		}
		this.buf += ",\"pasteType\":";
		var value2 = value.pasteType;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"source\":";
		var value4 = value.source;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.parse6(value4);
		}
		this.buf += "}";
	}
	,parse67: function(value) {
		this.buf += "{\"bandedRangeId\":";
		var value1 = value.bandedRangeId;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += "}";
	}
	,parse68: function(value) {
		this.buf += "{\"index\":";
		var value1 = value.index;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"sheetId\":";
		var value2 = value.sheetId;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += "}";
	}
	,parse69: function(value) {
		this.buf += "{\"range\":";
		var value1 = value.range;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse63(value1);
		}
		this.buf += "}";
	}
	,parse70: function(value) {
		this.buf += "{\"objectId\":";
		var value1 = value.objectId;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += "}";
	}
	,parse71: function(value) {
		this.buf += "{\"filterId\":";
		var value1 = value.filterId;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += "}";
	}
	,parse72: function(value) {
		this.buf += "{\"namedRangeId\":";
		var value1 = value.namedRangeId;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += "}";
	}
	,parse73: function(value) {
		this.buf += "{\"protectedRangeId\":";
		var value1 = value.protectedRangeId;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += "}";
	}
	,parse74: function(value) {
		this.buf += "{\"range\":";
		var value1 = value.range;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse6(value1);
		}
		this.buf += ",\"shiftDimension\":";
		var value2 = value.shiftDimension;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += "}";
	}
	,parse75: function(value) {
		this.buf += "{\"insertSheetIndex\":";
		var value1 = value.insertSheetIndex;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"newSheetId\":";
		var value2 = value.newSheetId;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += ",\"newSheetName\":";
		var value3 = value.newSheetName;
		if(value3 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += ",\"sourceSheetId\":";
		var value4 = value.sourceSheetId;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += "}";
	}
	,parse76: function(value) {
		this.buf += "{\"allSheets\":";
		var value1 = value.allSheets;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 ? "true" : "false";
		}
		this.buf += ",\"find\":";
		var value2 = value.find;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"includeFormulas\":";
		var value3 = value.includeFormulas;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 ? "true" : "false";
		}
		this.buf += ",\"matchCase\":";
		var value4 = value.matchCase;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 ? "true" : "false";
		}
		this.buf += ",\"matchEntireCell\":";
		var value5 = value.matchEntireCell;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.buf += value5 ? "true" : "false";
		}
		this.buf += ",\"range\":";
		var value6 = value.range;
		if(value6 == null) {
			this.buf += "null";
		} else {
			this.parse6(value6);
		}
		this.buf += ",\"replacement\":";
		var value7 = value.replacement;
		if(value7 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value7);
			this.buf += s1;
		}
		this.buf += ",\"searchByRegex\":";
		var value8 = value.searchByRegex;
		if(value8 == null) {
			this.buf += "null";
		} else {
			this.buf += value8 ? "true" : "false";
		}
		this.buf += ",\"sheetId\":";
		var value9 = value.sheetId;
		if(value9 == null) {
			this.buf += "null";
		} else {
			this.buf += value9 == null ? "null" : "" + value9;
		}
		this.buf += "}";
	}
	,parse77: function(value) {
		this.buf += "{\"inheritFromBefore\":";
		var value1 = value.inheritFromBefore;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 ? "true" : "false";
		}
		this.buf += ",\"range\":";
		var value2 = value.range;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse63(value2);
		}
		this.buf += "}";
	}
	,parse78: function(value) {
		this.buf += "{\"range\":";
		var value1 = value.range;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse6(value1);
		}
		this.buf += ",\"shiftDimension\":";
		var value2 = value.shiftDimension;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s = JSON.stringify(value3);
			this.buf += s;
		}
		this.buf += "}";
	}
	,parse79: function(value) {
		this.buf += "{\"mergeType\":";
		var value1 = value.mergeType;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var value2 = value1;
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"range\":";
		var value3 = value.range;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse6(value3);
		}
		this.buf += "}";
	}
	,parse80: function(value) {
		this.buf += "{\"destinationIndex\":";
		var value1 = value.destinationIndex;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"source\":";
		var value2 = value.source;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse63(value2);
		}
		this.buf += "}";
	}
	,parse81: function(value) {
		this.buf += "{\"coordinate\":";
		var value1 = value.coordinate;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse11(value1);
		}
		this.buf += ",\"data\":";
		var value2 = value.data;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"delimiter\":";
		var value3 = value.delimiter;
		if(value3 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value3);
			this.buf += s1;
		}
		this.buf += ",\"html\":";
		var value4 = value.html;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 ? "true" : "false";
		}
		this.buf += ",\"type\":";
		var value5 = value.type;
		if(value5 == null) {
			this.buf += "null";
		} else {
			var value6 = value5;
			var s2 = JSON.stringify(value6);
			this.buf += s2;
		}
		this.buf += "}";
	}
	,parse82: function(value) {
		this.buf += "{\"cell\":";
		var value1 = value.cell;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse48(value1);
		}
		this.buf += ",\"fields\":";
		var value2 = value.fields;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"range\":";
		var value3 = value.range;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse6(value3);
		}
		this.buf += "}";
	}
	,parse83: function(value) {
		this.buf += "{\"filter\":";
		var value1 = value.filter;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse84(value1);
		}
		this.buf += "}";
	}
	,parse84: function(value) {
		this.buf += "{\"criteria\":";
		var value1 = value.criteria;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var first = true;
			this.buf += "{";
			var _g = 0;
			var _g1 = Reflect.fields(value1);
			while(_g < _g1.length) {
				var k = _g1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				var s = JSON.stringify(k);
				this.buf += s;
				this.buf += ":";
				var value2 = value1[k];
				this.parse36(value2);
			}
			this.buf += "}";
		}
		this.buf += ",\"range\":";
		var value3 = value.range;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse6(value3);
		}
		this.buf += ",\"sortSpecs\":";
		var value4 = value.sortSpecs;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first1 = true;
			var _g2 = 0;
			while(_g2 < value4.length) {
				var value5 = value4[_g2];
				++_g2;
				if(first1) {
					first1 = false;
				} else {
					this.buf += ",";
				}
				this.parse37(value5);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse85: function(value) {
		this.buf += "{\"range\":";
		var value1 = value.range;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse6(value1);
		}
		this.buf += ",\"rule\":";
		var value2 = value.rule;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse49(value2);
		}
		this.buf += "}";
	}
	,parse86: function(value) {
		this.buf += "{\"range\":";
		var value1 = value.range;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse6(value1);
		}
		this.buf += ",\"sortSpecs\":";
		var value2 = value.sortSpecs;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value2.length) {
				var value3 = value2[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse37(value3);
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,parse87: function(value) {
		this.buf += "{\"delimiter\":";
		var value1 = value.delimiter;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"delimiterType\":";
		var value2 = value.delimiterType;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var value3 = value2;
			var s1 = JSON.stringify(value3);
			this.buf += s1;
		}
		this.buf += ",\"source\":";
		var value4 = value.source;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.parse6(value4);
		}
		this.buf += "}";
	}
	,parse88: function(value) {
		this.buf += "{\"range\":";
		var value1 = value.range;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse6(value1);
		}
		this.buf += "}";
	}
	,parse89: function(value) {
		this.buf += "{\"bandedRange\":";
		var value1 = value.bandedRange;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse3(value1);
		}
		this.buf += ",\"fields\":";
		var value2 = value.fields;
		if(value2 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += "}";
	}
	,parse90: function(value) {
		this.buf += "{\"bottom\":";
		var value1 = value.bottom;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.parse28(value1);
		}
		this.buf += ",\"innerHorizontal\":";
		var value2 = value.innerHorizontal;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse28(value2);
		}
		this.buf += ",\"innerVertical\":";
		var value3 = value.innerVertical;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse28(value3);
		}
		this.buf += ",\"left\":";
		var value4 = value.left;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.parse28(value4);
		}
		this.buf += ",\"range\":";
		var value5 = value.range;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.parse6(value5);
		}
		this.buf += ",\"right\":";
		var value6 = value.right;
		if(value6 == null) {
			this.buf += "null";
		} else {
			this.parse28(value6);
		}
		this.buf += ",\"top\":";
		var value7 = value.top;
		if(value7 == null) {
			this.buf += "null";
		} else {
			this.parse28(value7);
		}
		this.buf += "}";
	}
	,parse91: function(value) {
		this.buf += "{\"fields\":";
		var value1 = value.fields;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"range\":";
		var value2 = value.range;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse6(value2);
		}
		this.buf += ",\"rows\":";
		var value3 = value.rows;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value3.length) {
				var value4 = value3[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse47(value4);
			}
			this.buf += "]";
		}
		this.buf += ",\"start\":";
		var value5 = value.start;
		if(value5 == null) {
			this.buf += "null";
		} else {
			this.parse11(value5);
		}
		this.buf += "}";
	}
	,parse92: function(value) {
		this.buf += "{\"chartId\":";
		var value1 = value.chartId;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"spec\":";
		var value2 = value.spec;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse12(value2);
		}
		this.buf += "}";
	}
	,parse93: function(value) {
		this.buf += "{\"index\":";
		var value1 = value.index;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"newIndex\":";
		var value2 = value.newIndex;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += ",\"rule\":";
		var value3 = value.rule;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse22(value3);
		}
		this.buf += ",\"sheetId\":";
		var value4 = value.sheetId;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += value4 == null ? "null" : "" + value4;
		}
		this.buf += "}";
	}
	,parse94: function(value) {
		this.buf += "{\"fields\":";
		var value1 = value.fields;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"properties\":";
		var value2 = value.properties;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse95(value2);
		}
		this.buf += ",\"range\":";
		var value3 = value.range;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse63(value3);
		}
		this.buf += "}";
	}
	,parse95: function(value) {
		this.buf += "{\"hiddenByFilter\":";
		var value1 = value.hiddenByFilter;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 ? "true" : "false";
		}
		this.buf += ",\"hiddenByUser\":";
		var value2 = value.hiddenByUser;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 ? "true" : "false";
		}
		this.buf += ",\"pixelSize\":";
		var value3 = value.pixelSize;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += "}";
	}
	,parse96: function(value) {
		this.buf += "{\"fields\":";
		var value1 = value.fields;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"newPosition\":";
		var value2 = value.newPosition;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse9(value2);
		}
		this.buf += ",\"objectId\":";
		var value3 = value.objectId;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 == null ? "null" : "" + value3;
		}
		this.buf += "}";
	}
	,parse97: function(value) {
		this.buf += "{\"fields\":";
		var value1 = value.fields;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"filter\":";
		var value2 = value.filter;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse35(value2);
		}
		this.buf += "}";
	}
	,parse98: function(value) {
		this.buf += "{\"fields\":";
		var value1 = value.fields;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"namedRange\":";
		var value2 = value.namedRange;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse39(value2);
		}
		this.buf += "}";
	}
	,parse99: function(value) {
		this.buf += "{\"fields\":";
		var value1 = value.fields;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"protectedRange\":";
		var value2 = value.protectedRange;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse41(value2);
		}
		this.buf += "}";
	}
	,parse100: function(value) {
		this.buf += "{\"fields\":";
		var value1 = value.fields;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"properties\":";
		var value2 = value.properties;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse44(value2);
		}
		this.buf += "}";
	}
	,parse101: function(value) {
		this.buf += "{\"fields\":";
		var value1 = value.fields;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += ",\"properties\":";
		var value2 = value.properties;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.parse102(value2);
		}
		this.buf += "}";
	}
	,parse102: function(value) {
		this.buf += "{\"autoRecalc\":";
		var value1 = value.autoRecalc;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var value2 = value1;
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"defaultFormat\":";
		var value3 = value.defaultFormat;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.parse26(value3);
		}
		this.buf += ",\"iterativeCalculationSettings\":";
		var value4 = value.iterativeCalculationSettings;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.parse103(value4);
		}
		this.buf += ",\"locale\":";
		var value5 = value.locale;
		if(value5 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value5);
			this.buf += s1;
		}
		this.buf += ",\"timeZone\":";
		var value6 = value.timeZone;
		if(value6 == null) {
			this.buf += "null";
		} else {
			var s2 = JSON.stringify(value6);
			this.buf += s2;
		}
		this.buf += ",\"title\":";
		var value7 = value.title;
		if(value7 == null) {
			this.buf += "null";
		} else {
			var s3 = JSON.stringify(value7);
			this.buf += s3;
		}
		this.buf += "}";
	}
	,parse103: function(value) {
		this.buf += "{\"convergenceThreshold\":";
		var value1 = value.convergenceThreshold;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += value1 == null ? "null" : "" + value1;
		}
		this.buf += ",\"maxIterations\":";
		var value2 = value.maxIterations;
		if(value2 == null) {
			this.buf += "null";
		} else {
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += "}";
	}
	,write: function(value) {
		this.init();
		this.parse0(value);
		return this.buf.toString();
	}
	,__class__: tink_json_Writer1
});
var tink_json_Writer2 = function() {
	tink_json_BasicWriter.call(this);
};
tink_json_Writer2.__name__ = true;
tink_json_Writer2.__super__ = tink_json_BasicWriter;
tink_json_Writer2.prototype = $extend(tink_json_BasicWriter.prototype,{
	parse0: function(value) {
		this.buf += "{\"ranges\":";
		var value1 = value.ranges;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value1.length) {
				var value2 = value1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				var s = JSON.stringify(value2);
				this.buf += s;
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,write: function(value) {
		this.init();
		this.parse0(value);
		return this.buf.toString();
	}
	,__class__: tink_json_Writer2
});
var tink_json_Writer3 = function() {
	tink_json_BasicWriter.call(this);
};
tink_json_Writer3.__name__ = true;
tink_json_Writer3.__super__ = tink_json_BasicWriter;
tink_json_Writer3.prototype = $extend(tink_json_BasicWriter.prototype,{
	parse0: function(value) {
		this.buf += "{\"majorDimension\":";
		var value1 = value.majorDimension;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var value2 = value1;
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"range\":";
		var value3 = value.range;
		if(value3 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value3);
			this.buf += s1;
		}
		this.buf += ",\"values\":";
		var value4 = value.values;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value4.length) {
				var value5 = value4[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.buf += "[";
				var first1 = true;
				var _g1 = 0;
				while(_g1 < value5.length) {
					var value6 = value5[_g1];
					++_g1;
					if(first1) {
						first1 = false;
					} else {
						this.buf += ",";
					}
					this.writeValue(value6);
				}
				this.buf += "]";
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,write: function(value) {
		this.init();
		this.parse0(value);
		return this.buf.toString();
	}
	,__class__: tink_json_Writer3
});
var tink_json_Writer4 = function() {
	tink_json_BasicWriter.call(this);
};
tink_json_Writer4.__name__ = true;
tink_json_Writer4.__super__ = tink_json_BasicWriter;
tink_json_Writer4.prototype = $extend(tink_json_BasicWriter.prototype,{
	parse0: function(value) {
		this.buf += "{\"data\":";
		var value1 = value.data;
		if(value1 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value1.length) {
				var value2 = value1[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.parse1(value2);
			}
			this.buf += "]";
		}
		this.buf += ",\"includeValuesInResponse\":";
		var value3 = value.includeValuesInResponse;
		if(value3 == null) {
			this.buf += "null";
		} else {
			this.buf += value3 ? "true" : "false";
		}
		this.buf += ",\"responseDateTimeRenderOption\":";
		var value4 = value.responseDateTimeRenderOption;
		if(value4 == null) {
			this.buf += "null";
		} else {
			var value5 = value4;
			var s = JSON.stringify(value5);
			this.buf += s;
		}
		this.buf += ",\"responseValueRenderOption\":";
		var value6 = value.responseValueRenderOption;
		if(value6 == null) {
			this.buf += "null";
		} else {
			var value7 = value6;
			var s1 = JSON.stringify(value7);
			this.buf += s1;
		}
		this.buf += ",\"valueInputOption\":";
		var value8 = value.valueInputOption;
		if(value8 == null) {
			this.buf += "null";
		} else {
			var value9 = value8;
			var s2 = JSON.stringify(value9);
			this.buf += s2;
		}
		this.buf += "}";
	}
	,parse1: function(value) {
		this.buf += "{\"majorDimension\":";
		var value1 = value.majorDimension;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var value2 = value1;
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += ",\"range\":";
		var value3 = value.range;
		if(value3 == null) {
			this.buf += "null";
		} else {
			var s1 = JSON.stringify(value3);
			this.buf += s1;
		}
		this.buf += ",\"values\":";
		var value4 = value.values;
		if(value4 == null) {
			this.buf += "null";
		} else {
			this.buf += "[";
			var first = true;
			var _g = 0;
			while(_g < value4.length) {
				var value5 = value4[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buf += ",";
				}
				this.buf += "[";
				var first1 = true;
				var _g1 = 0;
				while(_g1 < value5.length) {
					var value6 = value5[_g1];
					++_g1;
					if(first1) {
						first1 = false;
					} else {
						this.buf += ",";
					}
					this.writeValue(value6);
				}
				this.buf += "]";
			}
			this.buf += "]";
		}
		this.buf += "}";
	}
	,write: function(value) {
		this.init();
		this.parse0(value);
		return this.buf.toString();
	}
	,__class__: tink_json_Writer4
});
var tink_json_Writer5 = function() {
	tink_json_BasicWriter.call(this);
};
tink_json_Writer5.__name__ = true;
tink_json_Writer5.__super__ = tink_json_BasicWriter;
tink_json_Writer5.prototype = $extend(tink_json_BasicWriter.prototype,{
	parse0: function(value) {
		this.buf += "{}";
	}
	,write: function(value) {
		this.init();
		this.parse0(value);
		return this.buf.toString();
	}
	,__class__: tink_json_Writer5
});
var tink_json_Writer6 = function() {
	tink_json_BasicWriter.call(this);
};
tink_json_Writer6.__name__ = true;
tink_json_Writer6.__super__ = tink_json_BasicWriter;
tink_json_Writer6.prototype = $extend(tink_json_BasicWriter.prototype,{
	parse0: function(value) {
		this.buf += "{\"destinationSpreadsheetId\":";
		var value1 = value.destinationSpreadsheetId;
		if(value1 == null) {
			this.buf += "null";
		} else {
			var s = JSON.stringify(value1);
			this.buf += s;
		}
		this.buf += "}";
	}
	,write: function(value) {
		this.init();
		this.parse0(value);
		return this.buf.toString();
	}
	,__class__: tink_json_Writer6
});
var tink_macro_DirectType = function() { };
tink_macro_DirectType.__name__ = true;
var tink_querystring_Builder = function() { };
tink_querystring_Builder.__name__ = true;
var tink_querystring_BuilderBase = function() { };
tink_querystring_BuilderBase.__name__ = true;
tink_querystring_BuilderBase.prototype = {
	__class__: tink_querystring_BuilderBase
};
var tink_querystring__$Builder_DefaultBuffer_$Impl_$ = {};
tink_querystring__$Builder_DefaultBuffer_$Impl_$.__name__ = true;
tink_querystring__$Builder_DefaultBuffer_$Impl_$._new = function() {
	var this1;
	var this2 = [];
	this1 = this2;
	return this1;
};
tink_querystring__$Builder_DefaultBuffer_$Impl_$.add = function(this1,name,value) {
	this1.push(name + "=" + tink_url__$Portion_Portion_$Impl_$.ofString(value));
};
tink_querystring__$Builder_DefaultBuffer_$Impl_$.flush = function(this1) {
	return this1.join("&");
};
var tink_querystring_Builder0 = function() {
};
tink_querystring_Builder0.__name__ = true;
tink_querystring_Builder0.prototype = {
	stringify: function(data) {
		var prefix = "";
		var this1 = [];
		var buffer = this1;
		this.parse0(prefix,buffer,data);
		return tink_web_proxy__$Remote_QueryParams_$Impl_$.flush(buffer);
	}
	,parse0: function(prefix,buffer,data) {
		var prefix1;
		if(prefix == "") {
			prefix1 = "includeGridData";
		} else {
			var v = prefix;
			prefix1 = v + ".includeGridData";
		}
		var data1 = data.includeGridData;
		if(data1 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix1),tink_url__$Portion_Portion_$Impl_$.ofString(data1 ? "true" : "false")));
		}
		var prefix2;
		if(prefix == "") {
			prefix2 = "ranges";
		} else {
			var v1 = prefix;
			prefix2 = v1 + ".ranges";
		}
		var data2 = data.ranges;
		if(data2 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix2),tink_url__$Portion_Portion_$Impl_$.ofString(data2)));
		}
	}
	,__class__: tink_querystring_Builder0
};
var tink_querystring_Builder1 = function() {
};
tink_querystring_Builder1.__name__ = true;
tink_querystring_Builder1.prototype = {
	stringify: function(data) {
		var prefix = "";
		var this1 = [];
		var buffer = this1;
		this.parse0(prefix,buffer,data);
		return tink_web_proxy__$Remote_QueryParams_$Impl_$.flush(buffer);
	}
	,parse0: function(prefix,buffer,data) {
		var prefix1;
		if(prefix == "") {
			prefix1 = "dateTimeRenderOption";
		} else {
			var v = prefix;
			prefix1 = v + ".dateTimeRenderOption";
		}
		var data1 = data.dateTimeRenderOption;
		if(data1 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix1),tink_url__$Portion_Portion_$Impl_$.ofString(data1)));
		}
		var prefix2;
		if(prefix == "") {
			prefix2 = "majorDimension";
		} else {
			var v1 = prefix;
			prefix2 = v1 + ".majorDimension";
		}
		var data2 = data.majorDimension;
		if(data2 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix2),tink_url__$Portion_Portion_$Impl_$.ofString(data2)));
		}
		var prefix3;
		if(prefix == "") {
			prefix3 = "valueRenderOption";
		} else {
			var v2 = prefix;
			prefix3 = v2 + ".valueRenderOption";
		}
		var data3 = data.valueRenderOption;
		if(data3 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix3),tink_url__$Portion_Portion_$Impl_$.ofString(data3)));
		}
	}
	,__class__: tink_querystring_Builder1
};
var tink_querystring_Builder2 = function() {
};
tink_querystring_Builder2.__name__ = true;
tink_querystring_Builder2.prototype = {
	stringify: function(data) {
		var prefix = "";
		var this1 = [];
		var buffer = this1;
		this.parse0(prefix,buffer,data);
		return tink_web_proxy__$Remote_QueryParams_$Impl_$.flush(buffer);
	}
	,parse0: function(prefix,buffer,data) {
		var prefix1;
		if(prefix == "") {
			prefix1 = "includeValuesInResponse";
		} else {
			var v = prefix;
			prefix1 = v + ".includeValuesInResponse";
		}
		var data1 = data.includeValuesInResponse;
		if(data1 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix1),tink_url__$Portion_Portion_$Impl_$.ofString(data1 ? "true" : "false")));
		}
		var prefix2;
		if(prefix == "") {
			prefix2 = "responseDateTimeRenderOption";
		} else {
			var v1 = prefix;
			prefix2 = v1 + ".responseDateTimeRenderOption";
		}
		var data2 = data.responseDateTimeRenderOption;
		if(data2 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix2),tink_url__$Portion_Portion_$Impl_$.ofString(data2)));
		}
		var prefix3;
		if(prefix == "") {
			prefix3 = "responseValueRenderOption";
		} else {
			var v2 = prefix;
			prefix3 = v2 + ".responseValueRenderOption";
		}
		var data3 = data.responseValueRenderOption;
		if(data3 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix3),tink_url__$Portion_Portion_$Impl_$.ofString(data3)));
		}
		var prefix4;
		if(prefix == "") {
			prefix4 = "valueInputOption";
		} else {
			var v3 = prefix;
			prefix4 = v3 + ".valueInputOption";
		}
		var data4 = data.valueInputOption;
		if(data4 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix4),tink_url__$Portion_Portion_$Impl_$.ofString(data4)));
		}
	}
	,__class__: tink_querystring_Builder2
};
var tink_querystring_Builder3 = function() {
};
tink_querystring_Builder3.__name__ = true;
tink_querystring_Builder3.prototype = {
	stringify: function(data) {
		var prefix = "";
		var this1 = [];
		var buffer = this1;
		this.parse0(prefix,buffer,data);
		return tink_web_proxy__$Remote_QueryParams_$Impl_$.flush(buffer);
	}
	,parse0: function(prefix,buffer,data) {
		var prefix1;
		if(prefix == "") {
			prefix1 = "dateTimeRenderOption";
		} else {
			var v = prefix;
			prefix1 = v + ".dateTimeRenderOption";
		}
		var data1 = data.dateTimeRenderOption;
		if(data1 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix1),tink_url__$Portion_Portion_$Impl_$.ofString(data1)));
		}
		var prefix2;
		if(prefix == "") {
			prefix2 = "majorDimension";
		} else {
			var v1 = prefix;
			prefix2 = v1 + ".majorDimension";
		}
		var data2 = data.majorDimension;
		if(data2 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix2),tink_url__$Portion_Portion_$Impl_$.ofString(data2)));
		}
		var prefix3;
		if(prefix == "") {
			prefix3 = "ranges";
		} else {
			var v2 = prefix;
			prefix3 = v2 + ".ranges";
		}
		var data3 = data.ranges;
		if(data3 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix3),tink_url__$Portion_Portion_$Impl_$.ofString(data3)));
		}
		var prefix4;
		if(prefix == "") {
			prefix4 = "valueRenderOption";
		} else {
			var v3 = prefix;
			prefix4 = v3 + ".valueRenderOption";
		}
		var data4 = data.valueRenderOption;
		if(data4 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix4),tink_url__$Portion_Portion_$Impl_$.ofString(data4)));
		}
	}
	,__class__: tink_querystring_Builder3
};
var tink_querystring_Builder4 = function() {
};
tink_querystring_Builder4.__name__ = true;
tink_querystring_Builder4.prototype = {
	stringify: function(data) {
		var prefix = "";
		var this1 = [];
		var buffer = this1;
		this.parse0(prefix,buffer,data);
		return tink_web_proxy__$Remote_QueryParams_$Impl_$.flush(buffer);
	}
	,parse0: function(prefix,buffer,data) {
		var prefix1;
		if(prefix == "") {
			prefix1 = "includeValuesInResponse";
		} else {
			var v = prefix;
			prefix1 = v + ".includeValuesInResponse";
		}
		var data1 = data.includeValuesInResponse;
		if(data1 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix1),tink_url__$Portion_Portion_$Impl_$.ofString(data1 ? "true" : "false")));
		}
		var prefix2;
		if(prefix == "") {
			prefix2 = "insertDataOption";
		} else {
			var v1 = prefix;
			prefix2 = v1 + ".insertDataOption";
		}
		var data2 = data.insertDataOption;
		if(data2 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix2),tink_url__$Portion_Portion_$Impl_$.ofString(data2)));
		}
		var prefix3;
		if(prefix == "") {
			prefix3 = "responseDateTimeRenderOption";
		} else {
			var v2 = prefix;
			prefix3 = v2 + ".responseDateTimeRenderOption";
		}
		var data3 = data.responseDateTimeRenderOption;
		if(data3 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix3),tink_url__$Portion_Portion_$Impl_$.ofString(data3)));
		}
		var prefix4;
		if(prefix == "") {
			prefix4 = "responseValueRenderOption";
		} else {
			var v3 = prefix;
			prefix4 = v3 + ".responseValueRenderOption";
		}
		var data4 = data.responseValueRenderOption;
		if(data4 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix4),tink_url__$Portion_Portion_$Impl_$.ofString(data4)));
		}
		var prefix5;
		if(prefix == "") {
			prefix5 = "valueInputOption";
		} else {
			var v4 = prefix;
			prefix5 = v4 + ".valueInputOption";
		}
		var data5 = data.valueInputOption;
		if(data5 != null) {
			buffer.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(prefix5),tink_url__$Portion_Portion_$Impl_$.ofString(data5)));
		}
	}
	,__class__: tink_querystring_Builder4
};
var tink_streams__$IdealStream_IdealStream_$Impl_$ = {};
tink_streams__$IdealStream_IdealStream_$Impl_$.__name__ = true;
tink_streams__$IdealStream_IdealStream_$Impl_$.collect = function(this1) {
	var buf = [];
	var ret = this1.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafeSync(function(x) {
		buf.push(x);
		return tink_streams_Handled.Resume;
	})).map(function(c) {
		return buf;
	});
	return ret.gather();
};
var tink_streams_IdealStreamBase = function() {
	tink_streams_StreamBase.call(this);
};
tink_streams_IdealStreamBase.__name__ = true;
tink_streams_IdealStreamBase.__super__ = tink_streams_StreamBase;
tink_streams_IdealStreamBase.prototype = $extend(tink_streams_StreamBase.prototype,{
	idealize: function(rescue) {
		return this;
	}
	,__class__: tink_streams_IdealStreamBase
});
var tink_streams__$Stream_Stream_$Impl_$ = {};
tink_streams__$Stream_Stream_$Impl_$.__name__ = true;
tink_streams__$Stream_Stream_$Impl_$.get_depleted = function(this1) {
	return this1.get_depleted();
};
tink_streams__$Stream_Stream_$Impl_$.dirty = function(this1) {
	return this1;
};
tink_streams__$Stream_Stream_$Impl_$.single = function(i) {
	return new tink_streams_Single(new tink_core__$Lazy_LazyConst(i));
};
tink_streams__$Stream_Stream_$Impl_$.ofIterator = function(i) {
	var next = null;
	next = function(step) {
		step(i.hasNext() ? tink_streams_Step.Link(i.next(),tink_streams_Generator.stream(next)) : tink_streams_Step.End);
	};
	var next1 = next;
	return tink_streams_Generator.stream(next);
};
tink_streams__$Stream_Stream_$Impl_$.flatten = function(f) {
	return new tink_streams_FutureStream(f);
};
tink_streams__$Stream_Stream_$Impl_$.promise = function(f) {
	var ret = f.map(function(o) {
		switch(o[1]) {
		case 0:
			var s = o[2];
			return tink_streams__$Stream_Stream_$Impl_$.dirty(s);
		case 1:
			var e = o[2];
			return tink_streams__$Stream_Stream_$Impl_$.ofError(e);
		}
	});
	return tink_streams__$Stream_Stream_$Impl_$.flatten(ret.gather());
};
tink_streams__$Stream_Stream_$Impl_$.ofError = function(e) {
	return new tink_streams__$Stream_ErrorStream(e);
};
var tink_streams_RegroupStatus = { __ename__ : true, __constructs__ : ["Flowing","Errored","Ended"] };
tink_streams_RegroupStatus.Flowing = ["Flowing",0];
tink_streams_RegroupStatus.Flowing.toString = $estr;
tink_streams_RegroupStatus.Flowing.__enum__ = tink_streams_RegroupStatus;
tink_streams_RegroupStatus.Errored = function(e) { var $x = ["Errored",1,e]; $x.__enum__ = tink_streams_RegroupStatus; $x.toString = $estr; return $x; };
tink_streams_RegroupStatus.Ended = ["Ended",2];
tink_streams_RegroupStatus.Ended.toString = $estr;
tink_streams_RegroupStatus.Ended.__enum__ = tink_streams_RegroupStatus;
var tink_streams_RegroupResult = { __ename__ : true, __constructs__ : ["Converted","Swallowed","Untouched","Errored"] };
tink_streams_RegroupResult.Converted = function(data) { var $x = ["Converted",0,data]; $x.__enum__ = tink_streams_RegroupResult; $x.toString = $estr; return $x; };
tink_streams_RegroupResult.Swallowed = ["Swallowed",1];
tink_streams_RegroupResult.Swallowed.toString = $estr;
tink_streams_RegroupResult.Swallowed.__enum__ = tink_streams_RegroupResult;
tink_streams_RegroupResult.Untouched = ["Untouched",2];
tink_streams_RegroupResult.Untouched.toString = $estr;
tink_streams_RegroupResult.Untouched.__enum__ = tink_streams_RegroupResult;
tink_streams_RegroupResult.Errored = function(e) { var $x = ["Errored",3,e]; $x.__enum__ = tink_streams_RegroupResult; $x.toString = $estr; return $x; };
var tink_streams__$Stream_Regrouper_$Impl_$ = {};
tink_streams__$Stream_Regrouper_$Impl_$.__name__ = true;
tink_streams__$Stream_Regrouper_$Impl_$.ofIgnorance = function(f) {
	return { apply : function(i,_) {
		return f(i);
	}};
};
tink_streams__$Stream_Regrouper_$Impl_$.ofIgnoranceSync = function(f) {
	return { apply : function(i,_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
	}};
};
tink_streams__$Stream_Regrouper_$Impl_$.ofFunc = function(f) {
	return { apply : f};
};
tink_streams__$Stream_Regrouper_$Impl_$.ofFuncSync = function(f) {
	return { apply : function(i,s) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i,s)));
	}};
};
var tink_streams__$Stream_RegroupStream = function(source,f,buf) {
	tink_streams_StreamBase.call(this);
	this.source = source;
	this.buf = buf == null ? [] : buf;
	this.f = f;
};
tink_streams__$Stream_RegroupStream.__name__ = true;
tink_streams__$Stream_RegroupStream.__super__ = tink_streams_StreamBase;
tink_streams__$Stream_RegroupStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	reset: function() {
		this.buf = [];
	}
	,forEach: function(handler) {
		var _gthis = this;
		var error = null;
		var ret = this.source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(item) {
			_gthis.buf.push(item);
			var ret1 = _gthis.f.apply(_gthis.buf,tink_streams_RegroupStatus.Flowing).flatMap(function(o) {
				switch(o[1]) {
				case 0:
					var v = o[2];
					_gthis.buf = [];
					return handler.apply(v);
				case 1:
					_gthis.buf = [];
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
				case 2:
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
				case 3:
					var e = o[2];
					error = e;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Finish));
				}
			});
			return ret1.gather();
		})).flatMap(function(c) {
			var handleRemaining = function(status,conclusion) {
				if(_gthis.buf.length > 0) {
					var ret2 = _gthis.f.apply(_gthis.buf,status).flatMap(function(o1) {
						switch(o1[1]) {
						case 0:
							var v1 = o1[2];
							var ret3 = handler.apply(v1).map(function(o2) {
								switch(o2[1]) {
								case 0:
									return tink_streams_Conclusion.Halted(new tink_streams__$Stream_RegroupStream(tink_streams__$Stream_Stream_$Impl_$.single(_gthis.buf.pop()),_gthis.f,_gthis.buf));
								case 1:case 2:
									return conclusion;
								case 3:
									var e1 = o2[2];
									var ret4 = tink_streams__$Stream_Stream_$Impl_$.single(_gthis.buf.pop());
									return tink_streams_Conclusion.Clogged(error,new tink_streams__$Stream_RegroupStream(ret4,_gthis.f,_gthis.buf));
								}
							});
							return ret3.gather();
						case 1:case 2:
							return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(conclusion));
						case 3:
							var e2 = o1[2];
							return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Reduction.Failed(error)));
						}
					});
					return ret2.gather();
				} else {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(conclusion));
				}
			};
			switch(c[1]) {
			case 0:
				var rest = c[2];
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Halted(new tink_streams__$Stream_RegroupStream(rest,_gthis.f,_gthis.buf))));
			case 1:
				var at = c[3];
				var e3 = c[2];
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Clogged(e3,new tink_streams__$Stream_RegroupStream(at,_gthis.f,_gthis.buf))));
			case 2:
				var e4 = c[2];
				return handleRemaining(tink_streams_RegroupStatus.Errored(e4),tink_streams_Conclusion.Failed(e4));
			case 3:
				if(error == null) {
					return handleRemaining(tink_streams_RegroupStatus.Ended,tink_streams_Conclusion.Depleted);
				} else {
					return handleRemaining(tink_streams_RegroupStatus.Errored(error),tink_streams_Conclusion.Failed(error));
				}
				break;
			}
		});
		return ret.gather();
	}
	,__class__: tink_streams__$Stream_RegroupStream
});
var tink_streams_Handled = { __ename__ : true, __constructs__ : ["BackOff","Finish","Resume","Clog"] };
tink_streams_Handled.BackOff = ["BackOff",0];
tink_streams_Handled.BackOff.toString = $estr;
tink_streams_Handled.BackOff.__enum__ = tink_streams_Handled;
tink_streams_Handled.Finish = ["Finish",1];
tink_streams_Handled.Finish.toString = $estr;
tink_streams_Handled.Finish.__enum__ = tink_streams_Handled;
tink_streams_Handled.Resume = ["Resume",2];
tink_streams_Handled.Resume.toString = $estr;
tink_streams_Handled.Resume.__enum__ = tink_streams_Handled;
tink_streams_Handled.Clog = function(e) { var $x = ["Clog",3,e]; $x.__enum__ = tink_streams_Handled; $x.toString = $estr; return $x; };
var tink_streams_Conclusion = { __ename__ : true, __constructs__ : ["Halted","Clogged","Failed","Depleted"] };
tink_streams_Conclusion.Halted = function(rest) { var $x = ["Halted",0,rest]; $x.__enum__ = tink_streams_Conclusion; $x.toString = $estr; return $x; };
tink_streams_Conclusion.Clogged = function(error,at) { var $x = ["Clogged",1,error,at]; $x.__enum__ = tink_streams_Conclusion; $x.toString = $estr; return $x; };
tink_streams_Conclusion.Failed = function(error) { var $x = ["Failed",2,error]; $x.__enum__ = tink_streams_Conclusion; $x.toString = $estr; return $x; };
tink_streams_Conclusion.Depleted = ["Depleted",3];
tink_streams_Conclusion.Depleted.toString = $estr;
tink_streams_Conclusion.Depleted.__enum__ = tink_streams_Conclusion;
var tink_streams_ReductionStep = { __ename__ : true, __constructs__ : ["Progress","Crash"] };
tink_streams_ReductionStep.Progress = function(result) { var $x = ["Progress",0,result]; $x.__enum__ = tink_streams_ReductionStep; $x.toString = $estr; return $x; };
tink_streams_ReductionStep.Crash = function(e) { var $x = ["Crash",1,e]; $x.__enum__ = tink_streams_ReductionStep; $x.toString = $estr; return $x; };
var tink_streams_Reduction = { __ename__ : true, __constructs__ : ["Crashed","Failed","Reduced"] };
tink_streams_Reduction.Crashed = function(error,at) { var $x = ["Crashed",0,error,at]; $x.__enum__ = tink_streams_Reduction; $x.toString = $estr; return $x; };
tink_streams_Reduction.Failed = function(error) { var $x = ["Failed",1,error]; $x.__enum__ = tink_streams_Reduction; $x.toString = $estr; return $x; };
tink_streams_Reduction.Reduced = function(result) { var $x = ["Reduced",2,result]; $x.__enum__ = tink_streams_Reduction; $x.toString = $estr; return $x; };
var tink_streams__$Stream_ErrorStream = function(error) {
	tink_streams_StreamBase.call(this);
	this.error = error;
};
tink_streams__$Stream_ErrorStream.__name__ = true;
tink_streams__$Stream_ErrorStream.__super__ = tink_streams_StreamBase;
tink_streams__$Stream_ErrorStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	forEach: function(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Failed(this.error)));
	}
	,__class__: tink_streams__$Stream_ErrorStream
});
var tink_streams__$Stream_Mapping_$Impl_$ = {};
tink_streams__$Stream_Mapping_$Impl_$.__name__ = true;
tink_streams__$Stream_Mapping_$Impl_$._new = function(o) {
	var this1 = o;
	return this1;
};
tink_streams__$Stream_Mapping_$Impl_$.ofNext = function(n) {
	var this1 = { apply : function(i,_) {
		var this2 = tink_core__$Promise_Promise_$Impl_$.next(n(i[0]),tink_core__$Promise_Next_$Impl_$.ofSafeSync(tink_streams_RegroupResult.Converted));
		var f = tink_core__$Promise_Recover_$Impl_$.ofSync(tink_streams_RegroupResult.Errored);
		var ret = this2.flatMap(function(o) {
			switch(o[1]) {
			case 0:
				var d = o[2];
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
			case 1:
				var e = o[2];
				return f(e);
			}
		});
		return ret.gather();
	}};
	return this1;
};
tink_streams__$Stream_Mapping_$Impl_$.ofAsync = function(f) {
	var this1 = { apply : function(i,_) {
		var ret = f(i[0]).map(tink_streams_RegroupResult.Converted);
		return ret.gather();
	}};
	return this1;
};
tink_streams__$Stream_Mapping_$Impl_$.ofSync = function(f) {
	var this1 = { apply : function(i,_) {
		var v;
		var _g = f(i[0]);
		switch(_g[1]) {
		case 0:
			var v1 = _g[2];
			v = tink_streams_RegroupResult.Converted(v1);
			break;
		case 1:
			var e = _g[2];
			v = tink_streams_RegroupResult.Errored(e);
			break;
		}
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}};
	return this1;
};
tink_streams__$Stream_Mapping_$Impl_$.ofPlain = function(f) {
	var this1 = { apply : function(i,_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_RegroupResult.Converted(f(i[0]))));
	}};
	return this1;
};
var tink_streams__$Stream_Filter_$Impl_$ = {};
tink_streams__$Stream_Filter_$Impl_$.__name__ = true;
tink_streams__$Stream_Filter_$Impl_$._new = function(o) {
	var this1 = o;
	return this1;
};
tink_streams__$Stream_Filter_$Impl_$.ofNext = function(n) {
	var this1 = { apply : function(i,_) {
		var this2 = tink_core__$Promise_Promise_$Impl_$.next(n(i[0]),function(matched) {
			if(matched) {
				return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(tink_streams_RegroupResult.Converted(i[0])));
			} else {
				return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(tink_streams_RegroupResult.Swallowed));
			}
		});
		var f = tink_core__$Promise_Recover_$Impl_$.ofSync(tink_streams_RegroupResult.Errored);
		var ret = this2.flatMap(function(o) {
			switch(o[1]) {
			case 0:
				var d = o[2];
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
			case 1:
				var e = o[2];
				return f(e);
			}
		});
		return ret.gather();
	}};
	return this1;
};
tink_streams__$Stream_Filter_$Impl_$.ofAsync = function(f) {
	var this1 = { apply : function(i,_) {
		var ret = f(i[0]).map(function(matched) {
			if(matched) {
				return tink_streams_RegroupResult.Converted(i[0]);
			} else {
				return tink_streams_RegroupResult.Swallowed;
			}
		});
		return ret.gather();
	}};
	return this1;
};
tink_streams__$Stream_Filter_$Impl_$.ofSync = function(f) {
	var this1 = { apply : function(i,_) {
		var v;
		var _g = f(i[0]);
		switch(_g[1]) {
		case 0:
			switch(_g[2]) {
			case false:
				v = tink_streams_RegroupResult.Swallowed;
				break;
			case true:
				v = tink_streams_RegroupResult.Converted(i[0]);
				break;
			}
			break;
		case 1:
			var e = _g[2];
			v = tink_streams_RegroupResult.Errored(e);
			break;
		}
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}};
	return this1;
};
tink_streams__$Stream_Filter_$Impl_$.ofPlain = function(f) {
	var this1 = { apply : function(i,_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i[0]) ? tink_streams_RegroupResult.Converted(i[0]) : tink_streams_RegroupResult.Swallowed));
	}};
	return this1;
};
var tink_streams_IdealizeStream = function(target,rescue) {
	tink_streams_IdealStreamBase.call(this);
	this.target = target;
	this.rescue = rescue;
};
tink_streams_IdealizeStream.__name__ = true;
tink_streams_IdealizeStream.__super__ = tink_streams_IdealStreamBase;
tink_streams_IdealizeStream.prototype = $extend(tink_streams_IdealStreamBase.prototype,{
	get_depleted: function() {
		return this.target.get_depleted();
	}
	,forEach: function(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.target.forEach(handler).handle(function(end) {
				switch(end[1]) {
				case 0:
					var rest = end[2];
					var tmp = tink_streams_Conclusion.Halted(rest.idealize(_gthis.rescue));
					cb(tmp);
					break;
				case 1:
					var at = end[3];
					var e = end[2];
					var tmp1 = tink_streams_Conclusion.Clogged(e,at.idealize(_gthis.rescue));
					cb(tmp1);
					break;
				case 2:
					var e1 = end[2];
					_gthis.rescue(e1).idealize(_gthis.rescue).forEach(handler).handle(cb);
					break;
				case 3:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		});
	}
	,__class__: tink_streams_IdealizeStream
});
var tink_streams_Single = function(value) {
	tink_streams_StreamBase.call(this);
	this.value = value;
};
tink_streams_Single.__name__ = true;
tink_streams_Single.__super__ = tink_streams_StreamBase;
tink_streams_Single.prototype = $extend(tink_streams_StreamBase.prototype,{
	forEach: function(handle) {
		var _gthis = this;
		var item = this.value.get();
		var ret = handle.apply(item).map(function(step) {
			switch(step[1]) {
			case 0:
				return tink_streams_Conclusion.Halted(_gthis);
			case 1:case 2:
				return tink_streams_Conclusion.Depleted;
			case 3:
				var e = step[2];
				return tink_streams_Conclusion.Clogged(e,_gthis);
			}
		});
		return ret.gather();
	}
	,__class__: tink_streams_Single
});
var tink_streams__$Stream_Handler_$Impl_$ = {};
tink_streams__$Stream_Handler_$Impl_$.__name__ = true;
tink_streams__$Stream_Handler_$Impl_$._new = function(f) {
	var this1 = { apply : f};
	return this1;
};
tink_streams__$Stream_Handler_$Impl_$.apply = function(this1,item) {
	return this1.apply(item);
};
tink_streams__$Stream_Handler_$Impl_$.ofSafeSync = function(f) {
	var this1 = { apply : function(i) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
	}};
	return this1;
};
tink_streams__$Stream_Handler_$Impl_$.ofUnknownSync = function(f) {
	var this1 = { apply : function(i) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
	}};
	return this1;
};
tink_streams__$Stream_Handler_$Impl_$.ofSafe = function(f) {
	var this1 = { apply : f};
	return this1;
};
tink_streams__$Stream_Handler_$Impl_$.ofUnknown = function(f) {
	var this1 = { apply : f};
	return this1;
};
var tink_streams__$Stream_Reducer_$Impl_$ = {};
tink_streams__$Stream_Reducer_$Impl_$.__name__ = true;
tink_streams__$Stream_Reducer_$Impl_$._new = function(f) {
	var this1 = { apply : f};
	return this1;
};
tink_streams__$Stream_Reducer_$Impl_$.apply = function(this1,res,item) {
	return this1.apply(res,item);
};
tink_streams__$Stream_Reducer_$Impl_$.ofSafeSync = function(f) {
	var this1 = { apply : function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(res,cur)));
	}};
	return this1;
};
tink_streams__$Stream_Reducer_$Impl_$.ofUnknownSync = function(f) {
	var this1 = { apply : function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(res,cur)));
	}};
	return this1;
};
tink_streams__$Stream_Reducer_$Impl_$.ofSafe = function(f) {
	var this1 = { apply : f};
	return this1;
};
tink_streams__$Stream_Reducer_$Impl_$.ofPlainSync = function(f) {
	var this1 = { apply : function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_ReductionStep.Progress(f(res,cur))));
	}};
	return this1;
};
tink_streams__$Stream_Reducer_$Impl_$.ofUnknown = function(f) {
	var this1 = { apply : f};
	return this1;
};
tink_streams__$Stream_Reducer_$Impl_$.ofPromiseBased = function(f) {
	var this1 = { apply : function(res,cur) {
		var ret = f(res,cur).map(function(s) {
			switch(s[1]) {
			case 0:
				var r = s[2];
				return tink_streams_ReductionStep.Progress(r);
			case 1:
				var e = s[2];
				return tink_streams_ReductionStep.Crash(e);
			}
		});
		return ret.gather();
	}};
	return this1;
};
var tink_streams__$Stream_CompoundStream = function(parts) {
	tink_streams_StreamBase.call(this);
	this.parts = parts;
};
tink_streams__$Stream_CompoundStream.__name__ = true;
tink_streams__$Stream_CompoundStream.consumeParts = function(parts,handler,cb) {
	if(parts.length == 0) {
		cb(tink_streams_Conclusion.Depleted);
	} else {
		parts[0].forEach(handler).handle(function(o) {
			switch(o[1]) {
			case 0:
				var rest = o[2];
				parts = parts.slice();
				parts[0] = rest;
				var tmp = tink_streams_Conclusion.Halted(new tink_streams__$Stream_CompoundStream(parts));
				cb(tmp);
				break;
			case 1:
				var at = o[3];
				var e = o[2];
				if(at.get_depleted()) {
					parts = parts.slice(1);
				} else {
					parts = parts.slice();
					parts[0] = at;
				}
				var tmp1 = tink_streams_Conclusion.Clogged(e,new tink_streams__$Stream_CompoundStream(parts));
				cb(tmp1);
				break;
			case 2:
				var e1 = o[2];
				cb(tink_streams_Conclusion.Failed(e1));
				break;
			case 3:
				tink_streams__$Stream_CompoundStream.consumeParts(parts.slice(1),handler,cb);
				break;
			}
		});
	}
};
tink_streams__$Stream_CompoundStream.of = function(streams) {
	var ret = [];
	var _g = 0;
	while(_g < streams.length) {
		var s = streams[_g];
		++_g;
		s.decompose(ret);
	}
	if(ret.length == 0) {
		return tink_streams_Empty.inst;
	} else {
		return new tink_streams__$Stream_CompoundStream(ret);
	}
};
tink_streams__$Stream_CompoundStream.__super__ = tink_streams_StreamBase;
tink_streams__$Stream_CompoundStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	decompose: function(into) {
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.decompose(into);
		}
	}
	,forEach: function(handler) {
		var a1 = this.parts;
		var a2 = handler;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			tink_streams__$Stream_CompoundStream.consumeParts(a1,a2,cb);
		});
	}
	,__class__: tink_streams__$Stream_CompoundStream
});
var tink_streams_FutureStream = function(f) {
	tink_streams_StreamBase.call(this);
	this.f = f;
};
tink_streams_FutureStream.__name__ = true;
tink_streams_FutureStream.__super__ = tink_streams_StreamBase;
tink_streams_FutureStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	forEach: function(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.f.handle(function(s) {
				s.forEach(handler).handle(cb);
			});
		});
	}
	,__class__: tink_streams_FutureStream
});
var tink_streams_Step = { __ename__ : true, __constructs__ : ["Link","Fail","End"] };
tink_streams_Step.Link = function(value,next) { var $x = ["Link",0,value,next]; $x.__enum__ = tink_streams_Step; $x.toString = $estr; return $x; };
tink_streams_Step.Fail = function(e) { var $x = ["Fail",1,e]; $x.__enum__ = tink_streams_Step; $x.toString = $estr; return $x; };
tink_streams_Step.End = ["End",2];
tink_streams_Step.End.toString = $estr;
tink_streams_Step.End.__enum__ = tink_streams_Step;
var tink_url__$Auth_Auth_$Impl_$ = {};
tink_url__$Auth_Auth_$Impl_$.__name__ = true;
tink_url__$Auth_Auth_$Impl_$._new = function(user,password) {
	var this1 = "" + user + ":" + password;
	return this1;
};
tink_url__$Auth_Auth_$Impl_$.get_user = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return this1.split(":")[0];
	}
};
tink_url__$Auth_Auth_$Impl_$.get_password = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return this1.split(":")[1];
	}
};
tink_url__$Auth_Auth_$Impl_$.toString = function(this1) {
	return this1;
};
var tink_url__$Host_Host_$Impl_$ = {};
tink_url__$Host_Host_$Impl_$.__name__ = true;
tink_url__$Host_Host_$Impl_$._new = function(name,port) {
	var this1;
	if(port == null) {
		this1 = name;
	} else if(port > 65535 || port <= 0) {
		throw new js__$Boot_HaxeError("Invalid port");
	} else {
		this1 = "" + name + ":" + port;
	}
	return this1;
};
tink_url__$Host_Host_$Impl_$.get_name = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		var _g = this1.split("]");
		switch(_g.length) {
		case 1:
			var v = _g[0];
			return v.split(":")[0];
		case 2:
			var v1 = _g[0];
			return v1 + "]";
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
};
tink_url__$Host_Host_$Impl_$.get_port = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		var _g = this1.split("]");
		switch(_g.length) {
		case 1:
			var v = _g[0];
			var _g1 = v.split(":")[1];
			if(_g1 == null) {
				return null;
			} else {
				var p = _g1;
				return Std.parseInt(p);
			}
			break;
		case 2:
			var v1 = _g[1];
			var _g2 = v1.split(":")[1];
			if(_g2 == null) {
				return null;
			} else {
				var p1 = _g2;
				return Std.parseInt(p1);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
};
tink_url__$Host_Host_$Impl_$.toString = function(this1) {
	return this1;
};
var tink_url__$Path_Path_$Impl_$ = {};
tink_url__$Path_Path_$Impl_$.__name__ = true;
tink_url__$Path_Path_$Impl_$.parts = function(this1) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.split("/");
	while(_g1 < _g2.length) {
		var p = _g2[_g1];
		++_g1;
		if(p != "") {
			var this2 = p;
			_g.push(this2);
		}
	}
	return _g;
};
tink_url__$Path_Path_$Impl_$.get_absolute = function(this1) {
	return this1.charAt(0) == "/";
};
tink_url__$Path_Path_$Impl_$.get_isDir = function(this1) {
	return this1.charAt(this1.length - 1) == "/";
};
tink_url__$Path_Path_$Impl_$._new = function(s) {
	var this1 = s;
	return this1;
};
tink_url__$Path_Path_$Impl_$.join = function(this1,that) {
	if(that == "") {
		return this1;
	} else if(that.charAt(0) == "/") {
		return that;
	} else if(this1.charAt(this1.length - 1) == "/") {
		return tink_url__$Path_Path_$Impl_$.ofString(this1 + that);
	} else {
		var _g = this1.lastIndexOf("/");
		if(_g == -1) {
			return that;
		} else {
			var v = _g;
			return tink_url__$Path_Path_$Impl_$.ofString(HxOverrides.substr(this1,0,v + 1) + that);
		}
	}
};
tink_url__$Path_Path_$Impl_$.ofString = function(s) {
	var this1 = tink_url__$Path_Path_$Impl_$.normalize(s);
	return this1;
};
tink_url__$Path_Path_$Impl_$.normalize = function(s) {
	s = StringTools.trim(StringTools.replace(s,"\\","/"));
	if(s == ".") {
		return "./";
	}
	var isDir = StringTools.endsWith(s,"/..") || StringTools.endsWith(s,"/") || StringTools.endsWith(s,"/.");
	var parts = [];
	var isAbsolute = StringTools.startsWith(s,"/");
	var up = 0;
	var _g = 0;
	var _g1 = s.split("/");
	while(_g < _g1.length) {
		var part = _g1[_g];
		++_g;
		var _g2 = StringTools.trim(part);
		switch(_g2) {
		case "":
			break;
		case ".":
			break;
		case "..":
			if(parts.pop() == null) {
				++up;
			}
			break;
		default:
			var v = _g2;
			parts.push(v);
		}
	}
	if(isAbsolute) {
		parts.unshift("");
	} else {
		var _g11 = 0;
		var _g3 = up;
		while(_g11 < _g3) {
			var i = _g11++;
			parts.unshift("..");
		}
	}
	if(isDir) {
		parts.push("");
	}
	return parts.join("/");
};
tink_url__$Path_Path_$Impl_$.toString = function(this1) {
	return this1;
};
var tink_url__$Portion_Portion_$Impl_$ = {};
tink_url__$Portion_Portion_$Impl_$.__name__ = true;
tink_url__$Portion_Portion_$Impl_$.get_raw = function(this1) {
	return this1;
};
tink_url__$Portion_Portion_$Impl_$._new = function(v) {
	var this1 = v;
	return this1;
};
tink_url__$Portion_Portion_$Impl_$.stringly = function(this1) {
	return tink_url__$Portion_Portion_$Impl_$.toString(this1);
};
tink_url__$Portion_Portion_$Impl_$.toString = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return decodeURIComponent(this1.split("+").join(" "));
	}
};
tink_url__$Portion_Portion_$Impl_$.ofString = function(s) {
	var this1 = s == null ? "" : encodeURIComponent(s);
	return this1;
};
var tink_url__$Query_Query_$Impl_$ = {};
tink_url__$Query_Query_$Impl_$.__name__ = true;
tink_url__$Query_Query_$Impl_$.parse = function(this1) {
	return new tink_url__$Query_QueryStringParser(this1,"&","=",0);
};
tink_url__$Query_Query_$Impl_$.iterator = function(this1) {
	return new tink_url__$Query_QueryStringParser(this1,"&","=",0);
};
tink_url__$Query_Query_$Impl_$.toMap = function(this1) {
	var _g = new haxe_ds_StringMap();
	var p = new tink_url__$Query_QueryStringParser(this1,"&","=",0);
	while(p.hasNext()) {
		var p1 = p.next();
		var key = p1.name.toString();
		var value = p1.value;
		if(__map_reserved[key] != null) {
			_g.setReserved(key,value);
		} else {
			_g.h[key] = value;
		}
	}
	return _g;
};
tink_url__$Query_Query_$Impl_$.ofObj = function(v) {
	var this1 = [];
	var ret = this1;
	var v1 = v;
	var _g = 0;
	var _g1 = Reflect.fields(v1);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		ret.push(tink_url__$Portion_Portion_$Impl_$.ofString(k) + "=" + tink_url__$Portion_Portion_$Impl_$.ofString(v1[k]));
	}
	return ret.join("&");
};
tink_url__$Query_Query_$Impl_$.toString = function(this1) {
	return this1;
};
tink_url__$Query_Query_$Impl_$.build = function() {
	var this1 = [];
	return this1;
};
tink_url__$Query_Query_$Impl_$.parseString = function(s,sep,set,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(set == null) {
		set = "=";
	}
	if(sep == null) {
		sep = "&";
	}
	return new tink_url__$Query_QueryStringParser(s,sep,set,pos);
};
var tink_url__$Query_QueryStringBuilder_$Impl_$ = {};
tink_url__$Query_QueryStringBuilder_$Impl_$.__name__ = true;
tink_url__$Query_QueryStringBuilder_$Impl_$._new = function() {
	var this1 = [];
	return this1;
};
tink_url__$Query_QueryStringBuilder_$Impl_$.add = function(this1,name,value) {
	this1.push(name + "=" + value);
	return this1;
};
tink_url__$Query_QueryStringBuilder_$Impl_$.toString = function(this1) {
	return this1.join("&");
};
tink_url__$Query_QueryStringBuilder_$Impl_$.copy = function(this1) {
	return this1.slice();
};
var tink_url__$Query_QueryStringParser = function(s,sep,set,pos) {
	this.s = s == null ? "" : s;
	this.sep = sep;
	this.set = set;
	this.pos = pos;
};
tink_url__$Query_QueryStringParser.__name__ = true;
tink_url__$Query_QueryStringParser.trimmedSub = function(s,start,end) {
	if(start >= s.length) {
		var this1 = "";
		return this1;
	}
	while(s.charCodeAt(start) < 33) ++start;
	if(end < s.length - 1) {
		while(s.charCodeAt(end - 1) < 33) --end;
	}
	var this2 = s.substring(start,end);
	return this2;
};
tink_url__$Query_QueryStringParser.prototype = {
	hasNext: function() {
		return this.pos < this.s.length;
	}
	,next: function() {
		var next = this.s.indexOf(this.sep,this.pos);
		if(next == -1) {
			next = this.s.length;
		}
		var split = this.s.indexOf(this.set,this.pos);
		var start = this.pos;
		this.pos = next + this.sep.length;
		if(split == -1 || split > next) {
			return new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.stringly(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,next)),tink_url__$Portion_Portion_$Impl_$.ofString(""));
		} else {
			return new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.stringly(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,split)),tink_url__$Query_QueryStringParser.trimmedSub(this.s,split + this.set.length,next));
		}
	}
	,__class__: tink_url__$Query_QueryStringParser
};
var tink_web_proxy_Remote = function() { };
tink_web_proxy_Remote.__name__ = true;
var tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$ = {};
tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.__name__ = true;
tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$._new = function(host) {
	var this1 = { host : host};
	return this1;
};
tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.concat = function(a,b) {
	if(a == null) {
		var r = b;
		return r;
	} else if(b == null) {
		var r1 = a;
		return r1;
	} else {
		return a.concat(b);
	}
};
tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub = function(this1,options) {
	return { host : this1.host, headers : tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.concat(this1.headers,options.headers), query : tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.concat(this1.query,options.query), path : tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.concat(this1.path,options.path)};
};
tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.uri = function(this1) {
	var _g = this1.path;
	var tmp;
	if(_g == null) {
		tmp = "";
	} else {
		var v = _g;
		tmp = v.join("/");
	}
	return "/" + tmp + tink_web_proxy__$Remote_QueryParams_$Impl_$.toString(this1.query);
};
tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.request = function(this1,client,method,body,reader) {
	return tink_core__$Promise_Promise_$Impl_$.next(client.request(new tink_http_OutgoingRequest(new tink_http_OutgoingRequestHeader(method,tink__$Url_Url_$Impl_$.parse(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.uri(this1)),null,this1.headers),body)),function(response) {
		return (tink_web_proxy__$Remote_ResponseReader_$Impl_$.withHeader(reader,response.header))(response.body);
	});
};
var tink_web_proxy__$Remote_ResponseReader_$Impl_$ = {};
tink_web_proxy__$Remote_ResponseReader_$Impl_$.__name__ = true;
tink_web_proxy__$Remote_ResponseReader_$Impl_$.withHeader = function(this1,header) {
	var f = this1;
	var a1 = header;
	return function(a2) {
		return f(a1,a2);
	};
};
tink_web_proxy__$Remote_ResponseReader_$Impl_$.ofStringReader = function(read) {
	return function(header,body) {
		return tink_core__$Promise_Promise_$Impl_$.next(tink_io_RealSourceTools.all(body),function(chunk) {
			if(header.statusCode >= 400) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(tink_core_TypedError.withData(header.statusCode,header.reason,chunk.toString(),{ fileName : "Remote.hx", lineNumber : 75, className : "tink.web.proxy._Remote.ResponseReader_Impl_", methodName : "ofStringReader"}))));
			} else {
				var o = chunk.toString();
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(read(o)));
			}
		});
	};
};
tink_web_proxy__$Remote_ResponseReader_$Impl_$.ofSafeStringReader = function(read) {
	return tink_web_proxy__$Remote_ResponseReader_$Impl_$.ofStringReader(function(s) {
		return tink_core_Outcome.Success(read(s));
	});
};
var tink_web_proxy__$Remote_QueryParams_$Impl_$ = {};
tink_web_proxy__$Remote_QueryParams_$Impl_$.__name__ = true;
tink_web_proxy__$Remote_QueryParams_$Impl_$._new = function() {
	var this1 = [];
	return this1;
};
tink_web_proxy__$Remote_QueryParams_$Impl_$.add = function(this1,name,value) {
	this1.push(new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.ofString(name),tink_url__$Portion_Portion_$Impl_$.ofString(value)));
	return this1;
};
tink_web_proxy__$Remote_QueryParams_$Impl_$.flush = function(this1) {
	return this1;
};
tink_web_proxy__$Remote_QueryParams_$Impl_$.toString = function(this1) {
	if(this1 == null) {
		return "";
	} else if(this1.length == 0) {
		return "";
	} else {
		var this2 = [];
		var ret = this2;
		var _g = 0;
		while(_g < this1.length) {
			var p = this1[_g];
			++_g;
			ret.push(p.name + "=" + p.value);
		}
		return "?" + ret.join("&");
	}
};
var tink_web_proxy_RemoteBase = function(client,endpoint) {
	this.client = client;
	this.endpoint = endpoint;
};
tink_web_proxy_RemoteBase.__name__ = true;
tink_web_proxy_RemoteBase.prototype = {
	__class__: tink_web_proxy_RemoteBase
};
var tink_web_proxy_Remote0 = function(client,endpoint) {
	tink_web_proxy_RemoteBase.call(this,client,endpoint);
};
tink_web_proxy_Remote0.__name__ = true;
tink_web_proxy_Remote0.__super__ = tink_web_proxy_RemoteBase;
tink_web_proxy_Remote0.prototype = $extend(tink_web_proxy_RemoteBase.prototype,{
	spreadsheets: function() {
		return new tink_web_proxy_Remote1(this.client,tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(this.endpoint,{ path : [], query : []}));
	}
	,__class__: tink_web_proxy_Remote0
});
var tink_web_proxy_Remote1 = function(client,endpoint) {
	tink_web_proxy_RemoteBase.call(this,client,endpoint);
};
tink_web_proxy_Remote1.__name__ = true;
tink_web_proxy_Remote1.__super__ = tink_web_proxy_RemoteBase;
tink_web_proxy_Remote1.prototype = $extend(tink_web_proxy_RemoteBase.prototype,{
	get: function(spreadsheetId,query) {
		var __body__ = "";
		var this1 = "v4";
		var this2 = "spreadsheets";
		return tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.request(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(this.endpoint,{ path : [this1,this2,tink_url__$Portion_Portion_$Impl_$.ofString(spreadsheetId)], query : [].concat(new tink_querystring_Builder0().stringify(query))}),this.client,"GET",tink_io__$Source_Source_$Impl_$.ofChunk(tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(__body__))),tink_web_proxy__$Remote_ResponseReader_$Impl_$.ofStringReader(($_=new tink_json_Parser0(),$bind($_,$_.tryParse))));
	}
	,create: function(body) {
		var __body__ = new tink_json_Writer0().write(body);
		var this1 = "v4";
		var this2 = "spreadsheets";
		return tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.request(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(this.endpoint,{ path : [this1,this2], query : []}),{ headers : [new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("content-type"),"application/json")]}),this.client,"POST",tink_io__$Source_Source_$Impl_$.ofChunk(tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(__body__))),tink_web_proxy__$Remote_ResponseReader_$Impl_$.ofStringReader(($_=new tink_json_Parser0(),$bind($_,$_.tryParse))));
	}
	,batchUpdate: function(spreadsheetId,body) {
		var __body__ = new tink_json_Writer1().write(body);
		var this1 = "v4";
		var this2 = "spreadsheets";
		return tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.request(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(this.endpoint,{ path : [this1,this2,tink_url__$Portion_Portion_$Impl_$.ofString(spreadsheetId)], query : []}),{ headers : [new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("content-type"),"application/json")]}),this.client,"POST",tink_io__$Source_Source_$Impl_$.ofChunk(tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(__body__))),tink_web_proxy__$Remote_ResponseReader_$Impl_$.ofStringReader(($_=new tink_json_Parser1(),$bind($_,$_.tryParse))));
	}
	,values: function() {
		return new tink_web_proxy_Remote2(this.client,tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(this.endpoint,{ path : [], query : []}));
	}
	,sheets: function() {
		return new tink_web_proxy_Remote3(this.client,tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(this.endpoint,{ path : [], query : []}));
	}
	,__class__: tink_web_proxy_Remote1
});
var tink_web_proxy_Remote2 = function(client,endpoint) {
	tink_web_proxy_RemoteBase.call(this,client,endpoint);
};
tink_web_proxy_Remote2.__name__ = true;
tink_web_proxy_Remote2.__super__ = tink_web_proxy_RemoteBase;
tink_web_proxy_Remote2.prototype = $extend(tink_web_proxy_RemoteBase.prototype,{
	batchClear: function(spreadsheetId,body) {
		var __body__ = new tink_json_Writer2().write(body);
		var this1 = "v4";
		var this2 = "spreadsheets";
		var this3 = "values:batchClear";
		return tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.request(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(this.endpoint,{ path : [this1,this2,tink_url__$Portion_Portion_$Impl_$.ofString(spreadsheetId),this3], query : []}),{ headers : [new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("content-type"),"application/json")]}),this.client,"POST",tink_io__$Source_Source_$Impl_$.ofChunk(tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(__body__))),tink_web_proxy__$Remote_ResponseReader_$Impl_$.ofStringReader(($_=new tink_json_Parser2(),$bind($_,$_.tryParse))));
	}
	,get: function(spreadsheetId,range,query) {
		var __body__ = "";
		var this1 = "v4";
		var this2 = "spreadsheets";
		var this3 = "values";
		return tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.request(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(this.endpoint,{ path : [this1,this2,tink_url__$Portion_Portion_$Impl_$.ofString(spreadsheetId),this3,tink_url__$Portion_Portion_$Impl_$.ofString(range)], query : [].concat(new tink_querystring_Builder1().stringify(query))}),this.client,"GET",tink_io__$Source_Source_$Impl_$.ofChunk(tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(__body__))),tink_web_proxy__$Remote_ResponseReader_$Impl_$.ofStringReader(($_=new tink_json_Parser3(),$bind($_,$_.tryParse))));
	}
	,update: function(spreadsheetId,range,query,body) {
		var __body__ = new tink_json_Writer3().write(body);
		var this1 = "v4";
		var this2 = "spreadsheets";
		var this3 = "values";
		return tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.request(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(this.endpoint,{ path : [this1,this2,tink_url__$Portion_Portion_$Impl_$.ofString(spreadsheetId),this3,tink_url__$Portion_Portion_$Impl_$.ofString(range)], query : [].concat(new tink_querystring_Builder2().stringify(query))}),{ headers : [new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("content-type"),"application/json")]}),this.client,"PUT",tink_io__$Source_Source_$Impl_$.ofChunk(tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(__body__))),tink_web_proxy__$Remote_ResponseReader_$Impl_$.ofStringReader(($_=new tink_json_Parser4(),$bind($_,$_.tryParse))));
	}
	,batchUpdate: function(spreadsheetId,body) {
		var __body__ = new tink_json_Writer4().write(body);
		var this1 = "v4";
		var this2 = "spreadsheets";
		var this3 = "values:batchUpdate";
		return tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.request(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(this.endpoint,{ path : [this1,this2,tink_url__$Portion_Portion_$Impl_$.ofString(spreadsheetId),this3], query : []}),{ headers : [new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("content-type"),"application/json")]}),this.client,"POST",tink_io__$Source_Source_$Impl_$.ofChunk(tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(__body__))),tink_web_proxy__$Remote_ResponseReader_$Impl_$.ofStringReader(($_=new tink_json_Parser5(),$bind($_,$_.tryParse))));
	}
	,batchGet: function(spreadsheetId,query) {
		var __body__ = "";
		var this1 = "v4";
		var this2 = "spreadsheets";
		var this3 = "values:batchGet";
		return tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.request(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(this.endpoint,{ path : [this1,this2,tink_url__$Portion_Portion_$Impl_$.ofString(spreadsheetId),this3], query : [].concat(new tink_querystring_Builder3().stringify(query))}),this.client,"GET",tink_io__$Source_Source_$Impl_$.ofChunk(tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(__body__))),tink_web_proxy__$Remote_ResponseReader_$Impl_$.ofStringReader(($_=new tink_json_Parser6(),$bind($_,$_.tryParse))));
	}
	,clear: function(spreadsheetId,range,body) {
		var __body__ = new tink_json_Writer5().write(body);
		var this1 = "v4";
		var this2 = "spreadsheets";
		var this3 = "values";
		return tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.request(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(this.endpoint,{ path : [this1,this2,tink_url__$Portion_Portion_$Impl_$.ofString(spreadsheetId),this3,tink_url__$Portion_Portion_$Impl_$.ofString(range)], query : []}),{ headers : [new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("content-type"),"application/json")]}),this.client,"POST",tink_io__$Source_Source_$Impl_$.ofChunk(tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(__body__))),tink_web_proxy__$Remote_ResponseReader_$Impl_$.ofStringReader(($_=new tink_json_Parser7(),$bind($_,$_.tryParse))));
	}
	,append: function(spreadsheetId,range,query,body) {
		var __body__ = new tink_json_Writer3().write(body);
		var this1 = "v4";
		var this2 = "spreadsheets";
		var this3 = "values";
		return tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.request(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(this.endpoint,{ path : [this1,this2,tink_url__$Portion_Portion_$Impl_$.ofString(spreadsheetId),this3,tink_url__$Portion_Portion_$Impl_$.ofString(range)], query : [].concat(new tink_querystring_Builder4().stringify(query))}),{ headers : [new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("content-type"),"application/json")]}),this.client,"POST",tink_io__$Source_Source_$Impl_$.ofChunk(tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(__body__))),tink_web_proxy__$Remote_ResponseReader_$Impl_$.ofStringReader(($_=new tink_json_Parser8(),$bind($_,$_.tryParse))));
	}
	,__class__: tink_web_proxy_Remote2
});
var tink_web_proxy_Remote3 = function(client,endpoint) {
	tink_web_proxy_RemoteBase.call(this,client,endpoint);
};
tink_web_proxy_Remote3.__name__ = true;
tink_web_proxy_Remote3.__super__ = tink_web_proxy_RemoteBase;
tink_web_proxy_Remote3.prototype = $extend(tink_web_proxy_RemoteBase.prototype,{
	copyTo: function(spreadsheetId,sheetId,body) {
		var __body__ = new tink_json_Writer6().write(body);
		var this1 = "v4";
		var this2 = "spreadsheets";
		var this3 = "sheets";
		return tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.request(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(tink_web_proxy__$Remote_RemoteEndpoint_$Impl_$.sub(this.endpoint,{ path : [this1,this2,tink_url__$Portion_Portion_$Impl_$.ofString(spreadsheetId),this3,tink_url__$Portion_Portion_$Impl_$.ofString(sheetId)], query : []}),{ headers : [new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("content-type"),"application/json")]}),this.client,"POST",tink_io__$Source_Source_$Impl_$.ofChunk(tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(__body__))),tink_web_proxy__$Remote_ResponseReader_$Impl_$.ofStringReader(($_=new tink_json_Parser9(),$bind($_,$_.tryParse))));
	}
	,__class__: tink_web_proxy_Remote3
});
var tink_web_routing__$Response_Response_$Impl_$ = {};
tink_web_routing__$Response_Response_$Impl_$.__name__ = true;
tink_web_routing__$Response_Response_$Impl_$.ofString = function(s) {
	return tink_web_routing__$Response_Response_$Impl_$.textual("text/plain",s);
};
tink_web_routing__$Response_Response_$Impl_$.ofBytes = function(b) {
	return tink_web_routing__$Response_Response_$Impl_$.binary("application/octetstream",b);
};
tink_web_routing__$Response_Response_$Impl_$.ofUrl = function(u) {
	var this1 = new tink_http__$Response_OutgoingResponseData(new tink_http_ResponseHeader(302,"Temporary Redirect",[new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("location"),tink__$Url_Url_$Impl_$.toString(u))]),tink_io__$Source_Source_$Impl_$.ofChunk(tink__$Chunk_Chunk_$Impl_$.ofBytes(haxe_io_Bytes.ofString(""))));
	return this1;
};
tink_web_routing__$Response_Response_$Impl_$.binary = function(contentType,bytes) {
	return tink_http__$Response_OutgoingResponse_$Impl_$.blob(null,bytes,contentType);
};
tink_web_routing__$Response_Response_$Impl_$.textual = function(contentType,string) {
	return tink_web_routing__$Response_Response_$Impl_$.binary(contentType,haxe_io_Bytes.ofString(string));
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
js_Boot.__toStr = ({ }).toString;
tink__$Chunk_EmptyChunk.EMPTY = new haxe_io_Bytes(new ArrayBuffer(0));
tink__$Chunk_Chunk_$Impl_$.EMPTY = new tink__$Chunk_EmptyChunk();
tink__$Url_Url_$Impl_$.SCHEME = 2;
tink__$Url_Url_$Impl_$.PAYLOAD = 3;
tink__$Url_Url_$Impl_$.AUTH = 6;
tink__$Url_Url_$Impl_$.HOSTNAMES = 7;
tink__$Url_Url_$Impl_$.PATH = 8;
tink__$Url_Url_$Impl_$.QUERY = 10;
tink__$Url_Url_$Impl_$.HASH = 12;
tink_core_FutureTrigger.depth = 0;
tink_http__$Header_HeaderValue_$Impl_$.DAYS = "Sun,Mon,Tue,Wen,Thu,Fri,Sat".split(",");
tink_http__$Header_HeaderValue_$Impl_$.MONTHS = "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(",");
tink_http__$Header_HeaderName_$Impl_$.REFERER = "referer";
tink_http__$Header_HeaderName_$Impl_$.HOST = "host";
tink_http__$Header_HeaderName_$Impl_$.SET_COOKIE = "set-cookie";
tink_http__$Header_HeaderName_$Impl_$.COOKIE = "cookie";
tink_http__$Header_HeaderName_$Impl_$.CONTENT_TYPE = "content-type";
tink_http__$Header_HeaderName_$Impl_$.CONTENT_LENGTH = "content-length";
tink_http__$Header_HeaderName_$Impl_$.CONTENT_DISPOSITION = "content-disposition";
tink_http__$Header_HeaderName_$Impl_$.ACCEPT = "accept";
tink_http__$Header_HeaderName_$Impl_$.ACCEPT_ENCODING = "accept-encoding";
tink_http__$Header_HeaderName_$Impl_$.LOCATION = "location";
tink_http_HeaderParser.INVALID = tink_io_ParseStep.Failed(new tink_core_TypedError(422,"Invalid HTTP header",{ fileName : "Header.hx", lineNumber : 224, className : "tink.http.HeaderParser", methodName : "INVALID"}));
tink_http__$Method_Method_$Impl_$.GET = "GET";
tink_http__$Method_Method_$Impl_$.HEAD = "HEAD";
tink_http__$Method_Method_$Impl_$.OPTIONS = "OPTIONS";
tink_http__$Method_Method_$Impl_$.POST = "POST";
tink_http__$Method_Method_$Impl_$.PUT = "PUT";
tink_http__$Method_Method_$Impl_$.PATCH = "PATCH";
tink_http__$Method_Method_$Impl_$.DELETE = "DELETE";
tink_io__$Sink_Blackhole.inst = new tink_io__$Sink_Blackhole();
tink_io__$Sink_SinkYielding_$Impl_$.BLACKHOLE = tink_io__$Sink_Blackhole.inst;
tink_streams_Empty.inst = new tink_streams_Empty();
tink_io__$Source_Source_$Impl_$.EMPTY = tink_streams_Empty.inst;
tink_io_nodejs_WrappedBuffer.alloc = "allocUnsafe" in Buffer ? js_node_buffer_Buffer.allocUnsafe : function(size) {
	return new js_node_buffer_Buffer(size);
};
tink_url__$Path_Path_$Impl_$.root = (function($this) {
	var $r;
	var this1 = "/";
	$r = this1;
	return $r;
}(this));
RunTests.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
